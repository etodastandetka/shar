import express, { type Express, Request, Response, NextFunction } from "express";
import { createServer, type Server } from "http";
import multer from "multer";
import path from "path";
import crypto from "crypto";
import fs from "fs";
import { db } from "./db-sqlite";
import { Database } from 'better-sqlite3';
import { setupAuth, userRecordToSessionUser, type User, type UserRecord, updateUserSession, fastRegisterWithSession } from "./auth-sqlite";
import { z } from "zod";
import { insertProductSchema, insertOrderSchema, insertReviewSchema, insertNotificationSchema, insertPaymentDetailsSchema } from "@shared/schema";
import PDFDocument from 'pdfkit';
import { createOzonPayAPI } from "./ozonpay";
import { 
  markPhoneAsVerified,
  savePendingRegistration,
  checkPhoneVerification,
  getPendingRegistrationData,
  removePendingRegistration
} from "./phone-verification";
import { handleTelegramUpdate } from "./telegram-bot";

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
interface Product {
  id: number;
  quantity: number;
  name: string;
  price: number;
}

interface PromoCode {
  id: number;
  code: string;
  description: string | null;
  discount_type: 'percentage' | 'fixed';
  discount_value: number;
  min_order_amount: number | null;
  start_date: string;
  end_date: string;
  max_uses: number | null;
  current_uses: number;
  is_active: boolean;
  created_at: string;
  updated_at: string;
}

interface Order {
  id: number;
  user_id: number;
  items: string;
  total_amount: number;
  status: string;
  created_at: string;
  updated_at: string;
  promo_code?: string;
  product_quantities_reduced?: boolean;
  comment?: string;
}

// Helper function for escaping CSV fields (if not already defined)
function escapeCSVField(field: string): string {
  if (!field) return '';
  if (field.includes(';') || field.includes('"') || field.includes('\n')) {
    return `"${field.replace(/"/g, '""')}"`;
  }
  return field;
}

// Middleware for checking authentication
function ensureAuthenticated(req: Request, res: Response, next: Function) {
  if (req.isAuthenticated()) {
    // –û–±–Ω–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º
    updateUserSession(req);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (req.user && (req.user as any).id) {
      const userId = (req.user as any).id;
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
      const existingUser = db.queryOne("SELECT * FROM users WHERE id = ?", [userId]);
      
      if (!existingUser) {
        console.error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
        req.logout(() => {
          res.status(401).json({ message: "–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞." });
        });
        return;
      }
      
      console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ. –ë–∞–ª–∞–Ω—Å: ${(req.user as any).balance || '0'}`);
    return next();
  }
    
    console.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω");
    res.status(401).json({ message: "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω" });
    return;
  }
  
  res.status(401).json({ message: "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" });
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏
async function ensureAdmin(req: Request, res: Response, next: Function) {
  console.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", req.user);
  
  if (!req.isAuthenticated()) {
    console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω");
    return res.status(401).json({ message: "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" });
  }
  
  try {
  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    await updateUserSession(req);
    
    const user = req.user as any;
    
    if (!user) {
      console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Å—Å–∏–∏");
      return res.status(401).json({ message: "–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞" });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (user.isAdmin === true || user.is_admin === 1) {
      console.log(`–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –¥–ª—è: ${user.email}`);
      return next();
    }
    
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.email} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞`);
    return res.status(403).json({ message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞" });
    
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", error);
    return res.status(500).json({ message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
}

// –ö—ç—à –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
const adminCache = new Set<string>();

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ auth-sqlite
import { hashPassword, comparePasswords } from "./auth-sqlite";

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const fileStorage = multer.diskStorage({
  destination: function (req: any, file: any, cb: any) {
    const uploadDir = path.join(process.cwd(), "uploads");
    
    // Create directory if it doesn't exist
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true });
    }
    
    cb(null, uploadDir);
  },
  filename: function (req: any, file: any, cb: any) {
    const uniqueSuffix = Date.now() + "-" + Math.round(Math.random() * 1e9);
    cb(null, uniqueSuffix + path.extname(file.originalname));
  },
});

const upload = multer({
  storage: fileStorage,
  limits: { fileSize: 5 * 1024 * 1024 }, // 5MB
  fileFilter: (req: any, file: any, cb: any) => {
    if (file.mimetype.startsWith("image/")) {
      cb(null, true);
    } else {
      cb(new Error("–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"));
    }
  },
});

// Middleware –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
function preserveAdminStatus(req: Request, res: Response, next: Function) {
  if (req.isAuthenticated() && req.user) {
    const user = req.user as any;
    const userId = user.id;
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∫—ç—à–µ –∞–¥–º–∏–Ω–æ–≤
    if (adminCache.has(userId)) {
      console.log(`üîí –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      user.isAdmin = true;
      user.is_admin = 1;
    }
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫ –∞–¥–º–∏–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à
    if (user.isAdmin === true || user.is_admin === 1) {
      console.log(`‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      adminCache.add(userId);
    }
  }
  next();
}

export async function registerRoutes(app: Express): Promise<Server> {
  // Sets up authentication routes
  setupAuth(app);
  
  // –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  app.use(preserveAdminStatus);

  // Ozon Pay webhook endpoint
  app.post("/api/ozonpay/webhook", express.json(), async (req, res) => {
    try {
      const ozonPayAPI = createOzonPayAPI();
      const webhookData = req.body;
      
      console.log('Ozon Pay webhook received:', webhookData);
      
      // Verify webhook signature
      if (!ozonPayAPI.verifyWebhookSignature(webhookData)) {
        console.error('Invalid webhook signature');
        return res.status(400).json({ error: 'Invalid signature' });
      }
      
      const { orderID, extOrderID, status, transactionID, operationType } = webhookData;
      
      // Check if this is a balance topup or regular order
      const isBalanceTopup = extOrderID && extOrderID.startsWith('balance_');
      
      if (isBalanceTopup) {
        // Handle balance topup
        const topupUpdateResult = db.run(
          `UPDATE balance_topups SET 
           status = ?,
           ozonpay_transaction_id = ?,
           updated_at = datetime('now')
           WHERE ozonpay_payment_id = ?`,
          [
            status === 'Completed' ? 'completed' : status === 'Failed' ? 'failed' : 'pending',
            transactionID || null,
            orderID
          ]
        );
        
        if (topupUpdateResult.changes > 0 && status === 'Completed') {
          // Add amount to user balance
          const topup = db.queryOne(
            "SELECT user_id, amount FROM balance_topups WHERE ozonpay_payment_id = ?",
            [orderID]
          ) as { user_id: string, amount: number } | null;
          
          if (topup) {
            const currentBalance = db.queryOne(
              "SELECT balance FROM users WHERE id = ?",
              [topup.user_id]
            ) as { balance: string } | null;
            
            if (currentBalance) {
              const newBalance = parseFloat(currentBalance.balance || "0") + topup.amount;
              
              db.run(
                `UPDATE users SET balance = ?, updated_at = datetime('now') WHERE id = ?`,
                [newBalance.toFixed(2), topup.user_id]
              );
              
              console.log(`Balance topped up for user ${topup.user_id}: +${topup.amount} ‚ÇΩ, new balance: ${newBalance.toFixed(2)} ‚ÇΩ`);
            }
          }
        }
        
        console.log(`Balance topup ${extOrderID} payment status updated to: ${status}`);
      } else {
        // Handle regular order
        const updateResult = db.run(
          `UPDATE orders SET 
           ozonpay_payment_status = ?,
           ozonpay_transaction_id = ?,
           payment_status = ?,
           order_status = ?,
           updated_at = datetime('now')
           WHERE ozonpay_payment_id = ?`,
          [
            status,
            transactionID || null,
            status === 'Completed' ? 'completed' : status === 'Failed' ? 'failed' : 'pending',
            status === 'Completed' ? 'processing' : status === 'Failed' ? 'cancelled' : 'pending',
            orderID
          ]
        );
      
        if (updateResult.changes > 0) {
          console.log(`Order ${extOrderID} payment status updated to: ${status}`);
          
          // If payment succeeded, reduce product quantities and send receipt
          if (status === 'Completed') {
            const order = db.queryOne(
              "SELECT * FROM orders WHERE ozonpay_payment_id = ?",
              [orderID]
            ) as any;
            
            if (order) {
              // Reduce product quantities if not already done
              if (!order.product_quantities_reduced) {
                try {
                  const items = JSON.parse(order.items);
                  for (const item of items) {
                    db.run(
                      `UPDATE products SET quantity = quantity - ? WHERE id = ?`,
                      [item.quantity, item.id]
                    );
                  }
                  
                  db.run(
                    `UPDATE orders SET product_quantities_reduced = 1 WHERE id = ?`,
                    [order.id]
                  );
                  
                  console.log(`Product quantities reduced for order ${order.id}`);
                } catch (error) {
                  console.error('Error reducing product quantities:', error);
                }
              }
              
              // Send fiscal receipt via Telegram
              try {
                // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏—Å–∫–∞–ª—å–Ω–æ–≥–æ —á–µ–∫–∞
                const { sendFiscalReceiptToUser } = require('./telegram-bot-final.cjs');
                const items = JSON.parse(order.items);
                
                // –°—É–º–º–∞ —Ç–æ–ª—å–∫–æ –∑–∞ —Ç–æ–≤–∞—Ä—ã (–±–µ–∑ –¥–æ—Å—Ç–∞–≤–∫–∏)
                const itemsTotal = items.reduce((sum: number, item: any) => sum + (item.price * item.quantity), 0);
                
                // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏—Å–∫–∞–ª—å–Ω–æ–≥–æ —á–µ–∫–∞ —Å–æ–≥–ª–∞—Å–Ω–æ 54-–§–ó (–∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω)
                const receiptData = {
                  orderId: order.id,
                  items: items,
                  totalAmount: itemsTotal, // –¢–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã, –±–µ–∑ –¥–æ—Å—Ç–∞–≤–∫–∏
                  deliveryAmount: order.delivery_amount,
                  paymentMethod: order.payment_method,
                  transactionId: transactionID,
                  includeDeliveryInReceipt: false, // –î–æ—Å—Ç–∞–≤–∫–∞ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏
                  companyInfo: {
                    name: "Helen's Jungle", // TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                    inn: "000000000000", // TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ò–ù–ù (–ø–æ–ª—É—á–∏—Ç—å –≤ –Ω–∞–ª–æ–≥–æ–≤–æ–π)
                    address: "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1", // TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å
                    phone: "+7 (000) 000-00-00", // TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä
                    email: "info@helens-jungle.ru", // TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π email
                    website: "helens-jungle.ru",
                    taxSystem: "USN" // –£–°–ù - –±–µ–∑ –ù–î–° (–∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –≤–∞—à—É —Å–∏—Å—Ç–µ–º—É)
                  },
                  kassaInfo: {
                    // TODO: –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–Ω–ª–∞–π–Ω-–∫–∞—Å—Å—ã –≤ –§–ù–°
                    registrationNumber: "0000000000000000", // –†–ù –ö–ö–¢ –∏–∑ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–∞ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                    fiscalStorageNumber: "0000000000000000"  // –ù–æ–º–µ—Ä –§–ù –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫–∞—Å—Å—ã
                  },
                  // –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã —á–µ–∫–∞
                  user: {
                    phone: order.phone,
                    email: userRecord?.email || null
                  }
                };
                
                await sendFiscalReceiptToUser(order.phone, receiptData);
                
                console.log(`‚úÖ –§–∏—Å–∫–∞–ª—å–Ω—ã–π —á–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${order.phone}`);
              } catch (receiptError) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏—Å–∫–∞–ª—å–Ω–æ–≥–æ —á–µ–∫–∞:`, receiptError);
              }
            }
          }
        }
      }
      
      res.status(200).json({ status: 'ok' });
    } catch (error) {
      console.error('Ozon Pay webhook error:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  });

  // Payment success page
  app.get("/payment/success", (req, res) => {
    res.send(`
      <!DOCTYPE html>
      <html>
      <head>
        <title>–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞</title>
        <meta charset="utf-8">
        <style>
          body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
          .success { color: #28a745; font-size: 24px; margin-bottom: 20px; }
          .btn { background: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; }
          .info { background: #e3f2fd; padding: 15px; border-radius: 8px; margin: 20px 0; }
        </style>
      </head>
      <body>
        <div class="success">‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</div>
        <div class="info">
          <p>üìß –ß–µ–∫ –ø–æ –∑–∞–∫–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≤–∞—à Telegram!</p>
          <p>–ï—Å–ª–∏ –≤—ã –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ —á–µ–∫ –≤ –±–æ—Ç–µ, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.</p>
        </div>
        <p>–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏.</p>
        <a href="/" class="btn">–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a>
      </body>
      </html>
    `);
  });

  // Payment failure page
  app.get("/payment/fail", (req, res) => {
    res.send(`
      <!DOCTYPE html>
      <html>
      <head>
        <title>–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã</title>
        <meta charset="utf-8">
        <style>
          body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
          .error { color: #dc3545; font-size: 24px; margin-bottom: 20px; }
          .btn { background: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; margin: 10px; }
        </style>
      </head>
      <body>
        <div class="error">‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ</div>
        <p>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.</p>
        <a href="/profile" class="btn">–ú–æ–∏ –∑–∞–∫–∞–∑—ã</a>
        <a href="/" class="btn">–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a>
      </body>
      </html>
    `);
  });
  
  // Retry payment for existing order
  app.post("/api/orders/:id/retry-payment", ensureAuthenticated, async (req, res) => {
    try {
      const orderId = req.params.id;
      const user = req.user as Express.User;
      
      // Get order
      const order = db.queryOne(
        user.isAdmin 
          ? "SELECT * FROM orders WHERE id = ?"
          : "SELECT * FROM orders WHERE id = ? AND user_id = ?",
        user.isAdmin ? [orderId] : [orderId, user.id]
      ) as any;
      
      if (!order) {
        return res.status(404).json({ message: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      
      if (order.payment_method !== 'ozonpay') {
        return res.status(400).json({ message: "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è Ozon Pay" });
      }
      
      if (order.payment_status === 'completed') {
        return res.status(400).json({ message: "–ó–∞–∫–∞–∑ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω" });
      }
      
      try {
        const ozonPayAPI = createOzonPayAPI();
        
        // Get user email
        const userRecord = db.queryOne("SELECT email FROM users WHERE id = ?", [order.user_id]) as { email: string } | null;
        
        const paymentData = {
          amount: Math.round(order.total_amount * 100), // –í–∫–ª—é—á–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫—É, convert to kopecks
          currency: "RUB",
          orderId: `${order.id}_retry_${Date.now()}`,
          description: `–ó–∞–∫–∞–∑ #${order.id} –Ω–∞ —Å–∞–π—Ç–µ Helen's Jungle (–ø–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–ø–ª–∞—Ç–∞, –≤–∫–ª—é—á–∞—è –¥–æ—Å—Ç–∞–≤–∫—É)`,
          customerEmail: userRecord?.email,
          customerPhone: order.phone
        };

        // Prepare order items for Ozon Pay
        const orderItems = JSON.parse(order.items).map((item: any, index: number) => {
          // Ensure extId is always a string
          const extId = item.id != null ? String(item.id) : `item_${index}`;
          console.log(`OzonPay retry item ${index}: id=${item.id} -> extId="${extId}" (type: ${typeof extId})`);
          
          return {
            extId,
            name: item.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä',
            price: {
              currencyCode: "643",
              value: Math.round((item.price || 0) * 100) // Convert to kopecks
            },
            quantity: item.quantity,
            type: "TYPE_PRODUCT",
            unitType: "UNIT_PIECE",
            vat: "VAT_NONE",
            needMark: false
          };
        });

        const paymentResponse = await ozonPayAPI.createPayment(paymentData, orderItems);
        
        // Update payment details
        db.run(
          `UPDATE orders SET 
           ozonpay_payment_id = ?,
           ozonpay_payment_url = ?,
           ozonpay_payment_status = 'pending',
           payment_status = 'pending',
           updated_at = datetime('now')
           WHERE id = ?`,
          [paymentResponse.orderId, paymentResponse.paymentUrl, order.id]
        );

        res.json({
          paymentUrl: paymentResponse.paymentUrl,
          paymentId: paymentResponse.orderId
        });
      } catch (error: any) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:", error);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Ozon Pay API
        if (error.message === 'OZON_PAY_API_UNAVAILABLE') {
          return res.status(503).json({ 
            message: "‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            code: "PAYMENT_SERVICE_UNAVAILABLE"
          });
        }
        
        res.status(500).json({ 
          message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." 
        });
      }
    } catch (error) {
      console.error("Error retrying payment:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  });

  // Top up balance endpoint
  app.post("/api/balance/topup", ensureAuthenticated, async (req, res) => {
    try {
      const user = req.user as Express.User;
      const { amount, paymentMethod } = req.body;
      
      if (!amount || amount <= 0) {
        return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞" });
      }
      
      if (!paymentMethod || !["ozonpay", "directTransfer"].includes(paymentMethod)) {
        return res.status(400).json({ message: "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è" });
      }
      
      if (paymentMethod === "ozonpay") {
        try {
          const ozonPayAPI = createOzonPayAPI();
          
          const paymentData = {
            amount: Math.round(amount * 100), // Convert to kopecks
            currency: "RUB",
            orderId: `balance_${user.id}_${Date.now()}`,
            description: `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ ${amount} ‚ÇΩ`,
            customerEmail: user.email,
            customerPhone: user.phone
          };

          // Prepare balance topup item for Ozon Pay
          const orderItems = [{
            extId: "balance_topup",
            name: `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ ${amount} ‚ÇΩ`,
            price: {
              currencyCode: "643",
              value: Math.round(amount * 100) // Convert to kopecks
            },
            quantity: 1,
            type: "TYPE_SERVICE",
            unitType: "UNIT_PIECE",
            vat: "VAT_NONE",
            needMark: false
          }];

          const paymentResponse = await ozonPayAPI.createPayment(paymentData, orderItems);
          
          // Save topup record
          db.run(
            `INSERT INTO balance_topups (user_id, amount, payment_method, ozonpay_payment_id, ozonpay_payment_url, status, created_at)
             VALUES (?, ?, ?, ?, ?, 'pending', datetime('now'))`,
            [user.id, amount, paymentMethod, paymentResponse.orderId, paymentResponse.paymentUrl]
          );

          res.json({
            paymentUrl: paymentResponse.paymentUrl,
            paymentId: paymentResponse.orderId
          });
        } catch (error: any) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", error);
          
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Ozon Pay API
          if (error.message === 'OZON_PAY_API_UNAVAILABLE') {
            return res.status(503).json({ 
              message: "‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
              code: "PAYMENT_SERVICE_UNAVAILABLE"
            });
          }
          
          res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É" });
        }
      } else {
        // Direct transfer - create pending topup record
        const result = db.run(
          `INSERT INTO balance_topups (user_id, amount, payment_method, status, created_at)
           VALUES (?, ?, ?, 'pending', datetime('now'))`,
          [user.id, amount, paymentMethod]
        );

        res.json({
          topupId: result.lastInsertRowid,
          message: "–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∞. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."
        });
      }
    } catch (error) {
      console.error("Error creating balance topup:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ" });
    }
  });

  // Get balance history
  app.get("/api/balance/history", ensureAuthenticated, async (req, res) => {
    try {
      const user = req.user as Express.User;
      
      // Get topup history
      const topups = db.query(
        `SELECT * FROM balance_topups 
         WHERE user_id = ? 
         ORDER BY created_at DESC`,
        [user.id]
      );
      
      // Get order history (where balance was used)
      const orders = db.query(
        `SELECT id, total_amount, created_at, order_status 
         FROM orders 
         WHERE user_id = ? AND payment_method = 'balance'
         ORDER BY created_at DESC`,
        [user.id]
      );
      
      res.json({
        topups: topups || [],
        orders: orders || []
      });
    } catch (error) {
      console.error("Error fetching balance history:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–∞–Ω—Å–∞" });
    }
  });
  
  // Serve static uploads
  app.use("/uploads", express.static(path.join(process.cwd(), "uploads")));
  
  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —á–µ–∫–æ–≤
  // app.use("/receipts", express.static(path.join(process.cwd(), "public", "receipts")));
  
  // Upload image route
  app.post("/api/upload", ensureAdmin, upload.single("image"), (req, res) => {
    try {
      console.log("üî• UPLOAD: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è");
      console.log("üî• UPLOAD: User:", req.user ? req.user.id : '–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      console.log("üî• UPLOAD: File:", req.file ? req.file.filename : '–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
      
      if (!req.file) {
        console.log("‚ùå UPLOAD: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ");
        return res.status(400).json({ message: "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ" });
      }
      
      // –°–æ–∑–¥–∞–µ–º URL –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
      const imageUrl = `/uploads/${req.file.filename}`;
      console.log(`‚úÖ UPLOAD: –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: ${imageUrl}`);
      
      res.json({ 
        message: "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω", 
        imageUrl: imageUrl,
        file: req.file
      });
    } catch (error) {
      console.error("‚ùå UPLOAD: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞" });
    }
  });
  
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä—è–º–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  app.post("/api/upload-images", ensureAdmin, upload.array("images", 10), (req, res) => {
    try {
      console.log("üî• UPLOAD-IMAGES: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π");
      console.log("üî• UPLOAD-IMAGES: User:", req.user ? req.user.id : '–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      console.log("üî• UPLOAD-IMAGES: Files count:", req.files ? req.files.length : 0);
      
      if (!req.files || req.files.length === 0) {
        console.log("‚ùå UPLOAD-IMAGES: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã");
        return res.status(400).json({ message: "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã" });
      }
      
      // –°–æ–∑–¥–∞–µ–º URL –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
      const imageUrls: string[] = [];
      const files = req.files as Express.Multer.File[];
      
      files.forEach(file => {
        const imageUrl = `/uploads/${file.filename}`;
        imageUrls.push(imageUrl);
        console.log(`‚úÖ UPLOAD-IMAGES: –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: ${imageUrl}`);
      });
      
      res.json({ 
        message: "–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã", 
        imageUrls: imageUrls
      });
    } catch (error) {
      console.error("‚ùå UPLOAD-IMAGES: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤" });
    }
  });
  
  // Product routes
  app.get("/api/products", async (req, res) => {
    try {
      console.log("Products API called with filters:", req.query);
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const rawProducts = db.query("SELECT * FROM products");
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–Ω—è—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç—É
      const products = rawProducts.map(product => formatProductForClient(product));
      
      // Apply filters if specified in query params
      let filteredProducts = products.filter(Boolean); // –£–¥–∞–ª—è–µ–º null –∑–Ω–∞—á–µ–Ω–∏—è
      
      // Filter by category
      if (req.query.category) {
        filteredProducts = filteredProducts.filter(
          product => product && product.category === req.query.category
        );
      }
      
      // Filter by availability
      if (req.query.available === "true") {
        filteredProducts = filteredProducts.filter(
          product => product && product.isAvailable && product.quantity > 0
        );
      }
      
      // Filter by preorder status
      if (req.query.preorder === "true") {
        filteredProducts = filteredProducts.filter(
          product => product && product.isPreorder
        );
      }
      
      // Filter by rare status
      if (req.query.rare === "true") {
        filteredProducts = filteredProducts.filter(
          product => product && product.isRare
        );
      }
      
      // Filter by search term
      if (req.query.search) {
        const searchTerm = (req.query.search as string).toLowerCase();
        filteredProducts = filteredProducts.filter(
          product => 
            product && (
            product.name.toLowerCase().includes(searchTerm) ||
            product.description.toLowerCase().includes(searchTerm)
            )
        );
      }
      
      // Filter by price range
      if (req.query.minPrice) {
        const minPrice = parseFloat(req.query.minPrice as string);
        filteredProducts = filteredProducts.filter(
          product => product && product.price >= minPrice
        );
      }
      
      if (req.query.maxPrice) {
        const maxPrice = parseFloat(req.query.maxPrice as string);
        filteredProducts = filteredProducts.filter(
          product => product && product.price <= maxPrice
        );
      }
      
      // Filter by labels (for special filters like "rare", "easy care", "discount")
      if (req.query.labels) {
        const requestedLabels = Array.isArray(req.query.labels) 
          ? req.query.labels 
          : [req.query.labels];
        
        filteredProducts = filteredProducts.filter(product => {
          if (!product || !product.labels) return false;
          
          // Check if product has any of the requested labels
          return requestedLabels.some((label: string) => 
            product.labels.includes(label)
          );
        });
      }

      // Filter by boolean flags (alternative approach for UI filters)
      if (req.query.rare === "true") {
        filteredProducts = filteredProducts.filter(
          product => product && product.isRare
        );
      }

      if (req.query.easy === "true") {
        filteredProducts = filteredProducts.filter(
          product => product && product.isEasyToCare
        );
      }

      if (req.query.discount === "true") {
        filteredProducts = filteredProducts.filter(
          product => product && product.originalPrice && product.originalPrice > product.price
        );
      }

      // Filter by plant size
      if (req.query.plantSize) {
        filteredProducts = filteredProducts.filter(
          product => product && product.plantSize === req.query.plantSize
        );
      }

      // Filter by light level
      if (req.query.lightLevel) {
        filteredProducts = filteredProducts.filter(
          product => product && product.lightLevel === req.query.lightLevel
        );
      }

      // Filter by humidity level
      if (req.query.humidityLevel) {
        filteredProducts = filteredProducts.filter(
          product => product && product.humidityLevel === req.query.humidityLevel
        );
      }

      // Filter by plant type
      if (req.query.plantType) {
        filteredProducts = filteredProducts.filter(
          product => product && product.plantType === req.query.plantType
        );
      }

      // Filter by origin
      if (req.query.origin) {
        filteredProducts = filteredProducts.filter(
          product => product && product.origin === req.query.origin
        );
      }

      // Filter by pet safe
      if (req.query.petSafe === "true") {
        filteredProducts = filteredProducts.filter(
          product => product && product.isPetSafe
        );
      }

      // Filter by air purifying
      if (req.query.airPurifying === "true") {
        filteredProducts = filteredProducts.filter(
          product => product && product.isAirPurifying
        );
      }

      // Filter by flowering
      if (req.query.flowering === "true") {
        filteredProducts = filteredProducts.filter(
          product => product && product.isFlowering
        );
      }

      console.log(`Filtered products: ${filteredProducts.length} out of ${products.length} total products`);
      res.json(filteredProducts);
    } catch (error) {
      console.error("Error fetching products:", error);
      res.status(500).json({ message: "Failed to fetch products" });
    }
  });
  
  // Get product by ID
  app.get("/api/products/:id", async (req, res) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
      const productId = parseInt(req.params.id);
      if (isNaN(productId)) {
        return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞" });
      }
      
      const product = db.queryOne(
        "SELECT * FROM products WHERE id = ?",
        [productId]
      );
      
      if (!product) {
        return res.status(404).json({ message: "Product not found" });
      }
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
      const formattedProduct = formatProductForClient(product);
      
      res.json(formattedProduct);
    } catch (error) {
      console.error("Error fetching product:", error);
      res.status(500).json({ message: "Failed to fetch product" });
    }
  });
  
  // Create new product
  app.post("/api/products", ensureAdmin, async (req, res) => {
    try {
      console.log("Creating product with data:", req.body);
      
      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
      const productData = req.body;
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (!productData.name || !productData.price) {
        return res.status(400).json({ 
          message: "–ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞" 
        });
      }
      
      // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º —Å—Ç—Ä–æ–∫
      if (!productData.images) {
        productData.images = [];
      } else if (typeof productData.images === 'string') {
        productData.images = [productData.images];
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã –≤ —á–∏—Å–ª–∞
      try {
      productData.price = parseFloat(productData.price);
        if (isNaN(productData.price)) {
          return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã" });
        }
        
      if (productData.originalPrice) {
        productData.originalPrice = parseFloat(productData.originalPrice);
          if (isNaN(productData.originalPrice)) {
            return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–π —Ü–µ–Ω—ã" });
          }
        }
        
        productData.quantity = parseInt(productData.quantity || "0");
        if (isNaN(productData.quantity)) {
          return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞" });
        }
        
      if (productData.deliveryCost) {
        productData.deliveryCost = parseFloat(productData.deliveryCost);
          if (isNaN(productData.deliveryCost)) {
            return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏" });
          }
        }
      } catch (error) {
        console.error("Error parsing numeric values:", error);
        return res.status(400).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π" });
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏ (–±—É–ª–µ–≤—ã –∑–Ω–∞—á–µ–Ω–∏—è)
      productData.isAvailable = productData.isAvailable === true || productData.isAvailable === 'true';
      productData.isPreorder = productData.isPreorder === true || productData.isPreorder === 'true';
      productData.isRare = productData.isRare === true || productData.isRare === 'true';
      productData.isEasyToCare = productData.isEasyToCare === true || productData.isEasyToCare === 'true';
      productData.isPetSafe = productData.isPetSafe === true || productData.isPetSafe === 'true';
      productData.isAirPurifying = productData.isAirPurifying === true || productData.isAirPurifying === 'true';
      productData.isFlowering = productData.isFlowering === true || productData.isFlowering === 'true';
      productData.isHotDeal = productData.isHotDeal === true || productData.isHotDeal === 'true';
      productData.isBestseller = productData.isBestseller === true || productData.isBestseller === 'true';
      productData.isNewArrival = productData.isNewArrival === true || productData.isNewArrival === 'true';
      productData.isLimitedEdition = productData.isLimitedEdition === true || productData.isLimitedEdition === 'true';
      productData.isDiscounted = productData.isDiscounted === true || productData.isDiscounted === 'true';

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
      productData.plantSize = productData.plantSize || 'medium';
      productData.lightLevel = productData.lightLevel || 'moderate';
      productData.humidityLevel = productData.humidityLevel || 'medium';
      productData.plantType = productData.plantType || 'decorative';
      productData.origin = productData.origin || 'tropical';
      
      // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
      try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –≤ —Ç–∞–±–ª–∏—Ü–µ –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã
        try {
          const tableInfo = db.query("PRAGMA table_info(products)");
          const columns = tableInfo.map((col: any) => col.name);
          const requiredColumns = [
            'name', 'description', 'price', 'original_price', 'images', 'quantity', 
            'category', 'is_available', 'is_preorder', 'is_rare', 'is_easy_to_care',
            'labels', 'delivery_cost'
          ];
          
          const missingColumns = requiredColumns.filter(col => !columns.includes(col));
          
          if (missingColumns.length > 0) {
            console.error(`–í —Ç–∞–±–ª–∏—Ü–µ products –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–æ–ª–±—Ü—ã: ${missingColumns.join(', ')}`);
            return res.status(500).json({ 
              message: "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±—É–µ–º–æ–π. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É update-db-schema.bat" 
            });
          }
        } catch (err) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã:", err);
        }
      
      // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
      const result = db.insert(
        `INSERT INTO products (
          name, description, price, original_price, 
          images, quantity, category, is_available, 
          is_preorder, is_rare, is_easy_to_care, 
          labels, delivery_cost, plant_size, light_level,
          humidity_level, plant_type, origin, is_pet_safe,
          is_air_purifying, is_flowering, is_hot_deal,
          is_bestseller, is_new_arrival, is_limited_edition, is_discounted, created_at
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          productData.name, 
            productData.description || "", 
          productData.price, 
          productData.originalPrice || null, 
            JSON.stringify(productData.images || []), 
          productData.quantity || 0, 
            productData.category || "", 
          productData.isAvailable ? 1 : 0, 
          productData.isPreorder ? 1 : 0, 
          productData.isRare ? 1 : 0, 
          productData.isEasyToCare ? 1 : 0, 
          JSON.stringify(productData.labels || []), 
          productData.deliveryCost || 0,
          productData.plantSize,
          productData.lightLevel,
          productData.humidityLevel,
          productData.plantType,
          productData.origin,
          productData.isPetSafe ? 1 : 0,
          productData.isAirPurifying ? 1 : 0,
          productData.isFlowering ? 1 : 0,
          productData.isHotDeal ? 1 : 0,
          productData.isBestseller ? 1 : 0,
          productData.isNewArrival ? 1 : 0,
          productData.isLimitedEdition ? 1 : 0,
          productData.isDiscounted ? 1 : 0,
          new Date().toISOString()
        ]
      );
      
        console.log("Product created successfully with result:", result);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –ø–æ –µ–≥–æ ID
        try {
          console.log("ID –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:", result);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ result - —ç—Ç–æ —á–∏—Å–ª–æ
          if (result === undefined || result === null) {
            console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞");
            return res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: –Ω–µ –ø–æ–ª—É—á–µ–Ω ID" });
          }
          
          // –°—Ä–∞–∑—É –ø–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –ø–æ ID
          const newProduct = db.queryOne(
        "SELECT * FROM products WHERE id = ?",
            [result]
          );
          
          if (!newProduct) {
            console.error(`–¢–æ–≤–∞—Ä —Å ID ${result} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è`);
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
            const lastProduct = db.queryOne(
              "SELECT * FROM products ORDER BY id DESC LIMIT 1"
            );
            
            if (lastProduct) {
              console.log("–ù–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–≤–∞—Ä:", lastProduct);
              const formattedProduct = formatProductForClient(lastProduct);
              return res.status(201).json(formattedProduct);
            } else {
              return res.status(500).json({ message: "–¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" });
            }
          }
          
          console.log("–ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω:", newProduct);
          
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É JSON –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è images –∏ labels
          const formattedProduct = formatProductForClient(newProduct);
          
          // –û–¢–ü–†–ê–í–õ–Ø–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û –ù–û–í–û–ú –¢–û–í–ê–†–ï –í–°–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú
          try {
            const { sendNewProductNotificationToAllUsers } = await import('./telegram-bot-final.cjs');
            
            const notificationData = {
              productId: newProduct.id,
              productName: newProduct.name,
              productPrice: newProduct.price,
              productCategory: newProduct.category || '–†–∞—Å—Ç–µ–Ω–∏—è',
              productDescription: newProduct.description || '–ù–æ–≤–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ!',
              productImage: newProduct.images ? JSON.parse(newProduct.images)[0] : undefined
            };
            
            console.log('üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Ç–æ–≤–∞—Ä–µ:', notificationData);
            const sentCount = await sendNewProductNotificationToAllUsers(notificationData);
            console.log(`üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Ç–æ–≤–∞—Ä–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sentCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º`);
          } catch (telegramError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram:', telegramError);
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å
          }
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –∫–ª–∏–µ–Ω—Ç—É
          res.status(201).json(formattedProduct);
        } catch (queryError) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:", queryError);
          return res.status(500).json({ message: "–¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" });
        }
      } catch (dbError) {
        console.error("Database error creating product:", dbError);
        return res.status(500).json({ message: "–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞" });
      }
    } catch (error) {
      console.error("Error creating product:", error);
      res.status(500).json({ message: "Failed to create product", error: String(error) });
    }
  });
  
  // Update product
  app.put("/api/products/:id", ensureAdmin, async (req, res) => {
    try {
      const productId = req.params.id;
      const productData = req.body;
      
      console.log("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", productData);
      console.log("üè∑Ô∏è –§–ª–∞–∂–æ–∫ isDiscounted:", productData.isDiscounted, typeof productData.isDiscounted);
      
      // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º —Å—Ç—Ä–æ–∫
      if (!productData.images) {
        productData.images = [];
      } else if (typeof productData.images === 'string') {
        productData.images = [productData.images];
      }
      
      console.log("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:", productData.images);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
      const existingProduct = db.query(
        "SELECT * FROM products WHERE id = ?",
        [productId]
      );
      
      if (existingProduct.length === 0) {
        return res.status(404).json({ message: "Product not found" });
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
      db.update(
        `UPDATE products SET
          name = ?,
          description = ?,
          price = ?,
          original_price = ?,
          images = ?,
          quantity = ?,
          category = ?,
          is_available = ?,
          is_preorder = ?,
          is_rare = ?,
          is_easy_to_care = ?,
          labels = ?,
          delivery_cost = ?,
          plant_size = ?,
          light_level = ?,
          humidity_level = ?,
          plant_type = ?,
          origin = ?,
          is_pet_safe = ?,
          is_air_purifying = ?,
          is_flowering = ?,
          is_hot_deal = ?,
          is_bestseller = ?,
          is_new_arrival = ?,
          is_limited_edition = ?,
          is_discounted = ?,
          updated_at = ?
        WHERE id = ?`,
        [
          productData.name, 
          productData.description, 
          parseFloat(productData.price), 
          productData.originalPrice ? parseFloat(productData.originalPrice) : null, 
          JSON.stringify(productData.images), 
          parseInt(productData.quantity) || 0, 
          productData.category, 
          productData.isAvailable === true || productData.isAvailable === 'true' ? 1 : 0, 
          productData.isPreorder === true || productData.isPreorder === 'true' ? 1 : 0, 
          productData.isRare === true || productData.isRare === 'true' ? 1 : 0, 
          productData.isEasyToCare === true || productData.isEasyToCare === 'true' ? 1 : 0, 
          JSON.stringify(productData.labels || []), 
          productData.deliveryCost ? parseFloat(productData.deliveryCost) : 0,
          productData.plantSize || 'medium',
          productData.lightLevel || 'moderate',
          productData.humidityLevel || 'medium',
          productData.plantType || 'decorative',
          productData.origin || 'tropical',
          productData.isPetSafe === true || productData.isPetSafe === 'true' ? 1 : 0,
          productData.isAirPurifying === true || productData.isAirPurifying === 'true' ? 1 : 0,
          productData.isFlowering === true || productData.isFlowering === 'true' ? 1 : 0,
          productData.isHotDeal === true || productData.isHotDeal === 'true' ? 1 : 0,
          productData.isBestseller === true || productData.isBestseller === 'true' ? 1 : 0,
          productData.isNewArrival === true || productData.isNewArrival === 'true' ? 1 : 0,
          productData.isLimitedEdition === true || productData.isLimitedEdition === 'true' ? 1 : 0,
          productData.isDiscounted === true || productData.isDiscounted === 'true' ? 1 : 0,
          new Date().toISOString(),
          productId
        ]
      );
      
      try {
      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
        const updatedProduct = db.queryOne(
        "SELECT * FROM products WHERE id = ?",
        [productId]
        );
        
        if (!updatedProduct) {
          return res.status(404).json({ message: "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è" });
        }
        
        console.log("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:", updatedProduct);
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        const formattedProduct = formatProductForClient(updatedProduct);
        
        res.json(formattedProduct);
      } catch (queryError) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:", queryError);
        return res.status(500).json({ message: "–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" });
      }
    } catch (error) {
      console.error("Error updating product:", error);
      res.status(500).json({ message: "Failed to update product" });
    }
  });
  
  // Delete product
  app.delete("/api/products/:id", ensureAdmin, async (req, res) => {
    try {
      const productId = req.params.id;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
      if (isNaN(parseInt(productId))) {
        return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞" });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
      const existingProduct = db.query(
        "SELECT * FROM products WHERE id = ?",
        [productId]
      );
      
      if (existingProduct.length === 0) {
        return res.status(404).json({ message: "Product not found" });
      }
      
      // –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
      db.delete(
        "DELETE FROM products WHERE id = ?",
        [productId]
      );
      
      res.json({ message: "Product deleted successfully" });
    } catch (error) {
      console.error("Error deleting product:", error);
      res.status(500).json({ message: "Failed to delete product" });
    }
  });
  
  // Get unique categories
  app.get("/api/categories", async (req, res) => {
    try {
      const products = db.query("SELECT DISTINCT category FROM products WHERE category IS NOT NULL AND category != ''");
      const categories = products.map((product: any) => product.category).filter(Boolean);
      res.json(categories);
    } catch (error) {
      console.error("Error fetching categories:", error);
      res.status(500).json({ message: "Failed to fetch categories" });
    }
  });
  
  // –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–Ω—ã–º–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏
  app.get("/api/payment-details", async (req, res) => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã (–±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å)
      const paymentDetails = db.queryOne("SELECT * FROM payment_details LIMIT 1") as {
        id: number;
        card_number: string;
        card_holder: string;
        bank_name: string;
        qr_code_url: string;
        instructions: string;
        created_at: string;
        updated_at: string;
      } | null;
      
      if (!paymentDetails) {
        return res.status(404).json({ message: "–ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" });
      }
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∫–∞–∫ bankDetails –Ω–∞–ø—Ä—è–º—É—é
      const formattedDetails = {
        id: paymentDetails.id,
        bankDetails: paymentDetails.instructions || '',
        qrCodeUrl: paymentDetails.qr_code_url,
        updatedAt: paymentDetails.updated_at
      };
      
      res.json(formattedDetails);
    } catch (error) {
      console.error("Error fetching payment details:", error);
      res.status(500).json({ message: "Failed to fetch payment details" });
    }
  });
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
  app.put("/api/payment-details", ensureAdmin, async (req, res) => {
    try {
      console.log("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤:", req.body);
      const { bankDetails } = req.body;
      
      if (!bankDetails) {
        return res.status(400).json({ message: "–ü–æ–ª–µ bankDetails –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ" });
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
      const paymentDetails = db.queryOne("SELECT * FROM payment_details LIMIT 1") as {
        id: number;
        qr_code_url: string;
      } | null;
      
      if (!paymentDetails) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        console.log("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤");
        db.run(`
          INSERT INTO payment_details (
            card_number, card_holder, bank_name, instructions, qr_code_url
          ) VALUES (?, ?, ?, ?, ?)
        `, [
          '', 
          '', 
          '', 
          bankDetails,
          '/uploads/default-qr.png'
        ]);
        
        const newDetails = db.queryOne("SELECT * FROM payment_details LIMIT 1") as {
          id: number;
          instructions: string;
          qr_code_url: string;
        };

        return res.json({
          id: newDetails.id,
          bankDetails: newDetails.instructions,
          qrCodeUrl: newDetails.qr_code_url,
          updatedAt: new Date().toISOString()
        });
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
      console.log("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤");
      
      const updateResult = db.run(`
        UPDATE payment_details SET 
        instructions = ?,
        updated_at = ?
        WHERE id = ?
      `, [
        bankDetails,
        new Date().toISOString(),
        paymentDetails.id
      ]);
      
      console.log("–û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:", updateResult.changes);
      
      const updatedDetails = db.queryOne("SELECT * FROM payment_details WHERE id = ?", [paymentDetails.id]) as {
        id: number;
        instructions: string;
        qr_code_url: string;
        updated_at: string;
      };
      
      res.json({
        id: updatedDetails.id,
        bankDetails: updatedDetails.instructions,
        qrCodeUrl: updatedDetails.qr_code_url,
        updatedAt: updatedDetails.updated_at
      });
    } catch (error) {
      console.error("Error updating payment details:", error);
      res.status(500).json({ message: "Failed to update payment details" });
    }
  });
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ QR-–∫–æ–¥–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
  app.post("/api/upload-qr-code", ensureAdmin, upload.single("qrCode"), (req, res) => {
    try {
      if (!req.file) {
        return res.status(400).json({ message: "QR-–∫–æ–¥ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω" });
      }
      
      // –°–æ–∑–¥–∞–µ–º URL –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É QR-–∫–æ–¥—É
      const qrCodeUrl = `/uploads/${req.file.filename}`;
      console.log(`QR-–∫–æ–¥ –∑–∞–≥—Ä—É–∂–µ–Ω: ${qrCodeUrl}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º URL QR-–∫–æ–¥–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const paymentDetails = db.queryOne("SELECT * FROM payment_details LIMIT 1") as {
        id: number;
      } | null;
      
      if (paymentDetails) {
        db.run(
          "UPDATE payment_details SET qr_code_url = ?, updated_at = ? WHERE id = ?",
          [qrCodeUrl, new Date().toISOString(), paymentDetails.id]
        );
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        db.run(`
          INSERT INTO payment_details (
            qr_code_url, card_number, card_holder, bank_name, instructions
          ) VALUES (?, ?, ?, ?, ?)
        `, [
          qrCodeUrl, 
          '', 
          '', 
          '', 
          '–î–ª—è –æ–ø–ª–∞—Ç—ã –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –∏–ª–∏ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É'
        ]);
      }
      
      res.json({ 
        message: "QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω", 
        qrCodeUrl: qrCodeUrl
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ QR-–∫–æ–¥–∞:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ QR-–∫–æ–¥–∞" });
    }
  });
  
  // Telegram settings routes
  app.get("/api/telegram-settings", ensureAdmin, async (req, res) => {
    try {
      const settings = db.queryOne("SELECT * FROM telegram_settings LIMIT 1");
      if (!settings) {
        return res.json({
          botToken: "",
          chatId: "",
          enableNotifications: false
        });
      }
      
      res.json({
        botToken: settings.bot_token || "",
        chatId: settings.chat_id || "",
        enableNotifications: Boolean(settings.enable_notifications)
      });
    } catch (error) {
      console.error("Error fetching telegram settings:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram" });
    }
  });

  app.put("/api/telegram-settings", ensureAdmin, async (req, res) => {
    try {
      const { botToken, chatId, enableNotifications } = req.body;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const existing = db.queryOne("SELECT id FROM telegram_settings LIMIT 1");
      
      if (existing) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        db.run(
          "UPDATE telegram_settings SET bot_token = ?, chat_id = ?, enable_notifications = ?, updated_at = ? WHERE id = ?",
          [botToken || "", chatId || "", enableNotifications ? 1 : 0, new Date().toISOString(), existing.id]
        );
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        db.run(
          "INSERT INTO telegram_settings (bot_token, chat_id, enable_notifications, created_at, updated_at) VALUES (?, ?, ?, ?, ?)",
          [botToken || "", chatId || "", enableNotifications ? 1 : 0, new Date().toISOString(), new Date().toISOString()]
        );
      }
      
      res.json({ message: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã" });
    } catch (error) {
      console.error("Error updating telegram settings:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram" });
    }
  });

  // Test telegram bot connection
  app.post("/api/telegram-test", ensureAdmin, async (req, res) => {
    try {
      const { botToken, chatId } = req.body;
      
      if (!botToken || !chatId) {
        return res.status(400).json({ message: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID —á–∞—Ç–∞" });
      }
      
      const { telegramService } = await import('./telegram');
      const result = await telegramService.testConnection(botToken, chatId);
      
      if (result.success) {
        res.json({ message: result.message });
      } else {
        res.status(500).json({ message: result.message });
      }
    } catch (error) {
      console.error("Error testing telegram bot:", error);
      res.status(500).json({ message: `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞: ${error.message}` });
    }
  });
  
  // –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
  app.get("/api/settings", async (req, res) => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const settings = db.query("SELECT * FROM settings") as Array<{key: string, value: string}>;
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      const settingsObj: Record<string, string> = {};
      settings.forEach(setting => {
        settingsObj[setting.key] = setting.value;
      });
      
      res.json(settingsObj);
    } catch (error) {
      console.error("Error fetching settings:", error);
      res.status(500).json({ message: "Failed to fetch settings" });
    }
  });
  
  // Tawk.to webhook handler
  app.post("/api/tawk-webhook", async (req, res) => {
    try {
      const { event, visitor } = req.body;
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏—è –Ω–∞—á–∞–ª–∞ —á–∞—Ç–∞
      if (event === "chat_started") {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä:
        // - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        // - –û—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        // - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ç.–¥.
        console.log("Chat started with visitor:", visitor);
      }
      
      res.status(200).json({ message: "Webhook received" });
    } catch (error) {
      console.error("Error processing Tawk.to webhook:", error);
      res.status(500).json({ message: "Error processing webhook" });
    }
  });
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  app.put("/api/settings", ensureAdmin, async (req, res) => {
    try {
      const updates = req.body;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
      for (const [key, value] of Object.entries(updates)) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
        const existingSetting = db.queryOne("SELECT * FROM settings WHERE key = ?", [key]);
        
        if (existingSetting) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
          db.run(
            "UPDATE settings SET value = ?, updated_at = ? WHERE key = ?",
            [value, new Date().toISOString(), key]
          );
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
          db.run(
            "INSERT INTO settings (key, value) VALUES (?, ?)",
            [key, value]
          );
        }
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const settings = db.query("SELECT * FROM settings") as Array<{key: string, value: string}>;
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      const settingsObj: Record<string, string> = {};
      settings.forEach(setting => {
        settingsObj[setting.key] = setting.value;
      });
      
      res.json(settingsObj);
    } catch (error) {
      console.error("Error updating settings:", error);
      res.status(500).json({ message: "Failed to update settings" });
    }
  });
  
  // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  app.get('/api/test', (req, res) => {
    res.json({ message: 'SQLite API is working!' });
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç–∑—ã–≤–∞–º–∏
  app.get("/api/reviews", async (req, res) => {
    try {
      const { productId, approved } = req.query;
      
      if (productId) {
        // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞)
        const reviews = db.query(
          "SELECT * FROM reviews WHERE product_id = ? AND is_approved = 1 ORDER BY created_at DESC",
          [productId]
        ) as Array<{
          id: number;
          user_id: string | number;
          product_id: number;
          rating: number;
          text: string;
          is_approved: number;
          created_at: string;
          images: string;
        }>;
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        const formattedReviews = reviews.map(review => ({
          id: review.id,
          userId: review.user_id,
          productId: review.product_id,
          rating: review.rating,
          text: review.text,
          isApproved: !!review.is_approved,
          createdAt: review.created_at,
          images: review.images ? JSON.parse(review.images) : []
        }));
        
        return res.json(formattedReviews);
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)
      const reviews = db.query("SELECT * FROM reviews ORDER BY created_at DESC") as Array<{
        id: number;
        user_id: string | number;
        product_id: number;
        rating: number;
        text: string;
        is_approved: number;
        created_at: string;
        images: string;
      }>;
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
      const formattedReviews = reviews.map(review => ({
        id: review.id,
        userId: review.user_id,
        productId: review.product_id,
        rating: review.rating,
        text: review.text,
        isApproved: !!review.is_approved,
        createdAt: review.created_at,
        images: review.images ? JSON.parse(review.images) : []
      }));
      
      res.json(formattedReviews);
    } catch (error) {
      console.error("Error fetching reviews:", error);
      res.status(500).json({ message: "Failed to fetch reviews" });
    }
  });
  
  // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
  app.delete("/api/reviews/:id", ensureAdmin, async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—Ç–∑—ã–≤
      const review = db.queryOne("SELECT * FROM reviews WHERE id = ?", [id]);
      
      if (!review) {
        return res.status(404).json({ message: "–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      
      // –£–¥–∞–ª—è–µ–º –æ—Ç–∑—ã–≤
      db.run("DELETE FROM reviews WHERE id = ?", [id]);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
      return res.status(200).json({ message: "–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω" });
    } catch (error) {
      console.error("Error deleting review:", error);
      res.status(500).json({ message: "Failed to delete review" });
    }
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞ (admin)
  app.put("/api/reviews/:id", ensureAdmin, async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const { isApproved } = req.body;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—Ç–∑—ã–≤
      const review = db.queryOne("SELECT * FROM reviews WHERE id = ?", [id]) as {
        id: number;
        user_id: string | number;
        product_id: number;
        rating: number;
        text: string;
        is_approved: number;
        created_at: string;
        updated_at?: string;
        images?: string;
      } | null;
      
      if (!review) {
        return res.status(404).json({ message: "–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      
      console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–∑—ã–≤–∞ #${id}: isApproved=${isApproved}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–∑—ã–≤–∞
      db.run(
        "UPDATE reviews SET is_approved = ?, updated_at = ? WHERE id = ?",
        [isApproved ? 1 : 0, new Date().toISOString(), id]
      );
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–∑—ã–≤
      const updatedReview = db.queryOne("SELECT * FROM reviews WHERE id = ?", [id]) as {
        id: number;
        user_id: string | number;
        product_id: number;
        rating: number;
        text: string;
        is_approved: number;
        created_at: string;
        updated_at?: string;
        images?: string;
      };
      
      if (!updatedReview) {
        return res.status(404).json({ message: "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–∑—ã–≤" });
      }
      
      console.log(`–û—Ç–∑—ã–≤ #${id} –æ–±–Ω–æ–≤–ª–µ–Ω. –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ${updatedReview.is_approved === 1 ? '–û–¥–æ–±—Ä–µ–Ω' : '–ù–µ –æ–¥–æ–±—Ä–µ–Ω'}`);
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
      const formattedReview = {
        id: updatedReview.id,
        userId: updatedReview.user_id,
        productId: updatedReview.product_id,
        rating: updatedReview.rating,
        text: updatedReview.text,
        images: updatedReview.images ? JSON.parse(updatedReview.images) : [],
        isApproved: updatedReview.is_approved === 1,
        createdAt: updatedReview.created_at,
        updatedAt: updatedReview.updated_at
      };
      
      res.json({
        message: isApproved ? "–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω" : "–°—Ç–∞—Ç—É—Å –æ—Ç–∑—ã–≤–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω",
        review: formattedReview
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞" });
    }
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞
  app.post("/api/reviews", ensureAuthenticated, async (req, res) => {
    try {
      const { productId, rating, text, images = [] } = req.body;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
      if (!req.user) {
        return res.status(401).json({ message: "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" });
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      if (!productId || !rating || !text) {
        return res.status(400).json({ message: "–ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è" });
      }
      
      // –°–æ–∑–¥–∞–µ–º –æ—Ç–∑—ã–≤
      const result = db.insert(
        `INSERT INTO reviews (
          user_id, product_id, rating, text, images, created_at
        ) VALUES (?, ?, ?, ?, ?, ?)`,
        [
          req.user.id,
          productId,
          rating,
          text,
          JSON.stringify(images || []),
          new Date().toISOString()
        ]
      );
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ—Ç–∑—ã–≤
      const review = db.queryOne(
        "SELECT * FROM reviews WHERE id = ?",
        [result]
      ) as {
        id: number;
        user_id: string | number;
        product_id: number;
        rating: number;
        text: string;
        is_approved: number;
        created_at: string;
        images: string;
      };
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
      const formattedReview = {
        id: review.id,
        userId: review.user_id,
        productId: review.product_id,
        rating: review.rating,
        text: review.text,
        isApproved: !!review.is_approved,
        createdAt: review.created_at,
        images: review.images ? JSON.parse(review.images) : []
      };
      
      res.status(201).json(formattedReview);
    } catch (error) {
      console.error("Error creating review:", error);
      res.status(500).json({ message: "Failed to create review" });
    }
  });

  // User routes
  app.get("/api/users", ensureAdmin, async (req, res) => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
      const users = db.query("SELECT id, username, email, full_name, phone, address, is_admin, balance, created_at FROM users") as Array<UserRecord>;
      
      console.log(`[DEBUG] Fetched ${users.length} users from database.`);
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —É–¥–∞–ª—è–µ–º –ø–∞—Ä–æ–ª–∏ (–ø–∞—Ä–æ–ª–∏ —É–∂–µ –Ω–µ –≤—ã–±–∏—Ä–∞—é—Ç—Å—è)
      const formattedUsers = users.map(user => ({
        id: user.id,
        username: user.username || user.email, // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å username –∏–ª–∏ email –∫–∞–∫ fallback
        email: user.email,
        fullName: user.full_name || '', // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å full_name –Ω–∞–ø—Ä—è–º—É—é
        phone: user.phone || '',
        address: user.address || '',
        isAdmin: !!user.is_admin,
        balance: user.balance || '0',
        createdAt: user.created_at
      }));
      
      res.json(formattedUsers);
    } catch (error) {
      console.error("Error fetching users:", error);
      res.status(500).json({ message: "Failed to fetch users" });
    }
  });

  // –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  app.post("/api/users/:id/add-balance", ensureAdmin, async (req, res) => {
    try {
      const userId = req.params.id;
      const { amount } = req.body;
      
      if (!amount || isNaN(parseFloat(amount)) || parseFloat(amount) <= 0) {
        return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è" });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const user = db.queryOne("SELECT * FROM users WHERE id = ?", [userId]) as UserRecord | null;
      
      if (!user) {
        return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      
      // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
      const currentBalance = user.balance ? parseFloat(user.balance) : 0;
      const newBalance = (currentBalance + parseFloat(amount)).toString();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      db.run(
        "UPDATE users SET balance = ?, updated_at = ? WHERE id = ?",
        [newBalance, new Date().toISOString(), userId]
      );
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const updatedUser = db.queryOne("SELECT * FROM users WHERE id = ?", [userId]) as UserRecord;
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–¥–∞–ª—è–µ–º –ø–∞—Ä–æ–ª—å
      const formattedUser = {
        id: updatedUser.id,
        username: updatedUser.username || updatedUser.email,
        email: updatedUser.email,
        fullName: updatedUser.full_name || '',
        phone: updatedUser.phone || '',
        address: updatedUser.address || '',
        isAdmin: !!updatedUser.is_admin,
        balance: updatedUser.balance || '0',
        createdAt: updatedUser.created_at
      };
      
      res.json(formattedUser);
    } catch (error) {
      console.error("Error adding balance:", error);
      res.status(500).json({ message: "Failed to add balance" });
    }
  });

  // –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ Excel
  app.get("/api/export/statistics", ensureAdmin, async (req, res) => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const users = db.query("SELECT * FROM users") as Array<any>;
      const products = db.query("SELECT * FROM products") as Array<any>;
      const orders = db.query("SELECT * FROM orders") as Array<any>;
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const csvContent = generateStatisticsCSV(users, products, orders);
      
      // –î–æ–±–∞–≤–ª—è–µ–º BOM –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
      const BOM = '\uFEFF';
      const csvContentWithBOM = BOM + csvContent;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º CSV —Ñ–∞–π–ª
      res.setHeader('Content-Type', 'text/csv; charset=utf-8');
      res.setHeader('Content-Disposition', 'attachment; filename="statistics.csv"');
      res.send(csvContentWithBOM);
    } catch (error) {
      console.error("Error exporting statistics:", error);
      res.status(500).json({ message: "Failed to export statistics" });
    }
  });

  // –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Excel
  app.get("/api/export/users", ensureAdmin, async (req, res) => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const users = db.query("SELECT * FROM users") as Array<{
        id: string;
        username: string;
        email: string;
        first_name: string;
        last_name: string;
        phone: string | null;
        address: string | null;
        is_admin: number;
        balance: string | null;
        created_at: string;
      }>;
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const csvContent = generateUsersCSV(users);
      
      // –î–æ–±–∞–≤–ª—è–µ–º BOM –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
      const BOM = '\uFEFF';
      const csvContentWithBOM = BOM + csvContent;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º CSV —Ñ–∞–π–ª
      res.setHeader('Content-Type', 'text/csv; charset=utf-8');
      res.setHeader('Content-Disposition', 'attachment; filename="users.csv"');
      res.send(csvContentWithBOM);
    } catch (error) {
      console.error("Error exporting users:", error);
      res.status(500).json({ message: "Failed to export users" });
    }
  });

  // –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ Excel
  app.get("/api/export/products", ensureAdmin, async (req, res) => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
      const products = db.query("SELECT * FROM products") as Array<{
        id: number;
        name: string;
        description: string;
        price: number;
        original_price: number | null;
        quantity: number;
        category: string;
        is_available: number;
        is_preorder: number;
        is_rare: number;
        is_easy_to_care: number;
        created_at: string;
      }>;
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
      const csvContent = generateProductsCSV(products);
      
      // –î–æ–±–∞–≤–ª—è–µ–º BOM –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
      const BOM = '\uFEFF';
      const csvContentWithBOM = BOM + csvContent;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º CSV —Ñ–∞–π–ª
      res.setHeader('Content-Type', 'text/csv; charset=utf-8');
      res.setHeader('Content-Disposition', 'attachment; filename="products.csv"');
      res.send(csvContentWithBOM);
    } catch (error) {
      console.error("Error exporting products:", error);
      res.status(500).json({ message: "Failed to export products" });
    }
  });

  // –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞–∫–∞–∑–æ–≤ –≤ Excel
  app.get("/api/export/orders", ensureAdmin, async (req, res) => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã
      const orders = db.query("SELECT * FROM orders ORDER BY created_at DESC") as Array<{
        id: number;
        user_id: string;
        items: string;
        total_amount: string;
        delivery_amount: string;
        full_name: string;
        phone: string;
        address: string;
        delivery_type: string;
        payment_method: string;
        payment_status: string;
        order_status: string;
        created_at: string;
      }>;
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
      const csvContent = generateOrdersCSV(orders);
      
      // –î–æ–±–∞–≤–ª—è–µ–º BOM –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
      const BOM = '\uFEFF';
      const csvContentWithBOM = BOM + csvContent;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º CSV —Ñ–∞–π–ª
      res.setHeader('Content-Type', 'text/csv; charset=utf-8');
      res.setHeader('Content-Disposition', 'attachment; filename="orders.csv"');
      res.send(csvContentWithBOM);
    } catch (error) {
      console.error("Error exporting orders:", error);
      res.status(500).json({ message: "Failed to export orders" });
    }
  });

  // Helper function –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
  function formatOrderForClient(order: any) {
    if (!order) return null;
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON —Å—Ç—Ä–æ–∫—É items –≤ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤
    let items;
    try {
      if (typeof order.items === 'string') {
        items = JSON.parse(order.items);
      } else if (Array.isArray(order.items)) {
        items = order.items;
      } else {
        items = [];
      }
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:", e);
      items = [];
    }

    // –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—É —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –¥–æ—Å—Ç–∞–≤–∫–∏
    const itemsTotal = items.reduce((sum: number, item: any) => {
      const price = parseFloat(String(item.price || 0));
      const quantity = parseInt(String(item.quantity || 1));
      return sum + (price * quantity);
    }, 0);

    // –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–∏–¥–∫—É —Ç–æ–ª—å–∫–æ –æ—Ç —Å—É–º–º—ã —Ç–æ–≤–∞—Ä–æ–≤
    let promoCodeDiscount = null;
    if (order.promo_code_discount) {
      const discount = parseFloat(String(order.promo_code_discount));
      // –ï—Å–ª–∏ —Å–∫–∏–¥–∫–∞ –±–æ–ª—å—à–µ —Å—É–º–º—ã —Ç–æ–≤–∞—Ä–æ–≤, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –µ—ë
      promoCodeDiscount = Math.min(discount, itemsTotal);
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    return {
      id: order.id,
      userId: order.user_id || order.userId,
      items: items,
      itemsTotal: itemsTotal.toString(), // –î–æ–±–∞–≤–ª—è–µ–º —Å—É–º–º—É —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –¥–æ—Å—Ç–∞–≤–∫–∏
      totalAmount: order.total_amount,
      deliveryAmount: order.delivery_amount || order.deliveryAmount || "0",
      promoCode: order.promo_code || null,
      promoCodeDiscount: promoCodeDiscount ? promoCodeDiscount.toString() : null,
      fullName: order.full_name || order.fullName || "",
      address: order.address || "",
      phone: order.phone || "",
      socialNetwork: order.social_network || order.socialNetwork || null,
      socialUsername: order.social_username || order.socialUsername || null,
      comment: order.comment || "",
      deliveryType: order.delivery_type || order.deliveryType || "cdek",
      deliverySpeed: order.delivery_speed || order.deliverySpeed || 'standard',
      needInsulation: order.need_insulation === 1 || order.needInsulation === true,
      paymentMethod: order.payment_method || order.paymentMethod || "card",
      paymentStatus: order.payment_status || order.paymentStatus || "pending",
      orderStatus: order.order_status || order.orderStatus || "pending",
      paymentProofUrl: order.payment_proof_url ? 
        (order.payment_proof_url.startsWith('http') ? order.payment_proof_url : `${process.env.PUBLIC_URL || ''}${order.payment_proof_url}`) : 
        null,
      adminComment: order.admin_comment || order.adminComment || "",
      trackingNumber: order.tracking_number || order.trackingNumber || null,
      estimatedDeliveryDate: order.estimated_delivery_date || order.estimatedDeliveryDate || null,
      actualDeliveryDate: order.actual_delivery_date || order.actualDeliveryDate || null,
      lastStatusChangeAt: order.last_status_change_at || order.lastStatusChangeAt || null,
      statusHistory: order.status_history || order.statusHistory || null,
      createdAt: order.created_at || order.createdAt || new Date().toISOString(),
      updatedAt: order.updated_at || order.updatedAt || null
    };
  }

  // –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
  app.post("/api/orders/:id/payment-proof", ensureAuthenticated, upload.single("proof"), async (req, res) => {
    try {
      if (!req.file) {
        console.error("[PAYMENT] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return res.status(400).json({ message: "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      
      const id = parseInt(req.params.id);
      const orderId = id.toString();
      
      console.log(`[PAYMENT] –ó–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ ID=${orderId}, —Ñ–∞–π–ª: ${req.file.filename}`);
      console.log(`[PAYMENT] –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: ${path.resolve(req.file.path)}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
      const order = db.queryOne("SELECT * FROM orders WHERE id = ?", [orderId]);
      if (!order) {
        console.error(`[PAYMENT] –ó–∞–∫–∞–∑ —Å ID=${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return res.status(404).json({ message: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É - —Å–¥–µ–ª–∞–µ–º –µ–≥–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è —Å–∞–π—Ç–∞
      const relativePath = `/uploads/${req.file.filename}`;
      console.log(`[PAYMENT] –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –≤–µ–±-–¥–æ—Å—Ç—É–ø–∞: ${relativePath}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      db.run(
        "UPDATE orders SET payment_proof_url = ?, payment_status = ?, updated_at = ? WHERE id = ?",
        [relativePath, "pending_verification", new Date().toISOString(), orderId]
      );
      
      console.log(`[PAYMENT] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderId}`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –∑–∞–≥—Ä—É–∑–∫–µ —á–µ–∫–∞ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
      try {
        const { telegramService } = await import('./telegram');
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = db.queryOne("SELECT full_name, email FROM users WHERE id = ?", [order.user_id]) as { full_name: string; email: string } | null;
        
        // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const telegramOrderData = {
          id: Number(orderId),
          userId: String(order.user_id),
          userName: user?.full_name || order.full_name,
          userEmail: user?.email || '–ù–µ —É–∫–∞–∑–∞–Ω',
          userPhone: order.phone,
          totalAmount: order.total_amount,
          paymentMethod: "directTransfer",
          deliveryAddress: order.address,
          items: [],
          createdAt: order.created_at
        };
        
        const notificationSent = await telegramService.sendPaymentProofNotification(telegramOrderData);
        if (notificationSent) {
          console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ —á–µ–∫–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
        } else {
          console.log(`üì± –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ —á–µ–∫–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderId}`);
        }
      } catch (error) {
        console.error("Error sending admin notification about payment proof:", error);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —á–µ–∫–∞ –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
      const updatedOrder = db.queryOne("SELECT * FROM orders WHERE id = ?", [orderId]);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞
      return res.status(200).json({
        success: true,
        message: "–ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω",
        order: updatedOrder
      });
    } catch (error) {
      console.error("[PAYMENT] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–∞:", error);
      return res.status(500).json({ 
        success: false,
        message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–µ–∫–∞",
        error: error instanceof Error ? error.message : String(error)
      });
    }
  });

  // –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–∞
  app.post("/api/orders/:id/complete", ensureAuthenticated, async (req, res) => {
    try {
      const orderId = req.params.id;
      
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ –ë–î —Å —è–≤–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
      const order = db.queryOne("SELECT * FROM orders WHERE id = ?", [orderId]) as Record<string, any> | null;
      
      if (!order) {
        return res.status(404).json({ message: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É
      const user = req.user as any;
      if (!user.isAdmin && order.user_id !== user.id && order.user_id !== String(user.id)) {
        return res.status(403).json({ message: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω" });
      }
      
      // –ï—Å–ª–∏ —á–µ–∫ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–∑–∞–≤–µ—Ä—à–µ–Ω"
      if (order.payment_proof_url) {
        db.run(
          `UPDATE orders SET 
           payment_status = ?, 
           order_status = ?, 
           updated_at = ? 
           WHERE id = ?`,
          ["verification", "pending", new Date().toISOString(), orderId]
        );
        
        // Send user notification via Telegram bot about completed order
        try {
          const { sendOrderNotificationToUser } = await import('./telegram-bot-final.cjs');
          
          // Parse items for user notification
          const parsedItems = JSON.parse(order.items);
          const itemsWithDetails = parsedItems.map((item: any) => {
            const product = db.queryOne("SELECT name, price FROM products WHERE id = ?", [item.id]) as { name: string; price: number } | null;
            return {
              name: product?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä',
              quantity: item.quantity,
              price: product?.price || 0
            };
          });
          
          const userOrderData = {
            orderId: String(orderId),
            userName: order.full_name,
            totalAmount: parseFloat(order.total_amount),
            paymentMethod: order.payment_method,
            items: itemsWithDetails,
            orderStatus: "pending",
            paymentStatus: "verification"
          };
          
          const notificationSent = await sendOrderNotificationToUser(order.user_id, userOrderData);
          if (notificationSent) {
            console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ #${orderId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é`);
          } else {
            console.log(`üì± –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ #${orderId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é`);
          }
        } catch (error) {
          console.error("Error sending user completion notification:", error);
          // Don't fail the order completion if notification fails
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
        const updatedOrder = db.queryOne(`SELECT * FROM orders WHERE id = ?`, [orderId]);
        const formattedOrder = formatOrderForClient(updatedOrder);
        
        return res.json({
          success: true,
          message: "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã",
          order: formattedOrder
        });
      } else {
        return res.status(400).json({ message: "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã" });
      }
    } catch (error) {
      console.error("Error completing order:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞" });
    }
  });

  // Type definitions for order creation
  interface CreateOrderRequest {
    userId: number;
    items: Array<{
      id: number;
      quantity: number;
    }>;
    deliveryAmount: number;
    fullName: string;
    address: string;
    phone: string;
    socialNetwork?: string;
    socialUsername?: string;
    comment?: string;
    needInsulation: boolean;
    deliveryType: string;
    deliverySpeed?: string;
    paymentMethod: string;
    paymentProof?: string;
    promoCode?: string;
  }

  // Type definitions for database queries
  interface ProductQuery {
    id: number;
    name: string;
    price: number;
    quantity: number;
    images?: string;
    [key: string]: any;
  }

  interface PromoCodeQuery {
    id: number;
    code: string;
    description: string | null;
    discount_type: 'percentage' | 'fixed';
    discount_value: number;
    min_order_amount: number | null;
    start_date: string;
    end_date: string;
    max_uses: number | null;
    current_uses: number;
    is_active: boolean;
    created_at: string;
    updated_at: string;
  }

  // POST /api/orders - Create new order
  app.post("/api/orders", ensureAuthenticated, async (req, res) => {
    try {
      const user = req.user as Express.User;
      const orderData = req.body as CreateOrderRequest;
      
      console.log("Received order data:", orderData);
      
      // Ensure userId matches authenticated user or admin
      if (String(user.id) !== String(orderData.userId) && !user.isAdmin) {
        return res.status(403).json({ message: "–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –æ—Ç –∏–º–µ–Ω–∏ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
      }
      
      // Validate required fields
      if (!Array.isArray(orderData.items) || orderData.items.length === 0) {
        return res.status(400).json({ message: "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç" });
      }
      
      // –ò–∑–º–µ–Ω–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å 0 –∫–∞–∫ –≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏
      if (orderData.deliveryAmount === undefined || orderData.deliveryAmount === null || typeof orderData.deliveryAmount !== 'number') {
        return res.status(400).json({ message: "–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏" });
      }

      // Validate and calculate items total
      let itemsTotal = 0;
      for (const item of orderData.items) {
        const product = db.queryOne(
          "SELECT * FROM products WHERE id = ?",
          [item.id]
        ) as ProductQuery | null;
        
        if (!product) {
          return res.status(400).json({ 
            message: `–¢–æ–≤–∞—Ä —Å ID ${item.id} –Ω–µ –Ω–∞–π–¥–µ–Ω` 
          });
        }
        
        if (product.quantity < item.quantity) {
          return res.status(400).json({ 
            message: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ \"${product.name}\" –≤ –Ω–∞–ª–∏—á–∏–∏ (–¥–æ—Å—Ç—É–ø–Ω–æ: ${product.quantity})` 
          });
        }

        itemsTotal += product.price * item.quantity;
      }

      // Validate and calculate promo code discount (—Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–æ–≤–∞—Ä—ã, –Ω–µ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É)
      let promoCodeDiscount = 0;
      if (orderData.promoCode) {
        const promoCode = db.queryOne(
          `SELECT * FROM promo_codes 
           WHERE code = ? 
           AND is_active = 1 
           AND (start_date <= datetime('now') AND end_date >= datetime('now'))
           AND (max_uses IS NULL OR current_uses < max_uses)`,
          [orderData.promoCode.toUpperCase()]
        ) as PromoCodeQuery | null;

        if (promoCode) {
          // Check minimum order amount
          if (promoCode.min_order_amount && itemsTotal < promoCode.min_order_amount) {
            return res.status(400).json({ 
              message: `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞: ${promoCode.min_order_amount} ‚ÇΩ` 
            });
          }

          // Calculate discount
          if (promoCode.discount_type === 'percentage') {
            promoCodeDiscount = Math.round(itemsTotal * (promoCode.discount_value / 100));
          } else {
            promoCodeDiscount = promoCode.discount_value;
          }

          // Ensure discount doesn't exceed items total
          promoCodeDiscount = Math.min(promoCodeDiscount, itemsTotal);
        } else {
          return res.status(400).json({ message: "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥" });
        }
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π deliveryAmount
      console.log('Received deliveryAmount:', orderData.deliveryAmount, '–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:', orderData.deliveryType);

      // Calculate final total: (—Ç–æ–≤–∞—Ä—ã - —Å–∫–∏–¥–∫–∞) + –¥–æ—Å—Ç–∞–≤–∫–∞
      const totalAmount = Math.max(0, itemsTotal - promoCodeDiscount) + orderData.deliveryAmount;
      console.log('Calculated totalAmount:', totalAmount);

      // Check balance if payment method is balance
      if (orderData.paymentMethod === "balance") {
        const userBalance = db.queryOne("SELECT balance FROM users WHERE id = ?", [String(orderData.userId)]) as { balance: string } | null;
        
        if (!userBalance) {
          return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        const currentBalance = parseFloat(userBalance.balance || "0");
        
        if (currentBalance < totalAmount) {
          return res.status(400).json({ 
            message: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –¢—Ä–µ–±—É–µ—Ç—Å—è: ${totalAmount} ‚ÇΩ, –¥–æ—Å—Ç—É–ø–Ω–æ: ${currentBalance} ‚ÇΩ` 
          });
        }
      }

      // Prepare order data for saving
      const orderToSave = {
        user_id: orderData.userId,
        // Save full item details including name and price
        items: JSON.stringify(orderData.items.map((item: { id: number, quantity: number }) => {
          const product = db.queryOne("SELECT id, name, price FROM products WHERE id = ?", [item.id]) as ProductQuery | null;
          return {
            id: item.id,
            name: product?.name || "Unknown Product", // Use product name or fallback
            price: product?.price || 0, // Use product price or fallback
            quantity: item.quantity,
          };
        })),
        total_amount: totalAmount,
        delivery_amount: orderData.deliveryAmount,
        full_name: orderData.fullName,
        address: orderData.address,
        phone: orderData.phone,
        social_network: orderData.socialNetwork || null,
        social_username: orderData.socialUsername || null,
        comment: orderData.comment || null,
        need_insulation: orderData.needInsulation ? 1 : 0,
        delivery_type: orderData.deliveryType,
        delivery_speed: orderData.deliverySpeed || null,
        payment_method: orderData.paymentMethod,
        payment_status: orderData.paymentMethod === "balance" ? "completed" : "pending",
        order_status: orderData.paymentMethod === "balance" ? "processing" : "pending",
        payment_proof_url: orderData.paymentProof || null,
        admin_comment: null,
        promo_code: orderData.promoCode || null,
        promo_code_discount: promoCodeDiscount,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };
      
      // Start transaction
      db.exec("BEGIN TRANSACTION");

      try {
        // Save order
      const result = db.run(
        `INSERT INTO orders (
          user_id, items, total_amount, delivery_amount, full_name, 
          address, phone, social_network, social_username, comment,
          need_insulation, delivery_type, delivery_speed,
          payment_method, payment_status, order_status,
          payment_proof_url, admin_comment, promo_code, promo_code_discount,
          created_at, updated_at, last_status_change_at, status_history,
          product_quantities_reduced, tracking_number, estimated_delivery_date,
          actual_delivery_date, ozonpay_payment_id, ozonpay_payment_url,
          ozonpay_payment_status, ozonpay_transaction_id
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          orderToSave.user_id,
          orderToSave.items,
          orderToSave.total_amount,
          orderToSave.delivery_amount,
          orderToSave.full_name,
          orderToSave.address,
          orderToSave.phone,
          orderToSave.social_network,
          orderToSave.social_username,
          orderToSave.comment,
          orderToSave.need_insulation,
          orderToSave.delivery_type,
          orderToSave.delivery_speed,
          orderToSave.payment_method,
          orderToSave.payment_status,
          orderToSave.order_status,
          orderToSave.payment_proof_url,
          orderToSave.admin_comment,
          orderToSave.promo_code,
          orderToSave.promo_code_discount,
          orderToSave.created_at,
          orderToSave.updated_at,
          orderToSave.created_at, // last_status_change_at
          null, // status_history
          0, // product_quantities_reduced (SQLite boolean as integer)
          null, // tracking_number
          null, // estimated_delivery_date
          null, // actual_delivery_date
          null, // ozonpay_payment_id
          null, // ozonpay_payment_url
          null, // ozonpay_payment_status
          null  // ozonpay_transaction_id
        ]
      );
      
      const orderId = result.lastInsertRowid;

        // Update promo code usage if applicable
        if (orderData.promoCode) {
          db.run(
            `UPDATE promo_codes 
             SET current_uses = current_uses + 1 
             WHERE code = ?`,
            [orderData.promoCode.toUpperCase()]
          );

          db.run(
            `INSERT INTO promo_code_uses (promo_code_id, user_id, order_id, discount_amount, used_at)
             SELECT id, ?, ?, ?, datetime('now')
             FROM promo_codes WHERE code = ?`,
            [orderData.userId, orderId, promoCodeDiscount, orderData.promoCode.toUpperCase()]
          );
        }

        // If payment is completed (balance or proof provided), reduce product quantities
        if (orderData.paymentMethod === "balance" || orderData.paymentProof) {
        for (const item of orderData.items) {
            db.run(
              `UPDATE products 
               SET quantity = quantity - ? 
               WHERE id = ?`,
              [item.quantity, item.id]
            );
          }

          // Mark order as having reduced quantities
            db.run(
            `UPDATE orders 
             SET product_quantities_reduced = 1 
             WHERE id = ?`,
            [orderId]
          );
        }

        // If payment method is balance, deduct amount from user balance
        if (orderData.paymentMethod === "balance") {
          console.log(`Processing balance payment for user ${orderData.userId}, total: ${totalAmount}`);
          
          const currentUserBalance = db.queryOne("SELECT balance FROM users WHERE id = ?", [String(orderData.userId)]) as { balance: string } | null;
          
          console.log(`Current user balance query result:`, currentUserBalance);
          
          if (currentUserBalance) {
            const currentBalance = parseFloat(currentUserBalance.balance || "0");
            const newBalance = currentBalance - totalAmount;
            
            console.log(`Updating balance: ${currentBalance} - ${totalAmount} = ${newBalance}`);
            
                         const updateResult = db.run(
               `UPDATE users 
                SET balance = ?, updated_at = datetime('now') 
                WHERE id = ?`,
               [newBalance.toFixed(2), String(orderData.userId)]
             );
            
            console.log(`Balance update result:`, updateResult);
            console.log(`Balance updated for user ${orderData.userId}: ${currentBalance} -> ${newBalance.toFixed(2)}`);
          } else {
            console.error(`No user found with ID ${orderData.userId} for balance deduction`);
          }
        }

        // Commit transaction
        db.exec("COMMIT");

        // Get created order
        const createdOrder = db.queryOne(
          "SELECT * FROM orders WHERE id = ?",
          [orderId]
        ) as Order | null;

        if (!createdOrder) {
          throw new Error("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è");
        }

        const formattedOrder = formatOrderForClient(createdOrder);

        // Send Telegram notification about new order
        try {
          const { telegramService } = await import('./telegram');
          
          // Get user details for notification
          const userRecord = db.queryOne("SELECT email, full_name FROM users WHERE id = ?", [orderData.userId]) as { email: string; full_name: string } | null;
          
          // Parse items for notification
          const parsedItems = JSON.parse(createdOrder.items);
          const itemsWithDetails = parsedItems.map((item: any) => {
            const product = db.queryOne("SELECT name, price FROM products WHERE id = ?", [item.id]) as { name: string; price: number } | null;
            return {
              name: product?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä',
              quantity: item.quantity,
              price: product?.price || 0
            };
          });
          
          const telegramOrderData = {
            id: Number(orderId),
            userId: String(orderData.userId),
            userName: userRecord?.full_name || orderData.fullName,
            userEmail: userRecord?.email || '–ù–µ —É–∫–∞–∑–∞–Ω',
            userPhone: orderData.phone,
            totalAmount: totalAmount,
            paymentMethod: orderData.paymentMethod,
            deliveryAddress: orderData.address,
            items: itemsWithDetails,
            createdAt: createdOrder.created_at
          };
          
          await telegramService.sendOrderNotification(telegramOrderData);
        } catch (error) {
          console.error("Error sending Telegram notification:", error);
          // Don't fail the order creation if Telegram notification fails
        }

        // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ (/complete)
        console.log(`üìã –ó–∞–∫–∞–∑ #${orderId} —Å–æ–∑–¥–∞–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏`);

        // If payment method is ozonpay, create payment
        if (orderData.paymentMethod === "ozonpay") {
          // –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –∏—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ <= 0, –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
          if (totalAmount <= 0) {
            return res.status(400).json({
              ...formattedOrder,
              paymentError: "–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ —Å —É—á—ë—Ç–æ–º —Å–∫–∏–¥–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0 –¥–ª—è –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç—ã."
            });
          }
          try {
            const ozonPayAPI = createOzonPayAPI();
            
            // Get user email for payment
            const userRecord = db.queryOne("SELECT email FROM users WHERE id = ?", [orderData.userId]) as { email: string } | null;
            
            const paymentData = {
              amount: Math.round(totalAmount * 100), // Convert to kopecks
              currency: "RUB",
              orderId: String(orderId),
              description: `–ó–∞–∫–∞–∑ #${orderId} –Ω–∞ —Å–∞–π—Ç–µ Russkii Portal`,
              customerEmail: userRecord?.email,
              customerPhone: orderData.phone
            };

            // Prepare order items for Ozon Pay
            const parsedItems = JSON.parse(createdOrder.items);
            console.log('Parsed order items for OzonPay:', parsedItems);
            
            // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫–∏–¥–∫—É –ø–æ —Ç–æ–≤–∞—Ä–∞–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
            let totalItemsPrice = 0;
            parsedItems.forEach((item: any) => {
              totalItemsPrice += (item.price || 0) * (item.quantity || 1);
            });
            let remainingDiscount = createdOrder.promo_code_discount || 0;
            const discountedOrderItems = parsedItems.map((item: any, index: number) => {
              // –î–æ–±–∞–≤–ª—è–µ–º timestamp –∫ ID —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º Ozon Pay
              const extId = item.id != null ? `FRESH_${Date.now()}_${String(item.id)}` : `item_${Date.now()}_${index}`;
              const itemTotal = (item.price || 0) * (item.quantity || 1);
              // –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞
              let itemDiscount = 0;
              if (index === parsedItems.length - 1) {
                // –ü–æ—Å–ª–µ–¥–Ω–µ–º—É —Ç–æ–≤–∞—Ä—É ‚Äî –æ—Å—Ç–∞—Ç–æ–∫ —Å–∫–∏–¥–∫–∏ (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –∏–∑-–∑–∞ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è)
                itemDiscount = remainingDiscount;
              } else {
                itemDiscount = Math.round((itemTotal / totalItemsPrice) * (createdOrder.promo_code_discount || 0));
                remainingDiscount -= itemDiscount;
              }
              const discountedPrice = Math.max(0, (item.price || 0) - (itemDiscount / (item.quantity || 1)));
              // –î–µ–ª–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º —á—Ç–æ–±—ã Ozon Pay –Ω–µ –º–∞—Ç—á–∏–ª –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É
              const cleanName = `${(item.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä')} [–ó–∞–∫–∞–∑ #${orderId}]`
                .replace(/√ó/g, 'x')
                .replace(/[^\w\s\-\(\)\.#]/g, '')
                .trim();
              return {
                extId,
                name: cleanName,
                price: {
                  currencyCode: "643",
                  value: Math.round(discountedPrice * 100)
                },
                quantity: item.quantity,
                type: "TYPE_PRODUCT",
                unitType: "UNIT_PIECE",
                vat: "VAT_NONE",
                needMark: false
              };
            });
            let orderItems = discountedOrderItems;
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∞–≤–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å –∏ —Å–ø–æ—Å–æ–± –Ω–µ —Å–∞–º–æ–≤—ã–≤–æ–∑
            if (createdOrder.delivery_amount > 0 && createdOrder.delivery_type !== '–°–∞–º–æ–≤—ã–≤–æ–∑') {
              orderItems.push({
                extId: 'delivery-service',
                name: '–î–æ—Å—Ç–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤',
                price: {
                  currencyCode: "643",
                  value: Math.round(createdOrder.delivery_amount * 100)
                },
                quantity: 1,
                type: "TYPE_PRODUCT",
                unitType: "UNIT_PIECE",
                vat: "VAT_NONE",
                needMark: false
              });
            }
            
            // –î–æ—Å—Ç–∞–≤–∫–∞ –í–ö–õ–Æ–ß–ê–ï–¢–°–Ø –≤ –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç—É
            console.log('Final OzonPay order items:', orderItems);
            
            // –°—É–º–º–∞ –¥–ª—è OzonPay = –æ–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –≤–∫–ª—é—á–∞—è –¥–æ—Å—Ç–∞–≤–∫—É
            const paymentAmount = createdOrder.total_amount;
            console.log(`OzonPay payment amount: ${paymentAmount} ‚ÇΩ (–æ–±—â–∞—è —Å—É–º–º–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π ${createdOrder.total_amount} ‚ÇΩ)`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º paymentData —Å –ø–æ–ª–Ω–æ–π —Å—É–º–º–æ–π –≤–∫–ª—é—á–∞—è –¥–æ—Å—Ç–∞–≤–∫—É
            paymentData.amount = Math.round(paymentAmount * 100); // Convert to kopecks, –≤–∫–ª—é—á–∞—è –¥–æ—Å—Ç–∞–≤–∫—É
            paymentData.orderId = String(orderId);
            paymentData.description = `–ó–∞–∫–∞–∑ #${orderId} –Ω–∞ —Å–∞–π—Ç–µ Helen's Jungle (–≤–∫–ª—é—á–∞—è –¥–æ—Å—Ç–∞–≤–∫—É)`;
            paymentData.customerEmail = user.email;
            paymentData.customerPhone = createdOrder.phone;

            const paymentResponse = await ozonPayAPI.createPayment(paymentData, orderItems);
            
            // ‚ö†Ô∏è –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ - —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞!
            if (paymentResponse.status === 'STATUS_PAID') {
              console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: Ozon Pay –≤–µ—Ä–Ω—É–ª STATUS_PAID —Å—Ä–∞–∑—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞!');
              console.error('–≠—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–ª—é—á–∏)');
              
              // –í–º–µ—Å—Ç–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
              res.status(201).json({
                ...formattedOrder,
                paymentError: "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π. –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ. –î–ª—è –æ–ø–ª–∞—Ç—ã –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.",
                code: "PAYMENT_SYSTEM_ERROR"
              });
              return;
            }
            
            // Save payment details to database
            db.run(
              `UPDATE orders SET 
               ozonpay_payment_id = ?,
               ozonpay_payment_url = ?
               WHERE id = ?`,
              [paymentResponse.orderId, paymentResponse.paymentUrl, orderId]
            );

            // Return order with payment URL
            res.status(201).json({
              ...formattedOrder,
              paymentUrl: paymentResponse.paymentUrl,
              paymentId: paymentResponse.orderId
            });
          } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ Ozon Pay:", error);
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Ozon Pay API
            if (error.message === 'OZON_PAY_API_UNAVAILABLE') {
              res.status(201).json({
                ...formattedOrder,
                paymentError: "‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω, –Ω–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                code: "PAYMENT_SERVICE_UNAVAILABLE"
              });
            } else {
            // Return order without payment URL, user can try again later
            res.status(201).json({
              ...formattedOrder,
              paymentError: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            });
            }
          }
        } else {
          res.status(201).json(formattedOrder);
        }
      } catch (error) {
        // Rollback transaction on error
        db.exec("ROLLBACK");
        throw error;
      }
    } catch (error) {
      console.error("Error creating order:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞" });
    }
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)
  app.get("/api/orders", ensureAuthenticated, async (req: Request, res: Response) => {
    try {
      let orders: Record<string, any>[];
      let totalCount: number = 0;

      // TypeScript type assertion for user
      const user = req.user as Express.User;

      // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
      const page = Math.max(1, parseInt(req.query.page as string) || 1);
      const limit = Math.max(1, Math.min(100, parseInt(req.query.limit as string) || 50)); // –ú–∞–∫—Å–∏–º—É–º 100 –∑–∞ —Ä–∞–∑
      const offset = (page - 1) * limit;

      // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
      const statusFilter = req.query.status as string;
      const searchQuery = req.query.search as string;

      if (user.isAdmin) {
        // Build WHERE clause for admin
        let whereClause = "";
        let params: any[] = [];

        if (statusFilter) {
          whereClause += " WHERE order_status = ?";
          params.push(statusFilter);
        }

        if (searchQuery) {
          const searchCondition = whereClause ? " AND " : " WHERE ";
          whereClause += searchCondition + "(CAST(id AS TEXT) LIKE ? OR full_name LIKE ? OR phone LIKE ? OR address LIKE ?)";
          const searchPattern = `%${searchQuery}%`;
          params.push(searchPattern, searchPattern, searchPattern, searchPattern);
        }

        // Get total count for pagination
        const countQuery = `SELECT COUNT(*) as total FROM orders${whereClause}`;
        const countResult = db.queryOne(countQuery, params) as { total: number };
        totalCount = countResult.total;

        // Get paginated orders
        const ordersQuery = `SELECT * FROM orders${whereClause} ORDER BY created_at DESC LIMIT ? OFFSET ?`;
        orders = db.query(ordersQuery, [...params, limit, offset]) as Record<string, any>[];
      } else {
        // For regular users - get their orders only
        let whereClause = "WHERE user_id = ?";
        let params: any[] = [user.id];

        if (statusFilter) {
          whereClause += " AND order_status = ?";
          params.push(statusFilter);
        }

        if (searchQuery) {
          whereClause += " AND (CAST(id AS TEXT) LIKE ? OR full_name LIKE ? OR phone LIKE ? OR address LIKE ?)";
          const searchPattern = `%${searchQuery}%`;
          params.push(searchPattern, searchPattern, searchPattern, searchPattern);
        }

        // Get total count for pagination
        const countQuery = `SELECT COUNT(*) as total FROM orders ${whereClause}`;
        const countResult = db.queryOne(countQuery, params) as { total: number };
        totalCount = countResult.total;

        // Get paginated orders
        const ordersQuery = `SELECT * FROM orders ${whereClause} ORDER BY created_at DESC LIMIT ? OFFSET ?`;
        orders = db.query(ordersQuery, [...params, limit, offset]) as Record<string, any>[];
      }

      // Enrich orders with product information and format for client
      const formattedOrders = await Promise.all(orders.map(async (order) => {
        try {
          // Use formatOrderForClient to handle initial formatting and JSON parsing
          const formatted = formatOrderForClient(order);

          // If formatting failed, return the basic order
          if (!formatted) {
            return order; // Or handle appropriately, e.g., return null or error indicator
          }

          // Enrich items within the formatted order if needed
          const items = formatted.items || [];

          const enrichedItems = await Promise.all(items.map(async (item: any) => {
            // Check if product details are already present (added by formatOrderForClient)
            if (!item.productName || !item.productImage || item.price === undefined) {
               const product = db.queryOne("SELECT id, name, images, price FROM products WHERE id = ?", [item.id]) as {
                id: number;
                name: string;
                images: string;
                price: number;
                [key: string]: any;
              } | null;

              if (product) {
                const productImages = product.images ? JSON.parse(product.images) : [];
                const imageUrl = productImages && productImages.length > 0 ? productImages[0] : null;

                return {
                  ...item,
                  productName: item.productName || product.name, // Use existing or product name
                  productImage: item.productImage || imageUrl, // Use existing or product image
                  price: item.price !== undefined ? item.price : product.price // Use item price if defined, otherwise product price
                };
              }
            }
            return item; // Return item as is if product not found or already enriched
          }));

          return {
            ...formatted,
            items: enrichedItems // Use enriched items in the final formatted object
          };

        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞ #${order.id} –¥–ª—è —Å–ø–∏—Å–∫–∞:`, error);
          return formatOrderForClient(order); // Return basic formatted order on error
        }
      }));

      // Return orders with pagination info
      res.json({
        orders: formattedOrders,
        pagination: {
          page,
          limit,
          total: totalCount,
          totalPages: Math.ceil(totalCount / limit),
          hasNext: page < Math.ceil(totalCount / limit),
          hasPrev: page > 1
        }
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤" });
    }
  });
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
  app.get("/api/orders/:id", ensureAuthenticated, async (req, res) => {
    try {
      const orderId = req.params.id;
      
      // TypeScript type assertion for user
      const user = req.user as Express.User;
      
      let order: Record<string, any> | null;
      
      if (user.isAdmin) {
        // Admin can view any order
        order = db.queryOne("SELECT * FROM orders WHERE id = ?", [orderId]) as Record<string, any> | null;
      } else {
        // Users can only view their own orders
        order = db.queryOne("SELECT * FROM orders WHERE id = ? AND user_id = ?", [orderId, user.id]) as Record<string, any> | null;
      }
      
      if (!order) {
        return res.status(404).json({ message: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      
      console.log(`[DEBUG] GET /api/orders/${orderId} - Order fetched from DB:`, order);

      // Parse and enrich items
      try {
        const items = JSON.parse(order.items || "[]");
        
        // Enrich each item with product details
        const enrichedItems = await Promise.all(items.map(async (item: any) => {
          // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
          const product = db.queryOne("SELECT * FROM products WHERE id = ?", [item.id]) as {
            id: number;
            name: string;
            images: string;
            price: number;
            [key: string]: any;
          } | null;
          
          if (product) {
            const productImages = product.images ? JSON.parse(product.images) : [];
            const imageUrl = productImages && productImages.length > 0 ? productImages[0] : null;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –≤ –∑–∞–∫–∞–∑–µ
            return {
              ...item,
              productName: product.name,
              productImage: imageUrl,
              price: item.price || product.price
            };
          }
          return item;
        }));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º items –≤ –∑–∞–∫–∞–∑–µ
        order.items = enrichedItems;
      } catch (error) {
        console.error(`Error processing order ${order.id} items:`, error);
      }

      console.log(`[DEBUG] GET /api/orders/${orderId} - Returning order data:`, order);

      res.json(order);
    } catch (error) {
      console.error("Error fetching order:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞" });
    }
  });

  // –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
  app.put("/api/orders/:id", ensureAuthenticated, ensureAdmin, async (req, res) => {
    try {
      const orderId = req.params.id;
      const { orderStatus, adminComment, trackingNumber, estimatedDeliveryDate } = req.body;
      
      console.log(`[ORDERS] –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #${orderId}:`, req.body);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑
      const orderQuery = "SELECT * FROM orders WHERE id = ?";
      const currentOrder = db.queryOne(orderQuery, [orderId]) as Record<string, any>;
      
      if (!currentOrder) {
        return res.status(404).json({ message: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      
      const prevStatus = currentOrder.order_status || 'unknown';
      console.log(`[ORDERS] –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #${orderId}: ${prevStatus}`);
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
      const updateData: Record<string, any> = {};
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω
      if (orderStatus) {
        updateData.order_status = orderStatus;
        console.log(`[ORDERS] –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: ${orderStatus}`);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω
      if (adminComment !== undefined) {
        updateData.admin_comment = adminComment;
        console.log(`[ORDERS] –û–±–Ω–æ–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∞`);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω
      if (trackingNumber !== undefined) {
        updateData.tracking_number = trackingNumber;
        console.log(`[ORDERS] –û–±–Ω–æ–≤–ª–µ–Ω —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä: ${trackingNumber}`);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ –µ—Å–ª–∏ –æ–Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞
      if (estimatedDeliveryDate !== undefined) {
        updateData.estimated_delivery_date = estimatedDeliveryDate;
        console.log(`[ORDERS] –û–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: ${estimatedDeliveryDate}`);
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      updateData.updated_at = new Date().toISOString();
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º SQL –∑–∞–ø—Ä–æ—Å –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      const fields = Object.keys(updateData).map(key => `${key} = ?`).join(", ");
      const values = Object.values(updateData);
      values.push(orderId); // –î–æ–±–∞–≤–ª—è–µ–º ID –¥–ª—è WHERE
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      db.run(`UPDATE orders SET ${fields} WHERE id = ?`, values);
      
      // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å—Ç–∞—Ç—É—Å "–æ–ø–ª–∞—á–µ–Ω" –∏–ª–∏ "–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ", —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
      if (orderStatus && 
          (orderStatus === "paid" || orderStatus === "processing") &&
          prevStatus !== "paid" && 
          prevStatus !== "processing") {
        
        console.log(`[ORDERS] –ó–∞–∫–∞–∑ #${orderId} –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å—Ç–∞—Ç—É—Å ${orderStatus}, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤`);
        
        try {
          // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∑–∞–∫–∞–∑–∞
          let items = [];
          
          try {
            // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ JSON
            const itemsData = String(currentOrder?.items || "[]").trim();
            
            if (itemsData) {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —É–∂–µ –º–∞—Å—Å–∏–≤–æ–º (–Ω–µ —Å—Ç—Ä–æ–∫–æ–π JSON)
              if (Array.isArray(currentOrder?.items)) {
                console.log(`[ORDERS] –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ —É–∂–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º`);
                items = currentOrder.items;
              } else {
                // –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
                try {
                  items = JSON.parse(itemsData);
                  
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –º–∞—Å—Å–∏–≤
                  if (!Array.isArray(items)) {
                    console.error(`[ORDERS] –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:`, items);
                    items = [];
                  }
                } catch (parseError) {
                  console.error(`[ORDERS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç–æ–≤–∞—Ä–æ–≤:`, parseError, "–î–∞–Ω–Ω—ã–µ:", itemsData);
                  
                  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π –¥–≤–æ–π–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è JSON
                  if (itemsData.startsWith('"[') && itemsData.endsWith(']"')) {
                    try {
                      const unescaped = JSON.parse(itemsData);
                      items = JSON.parse(unescaped);
                      console.log(`[ORDERS] –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω—ã –≤–ª–æ–∂–µ–Ω–Ω—ã–µ JSON-–¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤`);
                    } catch (nestedError) {
                      console.error(`[ORDERS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ JSON:`, nestedError);
                      items = [];
                    }
                  } else {
                    items = [];
                  }
                }
              }
            }
            
            console.log(`[ORDERS] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤:`, items.length > 0 ? `${items.length} –ø–æ–∑–∏—Ü–∏–π` : "–Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤");
          } catch (error) {
            console.error(`[ORDERS] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–≤–∞—Ä–æ–≤:`, error);
            items = [];
          }
          
          // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
          if (items.length > 0) {
            updateProductQuantities(orderId, items);
          } else {
            console.warn(`[ORDERS] –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –≤ –∑–∞–∫–∞–∑–µ #${orderId}`);
          }
        } catch (error) {
          console.error(`[ORDERS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:`, error);
        }
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
      const updatedOrder = db.queryOne("SELECT * FROM orders WHERE id = ?", [orderId]);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
      return res.status(200).json({
        success: true,
        message: "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω",
        order: updatedOrder
      });
    } catch (error) {
      console.error(`[ORDERS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:`, error);
      return res.status(500).json({ 
        success: false,
        message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞",
        error: error instanceof Error ? error.message : String(error)
      });
    }
  });

  // –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
  app.delete("/api/orders/:id", ensureAuthenticated, ensureAdmin, async (req: Request, res: Response): Promise<void> => {
    try {
      const orderId = req.params.id;
      
      // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      db.exec("BEGIN TRANSACTION");
      
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–∫–∞–∑–∞
        const orderResult = db.queryOne("SELECT * FROM orders WHERE id = ?", [orderId]) as Order | null;
        if (!orderResult) {
          db.exec("ROLLBACK");
          res.status(404).json({ message: `–ó–∞–∫–∞–∑ #${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω` });
          return;
        }

        const order = orderResult as Order;

        // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥, —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
        if (order.promo_code) {
          db.run(
            "DELETE FROM promo_code_uses WHERE order_id = ?",
            [orderId]
          );
          
          // –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞
          db.run(
            "UPDATE promo_codes SET current_uses = current_uses - 1 WHERE code = ?",
            [order.promo_code]
          );
        }

        // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä—ã –±—ã–ª–∏ —Å–ø–∏—Å–∞–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        if (order.product_quantities_reduced) {
          try {
            const items = JSON.parse(order.items || "[]");
            for (const item of items) {
              if (item.id && item.quantity) {
                db.run(
                  "UPDATE products SET quantity = quantity + ? WHERE id = ?",
                  [item.quantity, item.id]
                );
              }
            }
          } catch (parseError) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ —Ç–æ–≤–∞—Ä–æ–≤:", parseError);
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤
          }
        }

        // –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑
        db.run("DELETE FROM orders WHERE id = ?", [orderId]);
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        db.exec("COMMIT");
        
        console.log(`–ó–∞–∫–∞–∑ #${orderId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`);
        res.json({ success: true, message: `–ó–∞–∫–∞–∑ #${orderId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω` });
      } catch (transactionError) {
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        db.exec("ROLLBACK");
        throw transactionError;
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:", error);
      res.status(500).json({ 
        success: false,
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞",
        error: error instanceof Error ? error.message : String(error)
      });
    }
  });

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  app.put("/api/users/:id", ensureAuthenticated, async (req, res) => {
    try {
      const userId = req.params.id;
      const user = req.user as Express.User;
      
      console.log(`[DEBUG] PUT /api/users/${userId} - Incoming body:`, req.body);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞: —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –∏–ª–∏ —Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
      const isOwnProfile = String(user.id) === String(userId);
      if (!isOwnProfile && !user.isAdmin) {
        return res.status(403).json({ message: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω" });
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const existingUser = db.queryOne("SELECT * FROM users WHERE id = ?", [userId]) as UserRecord | null;
      if (!existingUser) {
        return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const updateFields = [];
      const updateValues = [];
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è
      if (req.body.email && req.body.email !== existingUser.email) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å email
        const emailExists = db.queryOne("SELECT * FROM users WHERE email = ? AND id != ?", [
          req.body.email.toLowerCase(), userId
        ]);
        
        if (emailExists) {
          return res.status(400).json({ message: "Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º" });
        }
        
        updateFields.push("email = ?");
        updateValues.push(req.body.email.toLowerCase());
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –ø–æ–ª—è, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –ø—É—Å—Ç—ã–µ
      updateFields.push("full_name = ?");
      updateValues.push(req.body.fullName || '');
      
      updateFields.push("phone = ?");
      updateValues.push(req.body.phone || '');
      
      updateFields.push("address = ?");
      updateValues.push(req.body.address || '');
      
      updateFields.push("username = ?");
      updateValues.push(req.body.username || req.body.email || existingUser.email);
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—è is_admin (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
      if (user.isAdmin && req.body.isAdmin !== undefined) {
        updateFields.push("is_admin = ?");
        updateValues.push(req.body.isAdmin ? 1 : 0);
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã
      updateFields.push("updated_at = ?");
      updateValues.push(new Date().toISOString());
      
      // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è WHERE
      updateValues.push(userId);
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      const updateQuery = `UPDATE users SET ${updateFields.join(", ")} WHERE id = ?`;
      console.log("[DEBUG] PUT /api/users/:id - Update query:", updateQuery);
      console.log("[DEBUG] PUT /api/users/:id - Update values:", updateValues);
      
      const updateResult = db.run(updateQuery, updateValues);
      console.log("[DEBUG] PUT /api/users/:id - Update result:", updateResult);
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const updatedUser = db.queryOne("SELECT * FROM users WHERE id = ?", [userId]) as UserRecord;
      
      if (!updatedUser) {
        return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è" });
      }
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∏ —Å–µ—Å—Å–∏–∏
      const formattedUser = userRecordToSessionUser(updatedUser);
      
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª—è–ª —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏
      if (isOwnProfile) {
        // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏–∏
        Object.assign(user, formattedUser);
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
        req.session.save((err) => {
          if (err) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏:", err);
          } else {
            console.log("–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", user.email);
          }
        });
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      res.json({
        id: formattedUser.id,
        email: formattedUser.email,
        username: formattedUser.username,
        fullName: formattedUser.fullName,
        phone: formattedUser.phone,
        address: formattedUser.address,
        isAdmin: formattedUser.isAdmin,
        balance: formattedUser.balance
      });
      
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è" });
    }
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∑–∞–∫–∞–∑–∞
  async function updateProductQuantities(orderId: string, items: any[]): Promise<boolean> {
    console.log(`[ORDERS] –°–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderId}`);
    
    if (!orderId) {
      console.error(`[ORDERS] –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω ID –∑–∞–∫–∞–∑–∞ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤`);
      return false;
    }
    
    if (!Array.isArray(items) || items.length === 0) {
      console.log(`[ORDERS] –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –≤ –∑–∞–∫–∞–∑–µ #${orderId}`);
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ product_quantities_reduced
    try {
      const tableInfo = db.query("PRAGMA table_info(orders)");
      const hasColumn = tableInfo.some((col: any) => col.name === 'product_quantities_reduced');
      
      if (!hasColumn) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        console.log(`[ORDERS] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ product_quantities_reduced –≤ —Ç–∞–±–ª–∏—Ü—É orders`);
        try {
          db.exec("ALTER TABLE orders ADD COLUMN product_quantities_reduced INTEGER DEFAULT 0");
        } catch (e) {
          console.error(`[ORDERS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏:`, e);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É
        }
      }
    } catch (schemaError) {
      console.error(`[ORDERS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ö–µ–º—ã:`, schemaError);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ø–∏—Å–∞–Ω—ã –ª–∏ —É–∂–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
    try {
      const orderRecord = db.queryOne(
        "SELECT * FROM orders WHERE id = ?", 
        [orderId]
      ) as Order | null;
      
      if (orderRecord && 
          typeof orderRecord === 'object' && 
          'product_quantities_reduced' in orderRecord && 
          orderRecord.product_quantities_reduced === true) {
        console.log(`[ORDERS] –¢–æ–≤–∞—Ä—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderId} —É–∂–µ –±—ã–ª–∏ —Å–ø–∏—Å–∞–Ω—ã —Ä–∞–Ω–µ–µ`);
        return true; // –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º, —Ç–∞–∫ –∫–∞–∫ —Ç–æ–≤–∞—Ä—ã —É–∂–µ —Å–ø–∏—Å–∞–Ω—ã
      }
    } catch (checkError) {
      console.error(`[ORDERS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–ø–∏—Å–∞–Ω–∏—è:`, checkError);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ –ª—É—á—à–µ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è —Å–ø–∏—Å–∞—Ç—å —Ç–æ–≤–∞—Ä—ã, —á–µ–º –Ω–µ —Å–ø–∏—Å–∞—Ç—å
    }
    
    console.log(`[ORDERS] –ù–∞—á–∏–Ω–∞–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ ${items.length} —Ç–æ–≤–∞—Ä–æ–≤`);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –≤ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    try {
      // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      db.exec("BEGIN TRANSACTION");
      let success = true;
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
      for (const item of items) {
        try {
          if (!item || typeof item !== 'object') {
            console.warn(`[ORDERS] –ü—Ä–æ–ø—É—Å–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:`, item);
            continue;
          }
          
          // –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞
          const productId = item.id ? String(item.id) : null;
          if (!productId) {
            console.warn(`[ORDERS] –¢–æ–≤–∞—Ä –±–µ–∑ ID:`, item);
            continue;
          }
          
          // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
          let quantity = 0;
          try {
            quantity = parseInt(String(item.quantity || 0));
            if (isNaN(quantity) || quantity <= 0) {
              console.warn(`[ORDERS] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:`, item);
              continue;
            }
          } catch (quantityError) {
            console.error(`[ORDERS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:`, quantityError);
            continue;
          }
          
          // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–≤–∞—Ä
          const product = db.queryOne(
            "SELECT * FROM products WHERE id = ?", 
            [productId]
          ) as Product | null;
          
          if (!product) {
            console.warn(`[ORDERS] –¢–æ–≤–∞—Ä —Å ID=${productId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ`);
            continue;
          }
          
          // –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
          let currentQuantity = 0;
          try {
            currentQuantity = parseInt(String(product.quantity || 0));
            if (isNaN(currentQuantity)) currentQuantity = 0;
          } catch (parseError) {
            console.error(`[ORDERS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:`, parseError);
            currentQuantity = 0;
          }
          
          // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–µ –º–µ–Ω—å—à–µ –Ω—É–ª—è)
          const newQuantity = Math.max(0, currentQuantity - quantity);
          console.log(`[ORDERS] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ "${product.name}" (ID=${productId}): ${currentQuantity} ‚Üí ${newQuantity}`);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
          try {
            const updateResult = db.run(
              "UPDATE products SET quantity = ? WHERE id = ?",
              [newQuantity, productId]
            );
            
            if (!updateResult || updateResult.changes === 0) {
              console.error(`[ORDERS] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ ID=${productId}`);
              success = false;
            }
          } catch (updateError) {
            console.error(`[ORDERS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:`, updateError);
            success = false;
          }
        } catch (itemError) {
          console.error(`[ORDERS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–≤–∞—Ä–∞:`, itemError);
          success = false;
        }
      }
      
      // –ï—Å–ª–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ, –ø–æ–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑
      if (success) {
        try {
          // –ü–æ–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
          const markResult = db.run(
            "UPDATE orders SET product_quantities_reduced = 1 WHERE id = ?",
            [orderId]
          );
          
          if (!markResult || markResult.changes === 0) {
            console.warn(`[ORDERS] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–º–µ—Ç–∏—Ç—å –∑–∞–∫–∞–∑ #${orderId} –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π`);
          }
          
          // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
          db.exec("COMMIT");
          console.log(`[ORDERS] –¢–æ–≤–∞—Ä—ã —É—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderId}`);
          return true;
        } catch (markError) {
          console.error(`[ORDERS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:`, markError);
          db.exec("ROLLBACK");
          return false;
        }
      } else {
        // –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        console.error(`[ORDERS] –û—à–∏–±–∫–∏ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤, –æ—Ç–º–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏`);
        db.exec("ROLLBACK");
        return false;
      }
    } catch (transactionError) {
      console.error(`[ORDERS] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:`, transactionError);
      try {
        db.exec("ROLLBACK");
      } catch (rollbackError) {
        console.error(`[ORDERS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:`, rollbackError);
      }
      return false;
    }
  }

  // –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
  app.put("/api/orders/:id/status", ensureAuthenticated, ensureAdmin, async (req, res) => {
    try {
      const orderId = req.params.id;
      const { orderStatus } = req.body;
      
      if (!orderStatus) {
        return res.status(400).json({ message: "–ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞" });
      }
      
      console.log(`[ORDERS] –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #${orderId} –Ω–∞ ${orderStatus}`);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑
      const currentOrder = db.queryOne(
        "SELECT * FROM orders WHERE id = ?",
        [orderId]
      ) as Record<string, any> | null;
      
      if (!currentOrder) {
        console.error(`[ORDERS] –ó–∞–∫–∞–∑ #${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return res.status(404).json({ message: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å
      const previousStatus = currentOrder.order_status || "pending";
      
      console.log(`[ORDERS] –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #${orderId}: ${previousStatus} -> ${orderStatus}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è "paid", –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–∫–∂–µ payment_status
      if (orderStatus === "paid") {
        db.run(
          "UPDATE orders SET order_status = ?, payment_status = ?, updated_at = ? WHERE id = ?",
          [orderStatus, "paid", new Date().toISOString(), orderId]
        );
      } else {
        db.run(
          "UPDATE orders SET order_status = ?, updated_at = ? WHERE id = ?",
          [orderStatus, new Date().toISOString(), orderId]
        );
      }
      
      // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å—Ç–∞—Ç—É—Å "–æ–ø–ª–∞—á–µ–Ω" –∏–ª–∏ "–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ", —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
      if ((orderStatus === "paid" || orderStatus === "processing") &&
          (previousStatus !== "paid" && previousStatus !== "processing")) {
        
        console.log(`[ORDERS] –ó–∞–∫–∞–∑ #${orderId} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å ${orderStatus}, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤`);
        
        try {
          // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∑–∞–∫–∞–∑–∞
          let items: any[] = [];
          
          try {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ items
            if (typeof currentOrder.items === 'string') {
              // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ JSON
              const itemsText = String(currentOrder.items || "[]").trim();
              
              if (itemsText) {
                if (itemsText.startsWith('[') && itemsText.endsWith(']')) {
                  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π JSON –º–∞—Å—Å–∏–≤
                  items = JSON.parse(itemsText);
                } else if (itemsText.startsWith('"[') && itemsText.endsWith(']"')) {
                  // –°–ª—É—á–∞–π –¥–≤–æ–π–Ω–æ–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                  const unescaped = JSON.parse(itemsText);
                  items = JSON.parse(unescaped);
                } else {
                  console.error(`[ORDERS] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç items: ${itemsText.substring(0, 50)}...`);
                }
              }
            } else if (Array.isArray(currentOrder.items)) {
              // –ï—Å–ª–∏ items —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
              items = currentOrder.items;
            }
          } catch (parseError) {
            console.error(`[ORDERS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç–æ–≤–∞—Ä–æ–≤:`, parseError);
            
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Å –æ–¥–Ω–∏–º —Ç–æ–≤–∞—Ä–æ–º
            if (currentOrder.total_amount) {
              items = [{
                id: 0, // –§–∏–∫—Ç–∏–≤–Ω—ã–π ID
                quantity: 1,
                price: currentOrder.total_amount
              }];
              console.log(`[ORDERS] –°–æ–∑–¥–∞–Ω –∑–∞–ø–∞—Å–Ω–æ–π —ç–ª–µ–º–µ–Ω—Ç –∑–∞–∫–∞–∑–∞ –Ω–∞ —Å—É–º–º—É ${currentOrder.total_amount}`);
            }
          }
          
          if (items.length === 0) {
            console.log(`[ORDERS] –ó–∞–∫–∞–∑ #${orderId} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è`);
          } else {
            // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
            const success = await updateProductQuantities(orderId, items);
            
            if (success) {
              console.log(`[ORDERS] –¢–æ–≤–∞—Ä—ã —É—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderId}`);
            } else {
              console.error(`[ORDERS] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderId}`);
            }
          }
        } catch (productError) {
          console.error(`[ORDERS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:`, productError);
          // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–ø–∏—Å–∞–Ω–∏—è
        }
      } else {
        console.log(`[ORDERS] –ó–∞–∫–∞–∑ #${orderId} –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Å–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ ${previousStatus} -> ${orderStatus}`);
      }
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
      const updatedOrder = db.queryOne("SELECT * FROM orders WHERE id = ?", [orderId]);
      
      // Send Telegram notification about status change
      try {
        const { telegramService } = await import('./telegram');
        
        // Get user details for notification
        const userRecord = db.queryOne("SELECT email, full_name FROM users WHERE id = ?", [currentOrder.user_id]) as { email: string; full_name: string } | null;
        
        // Parse items for notification
        const parsedItems = JSON.parse(currentOrder.items);
        const itemsWithDetails = parsedItems.map((item: any) => {
          const product = db.queryOne("SELECT name, price FROM products WHERE id = ?", [item.id]) as { name: string; price: number } | null;
          return {
            name: product?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä',
            quantity: item.quantity,
            price: product?.price || 0
          };
        });
        
        const telegramOrderData = {
          id: Number(orderId),
          userId: String(currentOrder.user_id),
          userName: userRecord?.full_name || currentOrder.full_name,
          userEmail: userRecord?.email || '–ù–µ —É–∫–∞–∑–∞–Ω',
          userPhone: currentOrder.phone,
          totalAmount: currentOrder.total_amount,
          paymentMethod: currentOrder.payment_method,
          deliveryAddress: currentOrder.address,
          items: itemsWithDetails,
          createdAt: currentOrder.created_at
        };
        
        // Send notification for payment status changes
        if (orderStatus === "paid" || orderStatus === "processing") {
          await telegramService.sendPaymentNotification(telegramOrderData, "paid");
        }
      } catch (error) {
        console.error("Error sending Telegram notification:", error);
        // Don't fail the status update if Telegram notification fails
      }

      // Send user notification via Telegram bot about status change
      try {
        const { sendOrderStatusUpdateToUser } = await import('./telegram-bot-final.cjs');
        
        // Parse items for user notification
        const parsedItems = JSON.parse(currentOrder.items || "[]");
        const itemsWithDetails = parsedItems.map((item: any) => {
          const product = db.queryOne("SELECT name, price FROM products WHERE id = ?", [item.id]) as { name: string; price: number } | null;
          return {
            name: product?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä',
            quantity: item.quantity,
            price: product?.price || 0
          };
        });
        
        const userOrderData = {
          orderId: String(orderId),
          userName: currentOrder.full_name,
          totalAmount: currentOrder.total_amount,
          paymentMethod: currentOrder.payment_method,
          items: itemsWithDetails,
          status: orderStatus,
          paymentStatus: currentOrder.payment_status
        };
        
        const notificationSent = await sendOrderStatusUpdateToUser(currentOrder.user_id, userOrderData);
        if (notificationSent) {
          console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #${orderId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é`);
        } else {
          console.log(`üì± –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #${orderId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é`);
        }
      } catch (error) {
        console.error("Error sending user status update notification:", error);
        // Don't fail the status update if user notification fails
      }
      
      return res.json({ 
        success: true, 
        message: "–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω", 
        order: formatOrderForClient(updatedOrder) 
      });
      
    } catch (error) {
      console.error(`[ORDERS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:`, error);
      res.status(500).json({
        success: false,
        message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞",
        error: error instanceof Error ? error.message : String(error)
      });
    }
  });

  // –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  app.get("/api/user/orders", ensureAuthenticated, async (req, res) => {
    try {
      const user = req.user as any;
      
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
      const orders = db.query(
        "SELECT * FROM orders WHERE user_id = ? ORDER BY created_at DESC", 
        [user.id]
      ) as Array<Record<string, any>>;
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
      const formattedOrders = orders.map(order => formatOrderForClient(order));
      
      res.json(formattedOrders);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      res.status(500).json({ 
        message: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        error: error instanceof Error ? error.message : String(error)
      });
    }
  });
  
  // –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  app.get("/api/user/reviews", ensureAuthenticated, async (req, res) => {
    try {
      const user = req.user as any;
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
      const reviews = db.query(
        "SELECT * FROM reviews WHERE user_id = ? ORDER BY created_at DESC", 
        [user.id]
      ) as Array<Record<string, any>>;
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤—ã
      const formattedReviews = reviews.map(review => ({
        id: review.id,
        userId: review.user_id,
        productId: review.product_id,
        rating: review.rating,
        text: review.text,
        images: review.images ? JSON.parse(review.images) : [],
        isApproved: review.is_approved === 1,
        createdAt: review.created_at,
      }));
      
      res.json(formattedReviews);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      res.status(500).json({
        message: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 
        error: error instanceof Error ? error.message : String(error)
      });
    }
  });
  
  // –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  app.get("/api/user/notifications", ensureAuthenticated, async (req, res) => {
    try {
      const user = req.user as any;
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
      const notifications = db.query(
        "SELECT n.*, p.name as product_name, p.image_url FROM notifications n LEFT JOIN products p ON n.product_id = p.id WHERE n.user_id = ? ORDER BY n.created_at DESC", 
        [user.id]
      ) as Array<Record<string, any>>;
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const formattedNotifications = notifications.map(notification => ({
        id: notification.id,
        userId: notification.user_id,
        productId: notification.product_id,
        type: notification.type,
        seen: notification.seen === 1,
        product: notification.product_name ? {
          id: notification.product_id,
          name: notification.product_name,
          imageUrl: notification.image_url
        } : null,
        createdAt: notification.created_at,
      }));
      
      res.json(formattedNotifications);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      res.status(500).json({ 
        message: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        error: error instanceof Error ? error.message : String(error)
      });
    }
  });

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Ç–æ–ª—å–∫–æ –≤ pending_registrations
  // –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ auth-sqlite.ts –¥–ª—è –µ–¥–∏–Ω–æ–π –ª–æ–≥–∏–∫–∏

  // ENDPOINT –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
  app.post("/api/auth/register", async (req, res) => {
    try {
      const { email, password, firstName, lastName, username, phone, address } = req.body;
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      if (!email || !password || !firstName || !lastName || !phone) {
        return res.status(400).json({ 
          message: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è",
          errors: { 
            email: !email ? "Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" : null,
            password: !password ? "–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" : null,
            firstName: !firstName ? "–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ" : null,
            lastName: !lastName ? "–§–∞–º–∏–ª–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞" : null,
            phone: !phone ? "–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" : null
          }
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
      if (password.length < 8) {
        return res.status(400).json({ 
          message: "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤",
          errors: { password: "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤" }
        });
      }

      if (!/[A-Z]/.test(password)) {
        return res.status(400).json({ 
          message: "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É",
          errors: { password: "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É" }
        });
      }
      
      if (!/[0-9]/.test(password)) {
        return res.status(400).json({ 
          message: "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—É",
          errors: { password: "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É" }
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ users
      const existingUser = db.queryOne("SELECT * FROM users WHERE email = ?", [email.toLowerCase()]);
      if (existingUser) {
        return res.status(400).json({
          message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
          errors: { email: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" }
        });
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const verificationToken = crypto.randomBytes(16).toString('hex');

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userData = {
        email: email.toLowerCase(),
        password: hashPassword(password), // –•–ï–®–ò–†–£–ï–ú –ü–ê–†–û–õ–¨ –°–†–ê–ó–£!
        firstName,
        lastName,
        username: username || email.split('@')[0],
        phone,
        address: address || ''
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ pending_registrations
      const success = savePendingRegistration(phone, userData, verificationToken);
      
      if (!success) {
        return res.status(500).json({
          message: "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
        });
      }

      console.log(`üìù –ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:`);
      console.log(`   Email: ${email}`);
      console.log(`   –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}`);
      console.log(`   –¢–æ–∫–µ–Ω: ${verificationToken}`);

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      res.json({
        message: "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
        verificationToken,
        phone,
        needsPhoneVerification: true
      });

    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
      res.status(500).json({ 
        message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
        error: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
      });
    }
  });

  // –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ–∫–∞ –∑–∞–∫–∞–∑–∞
  app.post("/api/orders/:id/receipt", ensureAuthenticated, ensureAdmin, async (req, res) => {
    try {
      const orderId = req.params.id;
      
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
      const order = db.queryOne("SELECT * FROM orders WHERE id = ?", [orderId]) as Record<string, any>;
      if (!order) {
        return res.status(404).json({ message: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —á–µ–∫–∞
      const receiptNumber = `CHK-${Date.now()}-${Math.floor(Math.random() * 1000)}`;
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —á–µ–∫–∞
      const items = typeof order.items === 'string' ? JSON.parse(order.items) : order.items;
      const receiptData = {
        receiptNumber,
        orderId: order.id,
        date: new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' }),
        customer: {
          name: order.full_name,
          phone: order.phone,
          address: order.address
        },
        items: items.map((item: any) => ({
          name: item.productName || item.name,
          quantity: item.quantity,
          price: item.price,
          total: item.price * item.quantity
        })),
        subtotal: parseFloat(order.total_amount),
        delivery: parseFloat(order.delivery_amount),
        total: parseFloat(order.total_amount) + parseFloat(order.delivery_amount),
        paymentMethod: order.payment_method,
        deliveryType: order.delivery_type
      };

      // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —á–µ–∫–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      const receiptsDir = path.join(process.cwd(), 'public', 'receipts');
      if (!fs.existsSync(receiptsDir)) {
        fs.mkdirSync(receiptsDir, { recursive: true });
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF —á–µ–∫
      const receiptFileName = `${receiptNumber}.pdf`;
      const receiptPath = path.join(receiptsDir, receiptFileName);
      await generateReceiptPDF(receiptData, receiptPath);

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–∫–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const receiptGeneratedAt = new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' });
      const receiptUrl = `/receipts/${receiptFileName}`; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
      
      console.log(`[RECEIPT] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ–∫–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderId}:`);
      console.log(`[RECEIPT] –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: ${receiptPath}`);
      console.log(`[RECEIPT] URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞: ${receiptUrl}`);

      db.run(
        `UPDATE orders SET 
          receipt_number = ?,
          receipt_url = ?,
          receipt_generated_at = ?
        WHERE id = ?`,
        [
          receiptNumber,
          receiptUrl,
          receiptGeneratedAt,
          orderId
        ]
      );

      res.json({
        receiptNumber,
        receiptUrl,
        receiptGeneratedAt
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ–∫–∞:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ–∫–∞" });
    }
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF —á–µ–∫–∞
  async function generateReceiptPDF(receiptData: any, outputPath: string) {
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —á–µ–∫–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const receiptsDir = path.dirname(outputPath);
    if (!fs.existsSync(receiptsDir)) {
      fs.mkdirSync(receiptsDir, { recursive: true });
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–∫–µ—Ç–∞ —á–µ–∫–∞
    const layoutSettings = {
      // –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏ –æ—Ç—Å—Ç—É–ø—ã
      page: {
        margin: 50,
        width: 595.28, // A4 —à–∏—Ä–∏–Ω–∞ –≤ –ø—É–Ω–∫—Ç–∞—Ö
        height: 841.89 // A4 –≤—ã—Å–æ—Ç–∞ –≤ –ø—É–Ω–∫—Ç–∞—Ö
      },
      fonts: {
        title: { size: 24, family: 'Arial' },
        subtitle: { size: 16, family: 'Arial' },
        header: { size: 14, family: 'Arial' },
        normal: { size: 12, family: 'Arial' },
        small: { size: 10, family: 'Arial' },
        tiny: { size: 8, family: 'Arial' }
      },
      spacing: {
        lineHeight: 12,
        itemPadding: 4,
        sectionPadding: 8,
        minItemHeight: 16
      },
      table: {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç –æ–±—â–µ–π —à–∏—Ä–∏–Ω—ã —Ç–∞–±–ª–∏—Ü—ã)
        columnWidths: {
          name: 0.35,     // 35% –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è (—É–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏)
          category: 0.25,  // 25% –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—É–≤–µ–ª–∏—á–µ–Ω–æ)
          quantity: 0.10,  // 10% –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
          price: 0.15,     // 15% –¥–ª—è —Ü–µ–Ω—ã
          total: 0.15      // 15% –¥–ª—è —Å—É–º–º—ã
        },
        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        maxNameLines: 3,
        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        maxCategoryLines: 2,
        // –û—Ç—Å—Ç—É–ø –¥–ª—è –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        textIndent: 2
      },
      colors: {
        text: '#000000',
        header: '#333333',
        border: '#CCCCCC',
        highlight: '#666666'
      }
    };

    return new Promise((resolve, reject) => {
      try {
        const doc = new PDFDocument({
          size: 'A4',
          margin: layoutSettings.page.margin,
          bufferPages: true
        });

        // –ü—É—Ç—å –∫ —à—Ä–∏—Ñ—Ç—É Arial
        const fontPath = path.join(process.cwd(), 'public', 'fonts', 'arial.ttf');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞
        if (!fs.existsSync(fontPath)) {
          throw new Error('–®—Ä–∏—Ñ—Ç Arial –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ setup-fonts.js');
        }

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        doc.registerFont('Arial', fontPath);

        const stream = fs.createWriteStream(outputPath);
        doc.pipe(stream);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        doc.font(layoutSettings.fonts.normal.family);

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–∞–≥–∞–∑–∏–Ω–∞
        doc.fontSize(layoutSettings.fonts.title.size)
           .fillColor(layoutSettings.colors.header)
           .text('Jungle Plants', { align: 'center' });
      
        doc.fontSize(layoutSettings.fonts.subtitle.size)
           .text('–ß–µ–∫ –∑–∞–∫–∞–∑–∞', { align: 'center' });
      
        doc.moveDown(1);

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –∏ –¥–∞—Ç–∞
        doc.fontSize(12);
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        let formattedDate;
        try {
          // –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É, –µ—Å–ª–∏ –æ–Ω–∞ –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
          const date = typeof receiptData.date === 'string' 
            ? new Date(receiptData.date)
            : receiptData.date;

          if (isNaN(date.getTime())) {
            throw new Error('Invalid date');
          }

          formattedDate = date.toLocaleString('ru-RU', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            timeZone: 'Europe/Moscow'
          });
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã:', error);
          formattedDate = new Date().toLocaleString('ru-RU', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            timeZone: 'Europe/Moscow'
          });
        }
        doc.text(`–ù–æ–º–µ—Ä —á–µ–∫–∞: ${receiptData.receiptNumber}`, { align: 'right' });
        doc.text(`–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${receiptData.orderId}`, { align: 'right' });
        doc.text(`–î–∞—Ç–∞: ${formattedDate}`, { align: 'right' });
        doc.moveDown(1.5);

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
        doc.fontSize(14).text('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:', { underline: true });
        doc.fontSize(12);
        doc.text(`–ò–º—è: ${receiptData.customer.name || ''}`);
        doc.text(`–¢–µ–ª–µ—Ñ–æ–Ω: ${receiptData.customer.phone || ''}`);
        doc.text(`–ê–¥—Ä–µ—Å: ${receiptData.customer.address || ''}`);
        doc.moveDown(1.5);

        // –¢–æ–≤–∞—Ä—ã
        doc.fontSize(14).text('–¢–æ–≤–∞—Ä—ã:', { underline: true });
        doc.moveDown(0.5);

        // –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤
        const tableTop = doc.y;
        const tableLeft = 50;
        const tableWidth = doc.page.width - 100;
        const colWidths = {
          name: tableWidth * 0.4,    // 40% –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è
          category: tableWidth * 0.2, // 20% –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
          quantity: tableWidth * 0.1, // 10% –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
          price: tableWidth * 0.15,   // 15% –¥–ª—è —Ü–µ–Ω—ã
          total: tableWidth * 0.15    // 15% –¥–ª—è —Å—É–º–º—ã
        };

        // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        doc.fontSize(11).text('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', tableLeft, doc.y, { width: colWidths.name });
        doc.text('–ö–∞—Ç–µ–≥–æ—Ä–∏—è', tableLeft + colWidths.name, doc.y, { width: colWidths.category });
        doc.text('–ö–æ–ª-–≤–æ', tableLeft + colWidths.name + colWidths.category, doc.y, { width: colWidths.quantity, align: 'center' });
        doc.text('–¶–µ–Ω–∞', tableLeft + colWidths.name + colWidths.category + colWidths.quantity, doc.y, { width: colWidths.price, align: 'right' });
        doc.text('–°—É–º–º–∞', tableLeft + colWidths.name + colWidths.category + colWidths.quantity + colWidths.price, doc.y, { width: colWidths.total, align: 'right' });
        doc.moveDown(0.5);

        // –õ–∏–Ω–∏—è –ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        doc.moveTo(tableLeft, doc.y - 2)
           .lineTo(tableLeft + tableWidth, doc.y - 2)
           .stroke();
        doc.moveDown(0.5);

        // –¢–æ–≤–∞—Ä—ã
        let y = doc.y; // –ù–∞—á–∞–ª—å–Ω–∞—è Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞

        receiptData.items.forEach((item: any, index: number) => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
          // –£—á–∏—Ç—ã–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã –∏ –∏—Ç–æ–≥–æ–≤
          const headerHeight = 40; // –í—ã—Å–æ—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
          const footerHeight = 150; // –í—ã—Å–æ—Ç–∞ –∏—Ç–æ–≥–æ–≤ –∏ –ø–æ–¥–ø–∏—Å–∏
          const estimatedItemHeight = layoutSettings.spacing.minItemHeight * 2; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É –≤—ã—Å–æ—Ç—ã —ç–ª–µ–º–µ–Ω—Ç–∞

          if (y + estimatedItemHeight > doc.page.height - (headerHeight + footerHeight)) {
            doc.addPage();
            y = layoutSettings.page.margin;
            
            // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            doc.fontSize(layoutSettings.fonts.small.size)
               .fillColor(layoutSettings.colors.header);
            
            const headerY = y;
            doc.text('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', tableLeft, headerY, { width: layoutSettings.table.columnWidths.name });
            doc.text('–ö–∞—Ç–µ–≥–æ—Ä–∏—è', tableLeft + layoutSettings.table.columnWidths.name, headerY, { width: layoutSettings.table.columnWidths.category });
            doc.text('–ö–æ–ª-–≤–æ', tableLeft + layoutSettings.table.columnWidths.name + layoutSettings.table.columnWidths.category, headerY, { 
              width: layoutSettings.table.columnWidths.quantity, 
              align: 'center' 
            });
            doc.text('–¶–µ–Ω–∞', tableLeft + layoutSettings.table.columnWidths.name + layoutSettings.table.columnWidths.category + layoutSettings.table.columnWidths.quantity, headerY, { 
              width: layoutSettings.table.columnWidths.price, 
              align: 'right' 
            });
            doc.text('–°—É–º–º–∞', tableLeft + layoutSettings.table.columnWidths.name + layoutSettings.table.columnWidths.category + layoutSettings.table.columnWidths.quantity + layoutSettings.table.columnWidths.price, headerY, { 
              width: layoutSettings.table.columnWidths.total, 
              align: 'right' 
            });
            
            // –õ–∏–Ω–∏—è –ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            const headerBottomY = headerY + layoutSettings.spacing.lineHeight + layoutSettings.spacing.itemPadding;
            doc.strokeColor(layoutSettings.colors.border)
               .moveTo(tableLeft, headerBottomY)
               .lineTo(tableLeft + layoutSettings.page.width - layoutSettings.page.margin * 2, headerBottomY)
               .stroke();
            
            y = headerBottomY + layoutSettings.spacing.itemPadding; // –û–±–Ω–æ–≤–ª—è–µ–º Y –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
          }

          const name = item.productName || item.name || '';
          const category = item.category || '–†–∞—Å—Ç–µ–Ω–∏–µ';
          const quantity = parseInt(item.quantity) || 0;
          const price = parseFloat(item.price) || 0;
          const total = quantity * price;

          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
          doc.fontSize(layoutSettings.fonts.small.size);
          const nameOptions = {
            width: layoutSettings.table.columnWidths.name - layoutSettings.table.textIndent,
            align: 'left' as const,
            continued: false,
            ellipsis: '...' // –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ –¥–ª—è –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
          };

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –∑–∞–π–º–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ
          const nameHeight = doc.heightOfString(name, nameOptions);
          const maxNameHeight = layoutSettings.spacing.lineHeight * layoutSettings.table.maxNameLines;
          
          // –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ–±—Ä–µ–∑–∞–µ–º –µ–≥–æ
          let displayName = name;
          if (nameHeight > maxNameHeight) {
            // –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é, –≥–¥–µ –Ω—É–∂–Ω–æ –æ–±—Ä–µ–∑–∞—Ç—å —Ç–µ–∫—Å—Ç
            let cutPosition = name.length;
            while (doc.heightOfString(name.substring(0, cutPosition) + '...', nameOptions) > maxNameHeight && cutPosition > 0) {
              cutPosition = Math.floor(cutPosition * 0.9); // –£–º–µ–Ω—å—à–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞ 10%
            }
            displayName = name.substring(0, cutPosition) + '...';
          }

          // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
          const categoryOptions = {
            width: layoutSettings.table.columnWidths.category - layoutSettings.table.textIndent,
            align: 'left' as const,
            continued: false,
            ellipsis: '...'
          };

          const categoryHeight = doc.heightOfString(category, categoryOptions);
          const maxCategoryHeight = layoutSettings.spacing.lineHeight * layoutSettings.table.maxCategoryLines;
          
          let displayCategory = category;
          if (categoryHeight > maxCategoryHeight) {
            let cutPosition = category.length;
            while (doc.heightOfString(category.substring(0, cutPosition) + '...', categoryOptions) > maxCategoryHeight && cutPosition > 0) {
              cutPosition = Math.floor(cutPosition * 0.9);
            }
            displayCategory = category.substring(0, cutPosition) + '...';
          }

          // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–Ω–∫–∏
          const quantityHeight = doc.heightOfString(quantity.toString(), { width: layoutSettings.table.columnWidths.quantity });
          const priceHeight = doc.heightOfString(`${price.toLocaleString('ru-RU')} ‚ÇΩ`, { width: layoutSettings.table.columnWidths.price });
          const totalHeight = doc.heightOfString(`${total.toLocaleString('ru-RU')} ‚ÇΩ`, { width: layoutSettings.table.columnWidths.total });

          // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É –¥–ª—è —Å—Ç—Ä–æ–∫–∏
          const rowHeight = Math.max(
            doc.heightOfString(displayName, nameOptions),
            doc.heightOfString(displayCategory, categoryOptions),
            quantityHeight,
            priceHeight,
            totalHeight,
            layoutSettings.spacing.minItemHeight
          ) + layoutSettings.spacing.itemPadding * 2;

          // –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º
          const itemY = y + layoutSettings.spacing.itemPadding;
          const verticalCenter = itemY + (rowHeight - layoutSettings.spacing.itemPadding * 2) / 2;

          // –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ (—Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫ –∏ –æ–±—Ä–µ–∑–∫–æ–π)
          doc.fillColor(layoutSettings.colors.text)
             .text(displayName, tableLeft, itemY, nameOptions);

          // –ö–∞—Ç–µ–≥–æ—Ä–∏—è (—Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫ –∏ –æ–±—Ä–µ–∑–∫–æ–π)
          doc.text(displayCategory, tableLeft + layoutSettings.table.columnWidths.name, itemY, categoryOptions);

          // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–ø–æ —Ü–µ–Ω—Ç—Ä—É)
          const quantityY = verticalCenter - quantityHeight / 2;
          doc.text(quantity.toString(), tableLeft + layoutSettings.table.columnWidths.name + layoutSettings.table.columnWidths.category, quantityY, {
            width: layoutSettings.table.columnWidths.quantity,
            align: 'center'
          });

          // –¶–µ–Ω–∞ (–ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é)
          const priceY = verticalCenter - priceHeight / 2;
          doc.text(`${price.toLocaleString('ru-RU')} ‚ÇΩ`, tableLeft + layoutSettings.table.columnWidths.name + layoutSettings.table.columnWidths.category + layoutSettings.table.columnWidths.quantity, priceY, {
            width: layoutSettings.table.columnWidths.price,
            align: 'right'
          });

          // –°—É–º–º–∞ (–ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é)
          const totalY = verticalCenter - totalHeight / 2;
          doc.text(`${total.toLocaleString('ru-RU')} ‚ÇΩ`, tableLeft + layoutSettings.table.columnWidths.name + layoutSettings.table.columnWidths.category + layoutSettings.table.columnWidths.quantity + layoutSettings.table.columnWidths.price, totalY, {
            width: layoutSettings.table.columnWidths.total,
            align: 'right'
          });

          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          const details = [];
          if (item.hasOwnProperty('isRare') && item.isRare) details.push('–†–µ–¥–∫–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ');
          if (item.hasOwnProperty('isPreorder') && item.isPreorder) details.push('–ü—Ä–µ–¥–∑–∞–∫–∞–∑');
          if (item.hasOwnProperty('isEasyToCare') && item.isEasyToCare) details.push('–ü—Ä–æ—Å—Ç–æ–π —É—Ö–æ–¥');

          let detailsHeight = 0;
          if (details.length > 0) {
            doc.fontSize(layoutSettings.fonts.tiny.size)
               .fillColor(layoutSettings.colors.highlight);
            
            const detailsText = `(${details.join(', ')})`;
            const detailsY = itemY + rowHeight - layoutSettings.spacing.itemPadding;
            doc.text(detailsText, tableLeft, detailsY, {
              width: layoutSettings.page.width - layoutSettings.page.margin * 2 - layoutSettings.table.textIndent,
              continued: false
            });
            detailsHeight = doc.heightOfString(detailsText, { width: layoutSettings.page.width - layoutSettings.page.margin * 2 - layoutSettings.table.textIndent }) + layoutSettings.spacing.itemPadding;
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
          y = itemY + rowHeight + detailsHeight;

          // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—É—é –ª–∏–Ω–∏—é –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏
          doc.strokeColor(layoutSettings.colors.border)
             .moveTo(tableLeft, y - layoutSettings.spacing.itemPadding)
             .lineTo(tableLeft + layoutSettings.page.width - layoutSettings.page.margin * 2, y - layoutSettings.spacing.itemPadding)
             .stroke();
        });

        // –õ–∏–Ω–∏—è –ø–æ—Å–ª–µ —Ç–æ–≤–∞—Ä–æ–≤
        doc.moveTo(tableLeft, y - 2) 
           .lineTo(tableLeft + layoutSettings.page.width - layoutSettings.page.margin * 2, y - 2)
           .stroke();

        doc.moveDown(1.5); 

        // –ò—Ç–æ–≥–∏
        const subtotal = parseFloat(receiptData.subtotal) || 0;
        const delivery = parseFloat(receiptData.delivery) || 0;
        const total = subtotal + delivery;

        doc.fontSize(layoutSettings.fonts.normal.size);
        // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ–¥—ã—Ç–æ–≥ –∏ –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é
        const totalsX = layoutSettings.page.width - layoutSettings.page.margin * 2 - layoutSettings.table.columnWidths.total; // –ü–æ–∑–∏—Ü–∏—è –¥–ª—è –∏—Ç–æ–≥–æ–≤ (60% –æ—Ç —à–∏—Ä–∏–Ω—ã —Ç–∞–±–ª–∏—Ü—ã)
        const totalsWidth = layoutSettings.table.columnWidths.total; // –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∏—Ç–æ–≥–æ–≤

        doc.text(`–ü–æ–¥—ã—Ç–æ–≥: ${subtotal.toLocaleString('ru-RU')} ‚ÇΩ`, totalsX, doc.y, { align: 'right', width: totalsWidth });
        doc.text(`–î–æ—Å—Ç–∞–≤–∫–∞: ${delivery.toLocaleString('ru-RU')} ‚ÇΩ`, totalsX, doc.y, { align: 'right', width: totalsWidth });
        doc.fontSize(layoutSettings.fonts.normal.size);
        doc.text(`–ò—Ç–æ–≥–æ: ${total.toLocaleString('ru-RU')} ‚ÇΩ`, totalsX, doc.y, { align: 'right', width: totalsWidth });
        doc.moveDown(2);

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ –∏ –¥–æ—Å—Ç–∞–≤–∫–µ
        doc.fontSize(layoutSettings.fonts.small.size);
        const paymentMethodMap: Record<string, string> = {
          "ozonpay": "–û–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∞",
          "directTransfer": "–ü—Ä—è–º–æ–π –ø–µ—Ä–µ–≤–æ–¥",
          "balance": "–ë–∞–ª–∞–Ω—Å"
        };
        const deliveryTypeMap: Record<string, string> = {
          "cdek": "–°–î–≠–ö",
          "russianPost": "–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏",
          "pickup": "–°–∞–º–æ–≤—ã–≤–æ–∑"
        };
        // –í—ã–≤–æ–¥–∏–º —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –∏ –¥–æ—Å—Ç–∞–≤–∫–∏
        doc.text(`–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ${paymentMethodMap[receiptData.paymentMethod] || receiptData.paymentMethod}`);
        doc.text(`–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: ${deliveryTypeMap[receiptData.deliveryType] || receiptData.deliveryType}`);
        doc.moveDown(3); 

        // –ü–æ–¥–ø–∏—Å—å
        doc.fontSize(layoutSettings.fonts.normal.size).text('–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!', { align: 'center' });
        doc.moveDown(0.5);
        doc.fontSize(layoutSettings.fonts.normal.size).text('Jungle Plants', { align: 'center' });
        doc.fontSize(layoutSettings.fonts.small.size).text('–ú–∞–≥–∞–∑–∏–Ω –∫–æ–º–Ω–∞—Ç–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π', { align: 'center' });
        doc.moveDown(0.5);
        doc.fontSize(layoutSettings.fonts.tiny.size).text('www.jungleplants.ru', { align: 'center' });

        // –î–æ–±–∞–≤–ª—è–µ–º QR-–∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ —á–µ–∫–∞
        const qrCodePath = path.join(process.cwd(), 'public', 'receipts', `${receiptData.receiptNumber}.png`);
        if (fs.existsSync(qrCodePath)) {
          const qrSize = 100;
          const qrX = doc.page.width - qrSize - 50;
          const qrY = doc.page.height - qrSize - 50;
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã QR-–∫–æ–¥ –Ω–µ –Ω–∞–∫–ª–∞–¥—ã–≤–∞–ª—Å—è –Ω–∞ —Ç–µ–∫—Å—Ç –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
          if (qrY > doc.y + 20) { 
             doc.image(qrCodePath, qrX, qrY, { width: qrSize });
             doc.fontSize(layoutSettings.fonts.tiny.size).text('QR-–∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏', qrX, qrY + qrSize + 5, { width: qrSize, align: 'center' });
          }
        }

        doc.end();

        stream.on('finish', resolve);
        stream.on('error', (err) => {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ PDF:', err);
          reject(err);
        });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF:', error);
        reject(error);
      }
    });
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
  app.put("/api/users/:id/password", async (req, res) => {
    try {
      const userId = req.params.id;
      const { oldPassword, newPassword } = req.body;

      if (!oldPassword || !newPassword) {
        return res.status(400).json({ 
          message: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å" 
        });
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = db.queryOne("SELECT * FROM users WHERE id = ?", [userId]) as UserRecord | null;
      if (!user) {
        return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
      const isPasswordValid = comparePasswords(user.password, oldPassword);
      if (!isPasswordValid) {
        return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å" });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
      if (newPassword.length < 8) {
        return res.status(400).json({ 
          message: "–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤" 
        });
      }

      if (!/[A-Z]/.test(newPassword)) {
        return res.status(400).json({ 
          message: "–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É" 
        });
      }

      if (!/[0-9]/.test(newPassword)) {
        return res.status(400).json({ 
          message: "–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É" 
        });
      }

      // –•–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
      const hashedPassword = hashPassword(newPassword);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      db.run(
        "UPDATE users SET password = ?, updated_at = ? WHERE id = ?",
        [hashedPassword, new Date().toISOString(), userId]
      );

      res.json({ message: "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω" });
    } catch (error) {
      console.error("Error changing password:", error);
      res.status(500).json({ message: "Failed to change password" });
    }
  });

  // Endpoint –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  app.delete("/api/users/:id/account", ensureAuthenticated, async (req, res) => {
    try {
      const userId = req.params.id;
      const { password } = req.body;
      const currentUser = req.user as any;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—è–µ—Ç —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
      if (currentUser.id !== userId) {
        return res.status(403).json({ 
          message: "–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç" 
        });
      }

      if (!password) {
        return res.status(400).json({ 
          message: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–º" 
        });
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = db.queryOne("SELECT * FROM users WHERE id = ?", [userId]) as UserRecord | null;
      if (!user) {
        return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
      const isPasswordValid = comparePasswords(user.password, password);
      if (!isPasswordValid) {
        return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å" });
      }

      console.log(`üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.email} (ID: ${userId})`);

      // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      try {
        // 1. –£–¥–∞–ª—è–µ–º –æ—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const reviewsResult = db.run("DELETE FROM reviews WHERE user_id = ?", [userId]);
        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: ${reviewsResult.changes}`);

        // 2. –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ - —ç—Ç–æ –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É)
        const ordersResult = db.run("DELETE FROM orders WHERE user_id = ?", [userId]);
        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${ordersResult.changes}`);

        // 3. –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const notificationsResult = db.run("DELETE FROM notifications WHERE user_id = ?", [userId]);
        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${notificationsResult.changes}`);

        // 4. –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ pending_registrations –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
        if (user.phone) {
          const pendingResult = db.run("DELETE FROM pending_registrations WHERE phone = ?", [user.phone]);
          console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ pending_registrations: ${pendingResult.changes}`);
        }

        // 5. –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userResult = db.run("DELETE FROM users WHERE id = ?", [userId]);
        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userResult.changes}`);

        // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
        req.logout((err) => {
          if (err) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏:", err);
          }
        });

        console.log(`üéâ –ê–∫–∫–∞—É–Ω—Ç ${user.email} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`);
        res.json({ 
          message: "–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
          deleted: {
            reviews: reviewsResult.changes,
            orders: ordersResult.changes,
            notifications: notificationsResult.changes
          }
        });

      } catch (deleteError) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:", deleteError);
        res.status(500).json({ 
          message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞" 
        });
      }

    } catch (error) {
      console.error("Error deleting account:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞" });
    }
  });

  app.get("/api/debug/user-count", async (req, res) => {
    try {
      const count = db.queryOne("SELECT COUNT(*) as userCount FROM users");
      res.json({ userCount: count ? (count as any).userCount : 0 });
    } catch (error) {
      console.error("Error fetching user count:", error);
      res.status(500).json({ message: "Failed to fetch user count" });
    }
  });

  // –°—Ö–µ–º–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞
  const validatePromoCodeSchema = z.object({
    code: z.string().min(1),
    cartTotal: z.number().min(0)
  });

  // –°—Ö–µ–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
  const promoCodeSchema = z.object({
    code: z.string().min(1, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞"),
    description: z.string().optional(),
    discountType: z.enum(["percentage", "fixed"]),
    discountValue: z.number().min(0, "–ó–Ω–∞—á–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º"),
    minOrderAmount: z.number().min(0, "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π").optional(),
    startDate: z.string().datetime(),
    endDate: z.string().datetime(),
    maxUses: z.number().min(1, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º").optional(),
    isActive: z.boolean().default(true),
  });

  // –¢–∏–ø—ã –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
  interface PromoCode {
    id: number;
    code: string;
    description: string | null;
    discount_type: 'percentage' | 'fixed';
    discount_value: number;
    min_order_amount: number | null;
    start_date: string;
    end_date: string;
    max_uses: number | null;
    current_uses: number;
    is_active: boolean;
    created_at: string;
    updated_at: string;
  }

  interface Order {
    id: string;
    user_id: number;
    total_amount: number;
    delivery_amount: number;
    promo_code: string | null;
    promo_code_discount: number | null;
    items: string;
    full_name: string;
    address: string;
    phone: string;
    social_network?: string;
    social_username?: string;
    comment?: string;
    need_insulation: boolean;
    delivery_type: string;
    delivery_speed?: string;
    payment_method: string;
    payment_status: string;
    order_status: string;
    payment_proof_url?: string;
    admin_comment?: string;
    tracking_number?: string;
    estimated_delivery_date?: string;
    actual_delivery_date?: string;
    last_status_change_at?: string;
    status_history?: string;
    product_quantities_reduced: boolean;
    created_at: string;
    updated_at: string;
  }

  // API –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞
  app.post("/api/promo-codes/validate", async (req, res) => {
    try {
      const { code, cartTotal } = validatePromoCodeSchema.parse(req.body);
      
      const promoCode = db.queryOne(`
        SELECT * FROM promo_codes 
        WHERE code = ? 
        AND is_active = 1 
        AND start_date <= datetime('now') 
        AND end_date >= datetime('now')
        AND (max_uses IS NULL OR current_uses < max_uses)
      `, [code.toUpperCase()]) as PromoCode | undefined;

      if (!promoCode) {
        return res.status(404).json({ 
          message: "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω" 
        });
      }

      if (promoCode.min_order_amount && cartTotal < promoCode.min_order_amount) {
        return res.status(400).json({ 
          message: `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞: ${promoCode.min_order_amount} ‚ÇΩ` 
        });
      }

      let discount = 0;
      if (promoCode.discount_type === "percentage") {
        discount = Math.round(cartTotal * (promoCode.discount_value / 100));
      } else {
        discount = promoCode.discount_value;
      }

      discount = Math.min(discount, cartTotal);

      return res.json({
        code: promoCode.code,
        description: promoCode.description,
        discount,
        discountType: promoCode.discount_type,
        discountValue: promoCode.discount_value
      });
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ 
          message: "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", 
          errors: error.errors 
        });
      }
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞:", error);
      return res.status(500).json({ 
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞" 
      });
    }
  });

  // API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
  app.get("/api/promo-codes", ensureAdmin, async (req, res) => {
    try {
      const promoCodes = db.query("SELECT * FROM promo_codes ORDER BY created_at DESC");
      res.json(promoCodes);
    } catch (error) {
      console.error("Error fetching promo codes:", error);
      res.status(500).json({ message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  });

  // API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
  app.get("/api/promo-codes/:id", ensureAdmin, async (req, res) => {
    try {
      const { id } = req.params;
      
      const promoCode = db.queryOne(
        "SELECT * FROM promo_codes WHERE id = ?",
        [id]
      ) as PromoCode | null;
      
      if (!promoCode) {
        return res.status(404).json({ 
          message: "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω" 
        });
      }
      
      res.json(promoCode);
    } catch (error) {
      console.error("Error fetching promo code:", error);
      res.status(500).json({ message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  });

  // API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
  app.post("/api/promo-codes", ensureAdmin, async (req, res) => {
    try {
      const data = promoCodeSchema.parse(req.body);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥ —É–Ω–∏–∫–∞–ª–µ–Ω
      const existingCode = db.queryOne(
        "SELECT id FROM promo_codes WHERE code = ?",
        [data.code.toUpperCase()]
      );
      
      if (existingCode) {
        return res.status(400).json({ 
          message: "–ü—Ä–æ–º–æ–∫–æ–¥ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" 
        });
      }
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
      const result = db.run(
        `INSERT INTO promo_codes (
          code, description, discount_type, discount_value,
          min_order_amount, start_date, end_date, max_uses,
          is_active, created_at, updated_at
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, datetime('now'), datetime('now'))`,
        [
          data.code.toUpperCase(),
          data.description || null,
          data.discountType,
          data.discountValue,
          data.minOrderAmount || null,
          data.startDate,
          data.endDate,
          data.maxUses || null,
          data.isActive ? 1 : 0
        ]
      );
      
      const newPromoCode = db.queryOne(
        "SELECT * FROM promo_codes WHERE id = ?",
        [result.lastInsertRowid]
      );
      
      res.status(201).json(newPromoCode);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ 
          message: "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", 
          errors: error.errors 
        });
      }
      console.error("Error creating promo code:", error);
      res.status(500).json({ message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  });

  // API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
  app.put("/api/promo-codes/:id", ensureAdmin, async (req, res) => {
    try {
      const { id } = req.params;
      const data = promoCodeSchema.parse(req.body);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
      const existingPromoCode = db.queryOne(
        "SELECT id FROM promo_codes WHERE id = ?",
        [id]
      );
      
      if (!existingPromoCode) {
        return res.status(404).json({ 
          message: "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω" 
        });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞
      const duplicateCode = db.queryOne(
        "SELECT id FROM promo_codes WHERE code = ? AND id != ?",
        [data.code.toUpperCase(), id]
      );
      
      if (duplicateCode) {
        return res.status(400).json({ 
          message: "–ü—Ä–æ–º–æ–∫–æ–¥ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" 
        });
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
      db.run(
        `UPDATE promo_codes SET
          code = ?,
          description = ?,
          discount_type = ?,
          discount_value = ?,
          min_order_amount = ?,
          start_date = ?,
          end_date = ?,
          max_uses = ?,
          is_active = ?,
          updated_at = datetime('now')
        WHERE id = ?`,
        [
          data.code.toUpperCase(),
          data.description || null,
          data.discountType,
          data.discountValue,
          data.minOrderAmount || null,
          data.startDate,
          data.endDate,
          data.maxUses || null,
          data.isActive ? 1 : 0,
          id
        ]
      );
      
      const updatedPromoCode = db.queryOne(
        "SELECT * FROM promo_codes WHERE id = ?",
        [id]
      );
      
      res.json(updatedPromoCode);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ 
          message: "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", 
          errors: error.errors 
        });
      }
      console.error("Error updating promo code:", error);
      res.status(500).json({ message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  });

  // API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
  app.delete("/api/promo-codes/:id", ensureAdmin, async (req, res) => {
    try {
      const { id } = req.params;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
      const existingPromoCode = db.queryOne(
        "SELECT id FROM promo_codes WHERE id = ?",
        [id]
      );
      
      if (!existingPromoCode) {
        return res.status(404).json({ 
          message: "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω" 
        });
      }
      
      // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
      db.run("DELETE FROM promo_codes WHERE id = ?", [id]);
      
      res.status(204).send();
    } catch (error) {
      console.error("Error deleting promo code:", error);
      res.status(500).json({ message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  });

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∫ –∑–∞–∫–∞–∑—É
  app.post("/api/orders/:orderId/apply-promo", ensureAuthenticated, async (req, res) => {
    const { orderId } = req.params;
    const { promoCode } = req.body;
    const userId = req.user?.id;

    if (!userId) {
      return res.status(401).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" });
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
      const order = db.queryOne(
        "SELECT * FROM orders WHERE id = ?",
        [orderId]
      ) as Order | null;

      if (!order) {
        return res.status(404).json({ message: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
      const promo = db.queryOne(
        "SELECT * FROM promo_codes WHERE code = ? AND (expires_at IS NULL OR expires_at > datetime('now')) AND is_active = 1",
        [promoCode]
      ) as PromoCode | null;

      if (!promo) {
        return res.status(400).json({ message: "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥" });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
      if (promo.min_order_amount && order.total_amount < promo.min_order_amount) {
        return res.status(400).json({ 
          message: `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞: ${promo.min_order_amount} ‚ÇΩ` 
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
      if (promo.max_uses && promo.current_uses >= promo.max_uses) {
        return res.status(400).json({ message: "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞" });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —Ä–∞–Ω–µ–µ
      const userUsage = db.queryOne(
        `SELECT id FROM promo_code_uses 
         WHERE promo_code_id = ? AND user_id = ?`,
        [promo.id, userId]
      );

      if (userUsage) {
        return res.status(400).json({ message: "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥" });
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–∏–¥–∫—É
      let discountAmount = 0;
      if (promo.discount_type === "percentage") {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É —Ç–æ–ª—å–∫–æ –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤, –±–µ–∑ –¥–æ—Å—Ç–∞–≤–∫–∏
        const itemsTotal = order.total_amount - order.delivery_amount;
        discountAmount = Math.round(itemsTotal * (promo.discount_value / 100));
      } else {
        discountAmount = promo.discount_value;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∫–∏–¥–∫–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤
      const itemsTotal = order.total_amount - order.delivery_amount;
      discountAmount = Math.min(discountAmount, itemsTotal);

      // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      db.exec("BEGIN TRANSACTION");

      try {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
        db.run(
          `UPDATE orders 
           SET promo_code = ?,
               promo_code_discount = ?,
               total_amount = total_amount - ?
           WHERE id = ?`,
          [promo.code, discountAmount, discountAmount, orderId]
        );

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞
        db.run(
          `UPDATE promo_codes 
           SET current_uses = current_uses + 1 
           WHERE id = ?`,
          [promo.id]
        );

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        db.run(
          `INSERT INTO promo_code_uses (promo_code_id, user_id, order_id, discount_amount, used_at)
           VALUES (?, ?, ?, ?, datetime('now'))`,
          [promo.id, userId, orderId, discountAmount]
        );

        // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        db.exec("COMMIT");

        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
        const updatedOrder = db.queryOne(
          `SELECT * FROM orders WHERE id = ?`,
          [orderId]
        );

        if (!updatedOrder) {
          throw new Error("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è");
        }

        res.json(formatOrderForClient(updatedOrder));
      } catch (error) {
        // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        db.exec("ROLLBACK");
        console.error("Error updating promo code:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞" });
      }
    } catch (error) {
      console.error("Error applying promo code:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞" });
    }
  });

  // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  app.post("/api/auth/request-phone-verification", async (req, res) => {
    try {
      const { phone, userData, verificationToken } = req.body;
      
      console.log(`üìã –ó–∞–ø—Ä–æ—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${phone} —Å —Ç–æ–∫–µ–Ω–æ–º: ${verificationToken}`);
      console.log(`üìã –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, userData);
      
      if (!phone || !userData || !verificationToken) {
        return res.status(400).json({ 
          error: "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: phone, userData, verificationToken" 
        });
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const saved = savePendingRegistration(phone, userData, verificationToken);
      
      console.log(`üìã –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${saved ? '–£–°–ü–ï–®–ù–û' : '–û–®–ò–ë–ö–ê'}`);
      
      if (saved) {
        res.json({ 
          success: true, 
          message: "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
          verificationToken 
        });
      } else {
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏" });
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  });

  // –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ auth-sqlite.ts –¥–ª—è –µ–¥–∏–Ω–æ–π –ª–æ–≥–∏–∫–∏

  // Telegram webhook endpoint
  app.post("/api/telegram/webhook", async (req, res) => {
    try {
      const update = req.body;
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
      await handleTelegramUpdate(update);
      
      res.json({ success: true });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Telegram webhook:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  });

  // Endpoint –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ Telegram
  app.post("/api/telegram/verify-phone", async (req, res) => {
    try {
      const { phone, verificationToken } = req.body;
      
      console.log(`üìã –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ Telegram: ${phone} —Å —Ç–æ–∫–µ–Ω–æ–º: ${verificationToken}`);
      
      if (!phone || !verificationToken) {
        return res.status(400).json({ 
          error: "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: phone, verificationToken" 
        });
      }

      // –ü–æ–º–µ—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π
      const verified = markPhoneAsVerified(phone, verificationToken);
      
      console.log(`üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${verified ? '–£–°–ü–ï–®–ù–û' : '–û–®–ò–ë–ö–ê'}`);
      
      if (verified) {
        res.json({ 
          success: true, 
          message: "–¢–µ–ª–µ—Ñ–æ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω" 
        });
      } else {
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞" });
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  app.post("/api/auth/check-phone-verification", async (req, res) => {
    try {
      const { phone, verificationToken } = req.body;
      
      console.log(`üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${phone} —Å —Ç–æ–∫–µ–Ω–æ–º: ${verificationToken}`);
      
      if (!phone || !verificationToken) {
        return res.status(400).json({ 
          error: "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: phone, verificationToken" 
        });
      }

      // –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞)
      console.log(`üîç DEBUG: –ò—â—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å phone = "${phone}"`);
      
      const existingVerifiedUser = db.queryOne(
        "SELECT * FROM users WHERE phone = ? AND phone_verified = 1", 
        [phone]
      ) as UserRecord | null;

      console.log(`üîç DEBUG: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:`, existingVerifiedUser ? `–Ω–∞–π–¥–µ–Ω ${existingVerifiedUser.email}` : '–Ω–µ –Ω–∞–π–¥–µ–Ω');

      if (existingVerifiedUser) {
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ–∑–¥–∞–Ω –∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: ${existingVerifiedUser.email}`);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ª–æ–≥–∏–Ω–∏–º
        const user = userRecordToSessionUser(existingVerifiedUser);
        req.login(user, (loginErr) => {
          if (loginErr) {
            console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ª–æ–≥–∏–Ω–∞:', loginErr);
            return res.json({
              verified: true,
              message: "–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É",
              user
            });
          }
          
          console.log(`üéâ –ê–≤—Ç–æ–ª–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω: ${existingVerifiedUser.email}`);
          
          res.json({
            verified: true,
            message: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
            user,
            autoLogin: true
          });
        });
        return;
      }

      console.log(`‚ö†Ô∏è DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å phone="${phone}" –∏ phone_verified=1 –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—â—É –≤ pending_registrations...`);

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ pending_registrations
      const isVerified = checkPhoneVerification(phone, verificationToken);
      
      if (isVerified) {
        // –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω - —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!
        const userData = getPendingRegistrationData(phone, verificationToken);
        
        if (!userData) {
          return res.status(500).json({ 
            error: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" 
          });
        }

        console.log(`üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userData.email}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const existingUser = db.queryOne("SELECT * FROM users WHERE email = ?", [userData.email]) as UserRecord | null;
        if (existingUser) {
          console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${userData.email}`);
          
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ª–æ–≥–∏–Ω–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const user = userRecordToSessionUser(existingUser);
          req.login(user, (loginErr) => {
            if (loginErr) {
              return res.json({
                verified: true,
                message: "–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É",
                user
              });
            }
            
            // –£–¥–∞–ª—è–µ–º –∏–∑ pending_registrations
            removePendingRegistration(phone, verificationToken);
            
            res.json({
              verified: true,
              message: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
              user,
              autoLogin: true
            });
          });
          return;
        }

        // üöÄ –ë–´–°–¢–†–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–µ–π
        try {
          const user = await fastRegisterWithSession(req, {
            email: userData.email,
            password: userData.password,
            username: userData.username,
            firstName: userData.firstName,
            lastName: userData.lastName,
            phone: phone,
            address: userData.address
          });

          // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —É–¥–∞–ª—è–µ–º –∏–∑ pending_registrations (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç)
          setImmediate(() => {
            removePendingRegistration(phone, verificationToken);
          });
            
          console.log(`üéâ –ë—ã—Å—Ç—Ä–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${userData.email}`);
            
            res.json({
              verified: true,
              message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!",
              user,
              autoLogin: true
          });

        } catch (dbError) {
          console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î:", dbError);
          res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
        }
      } else {
        res.json({ 
          verified: false,
          message: "–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
        });
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  });

  // Create HTTP server
  const server = createServer(app);
  return server;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ CSV –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function generateUsersCSV(users: Array<any>): string {
  const headers = [
    'ID',
    'Email',
    '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    '–ü–æ–ª–Ω–æ–µ –∏–º—è',
    '–¢–µ–ª–µ—Ñ–æ–Ω',
    '–ê–¥—Ä–µ—Å',
    '–†–æ–ª—å',
    '–ë–∞–ª–∞–Ω—Å',
    '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
  ];

  const rows = users.map(user => {
    const fullName = user.full_name || '';

    return [
      user.id,
      user.email,
      user.username || '',
      escapeCSVField(fullName),
      escapeCSVField(user.phone || ''),
      escapeCSVField(user.address || ''),
      user.is_admin ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      `${user.balance || '0'} ‚ÇΩ`,
      new Date(user.created_at).toLocaleDateString('ru-RU')
    ];
  });

  return [headers, ...rows]
    .map(row => row.map(field => escapeCSVField(field.toString())).join(';'))
    .join('\n');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ CSV –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function generateStatisticsCSV(users: Array<any>, products: Array<any>, orders: Array<any>): string {
  const headers = ['–ú–µ—Ç—Ä–∏–∫–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ'];
  
  const totalAmount = orders.reduce((sum, order) => {
    const amount = parseFloat(order.total_amount || '0');
    return sum + (isNaN(amount) ? 0 : amount);
  }, 0);

  const rows = [
    ['–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', users.length.toString()],
    ['–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤', products.length.toString()],
    ['–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤', orders.length.toString()],
    ['–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã', orders.filter(o => o.order_status !== 'cancelled').length.toString()],
    ['–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã', orders.filter(o => o.order_status === 'cancelled').length.toString()],
    ['–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤', `${totalAmount.toLocaleString('ru-RU')} ‚ÇΩ`]
  ];

  return [headers, ...rows]
    .map(row => row.map(field => escapeCSVField(field.toString())).join(';'))
    .join('\n');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
function formatProductForClient(product: any) {
  if (!product) return null;
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É JSON –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è images –∏ labels
  let images = [];
  if (product.images) {
    try {
      images = typeof product.images === 'string' ? JSON.parse(product.images) : product.images;
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON images:", e);
    }
  }
  
  let labels = [];
  if (product.labels) {
    try {
      labels = typeof product.labels === 'string' ? JSON.parse(product.labels) : product.labels;
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON labels:", e);
    }
  }
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª–µ–π
  return {
    id: product.id,
    name: product.name,
    description: product.description,
    price: product.price,
    originalPrice: product.original_price,
    images: images,
    quantity: product.quantity,
    category: product.category,
    isAvailable: Boolean(product.is_available),
    isPreorder: Boolean(product.is_preorder),
    isRare: Boolean(product.is_rare),
    isEasyToCare: Boolean(product.is_easy_to_care),
    labels: labels,
    deliveryCost: product.delivery_cost,
    plantSize: product.plant_size || 'medium',
    lightLevel: product.light_level || 'moderate',
    humidityLevel: product.humidity_level || 'medium',
    plantType: product.plant_type || 'decorative',
    origin: product.origin || 'tropical',
    isPetSafe: Boolean(product.is_pet_safe),
    isAirPurifying: Boolean(product.is_air_purifying),
    isFlowering: Boolean(product.is_flowering),
    // –§–ª–∞–∂–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
    isHotDeal: Boolean(product.is_hot_deal),
    isBestseller: Boolean(product.is_bestseller),
    isNewArrival: Boolean(product.is_new_arrival),
    isLimitedEdition: Boolean(product.is_limited_edition),
    isDiscounted: Boolean(product.is_discounted),
    createdAt: product.created_at,
    updatedAt: product.updated_at
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ CSV –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
function generateProductsCSV(products: Array<any>): string {
  const headers = [
    "ID", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–û–ø–∏—Å–∞–Ω–∏–µ", "–¶–µ–Ω–∞", "–ò—Å—Ö–æ–¥–Ω–∞—è —Ü–µ–Ω–∞", 
    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–î–æ—Å—Ç—É–ø–µ–Ω", "–ü—Ä–µ–¥–∑–∞–∫–∞–∑", 
    "–†–µ–¥–∫–∏–π", "–ü—Ä–æ—Å—Ç–æ–π —É—Ö–æ–¥", "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"
  ];

  let csvContent = headers.join(';') + '\n';
  
  products.forEach(product => {
    const row = [
      product.id,
      escapeCSVField(product.name || ''),
      escapeCSVField(product.description || ''),
      product.price ? product.price.toString().replace('.', ',') : '0',
      product.original_price ? product.original_price.toString().replace('.', ',') : '',
      product.quantity || '0',
      escapeCSVField(product.category || ''),
      product.is_available ? "–î–∞" : "–ù–µ—Ç",
      product.is_preorder ? "–î–∞" : "–ù–µ—Ç",
      product.is_rare ? "–î–∞" : "–ù–µ—Ç",
      product.is_easy_to_care ? "–î–∞" : "–ù–µ—Ç",
      new Date(product.created_at).toLocaleDateString('ru-RU')
    ];
    
    csvContent += row.join(';') + '\n';
  });
  
  return csvContent;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ CSV –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
function generateOrdersCSV(orders: Array<any>): string {
  const headers = [
    'ID',
    '–ö–ª–∏–µ–Ω—Ç',
    '–¢–µ–ª–µ—Ñ–æ–Ω',
    '–ê–¥—Ä–µ—Å',
    '–°—É–º–º–∞',
    '–î–æ—Å—Ç–∞–≤–∫–∞',
    '–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã',
    '–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã',
    '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞',
    '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'
  ];

  const paymentMethodMap: Record<string, string> = {
    'ozonpay': '–û–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∞',
    'directTransfer': '–ü—Ä—è–º–æ–π –ø–µ—Ä–µ–≤–æ–¥',
    'balance': '–ë–∞–ª–∞–Ω—Å'
  };

  const paymentStatusMap: Record<string, string> = {
    'pending': '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
    'completed': '–û–ø–ª–∞—á–µ–Ω',
    'failed': '–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã'
  };

  const orderStatusMap: Record<string, string> = {
    'pending': '–í –æ–∂–∏–¥–∞–Ω–∏–∏',
    'processing': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
    'shipped': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
    'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω',
    'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
  };

  const rows = orders.map(order => [
    order.id,
    escapeCSVField(order.full_name || ''),
    escapeCSVField(order.phone || ''),
    escapeCSVField(order.address || ''),
    `${parseFloat(order.total_amount || '0').toLocaleString('ru-RU')} ‚ÇΩ`,
    order.delivery_type === 'cdek' ? '–°–î–≠–ö' : order.delivery_type === 'pickup' ? '–°–∞–º–æ–≤—ã–≤–æ–∑' : '–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏',
    paymentMethodMap[order.payment_method] || order.payment_method,
    paymentStatusMap[order.payment_status] || order.payment_status,
    orderStatusMap[order.order_status] || order.order_status,
    new Date(order.created_at).toLocaleDateString('ru-RU')
  ]);

  return [headers, ...rows]
    .map(row => row.map(field => escapeCSVField(field.toString())).join(';'))
    .join('\n');
}