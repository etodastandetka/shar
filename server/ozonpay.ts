import crypto from 'crypto';

export interface OzonPayConfig {
  accessKey: string;
  secretKey: string;
  notificationSecretKey: string;
  apiUrl: string;
  successUrl: string;
  failUrl: string;
  webhookUrl: string;
}

export interface PaymentRequest {
  amount: number;
  currency: string;
  orderId: string;
  description: string;
  customerEmail?: string;
  customerPhone?: string;
}

export interface PaymentResponse {
  orderId: string;
  paymentUrl: string;
  status: string;
}

export interface OrderItem {
  extId: string;
  name: string;
  price: {
    currencyCode: string;
    value: number;
  };
  quantity: number;
  type: string;
  unitType: string;
  vat: string;
  needMark: boolean;
}

export class OzonPayAPI {
  private config: OzonPayConfig;

  constructor(config: OzonPayConfig) {
    this.config = config;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ createOrder —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
   * accessKey + expiresAt + extId + fiscalizationType + paymentAlgorithm + amount.currencyCode + amount.value + secretKey
   */
  private createOrderSignature(
    accessKey: string,
    expiresAt: string,
    extId: string,
    fiscalizationType: string,
    paymentAlgorithm: string,
    currencyCode: string,
    value: number,
    secretKey: string
  ): string {
    const signatureString = accessKey + expiresAt + extId + fiscalizationType + paymentAlgorithm + currencyCode + value + secretKey;
    console.log('Signature string:', signatureString);
    const signature = crypto.createHash('sha256').update(signatureString, 'utf-8').digest('hex');
    console.log('Generated signature:', signature);
    return signature;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ getOrderDetails/getOrderStatus
   * accessKey + orderId + secretKey
   */
  private createDetailsSignature(accessKey: string, orderId: string, secretKey: string): string {
    const signatureString = accessKey + orderId + secretKey;
    return crypto.createHash('sha256').update(signatureString, 'utf-8').digest('hex');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
   * SHA256(accessKey|orderID|transactionID|extOrderID|amount|currencyCode|notificationSecretKey)
   */
  verifyWebhookSignature(webhookData: any): boolean {
    const { orderID, transactionID, extOrderID, amount, currencyCode, requestSign } = webhookData;
    
    const signatureString = `${this.config.accessKey}|${orderID}|${transactionID}|${extOrderID}|${amount}|${currencyCode}|${this.config.notificationSecretKey}`;
    const calculatedSignature = crypto.createHash('sha256').update(signatureString, 'utf-8').digest('hex');
    
    return calculatedSignature === requestSign;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ Ozon Pay —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
   */
  async createPayment(paymentData: PaymentRequest, items: OrderItem[]): Promise<PaymentResponse> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
      console.log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Ozon Pay API...');
      
      const currencyCode = "643"; // RUB
      const amountValue = Math.round(paymentData.amount); // –°—É–º–º–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö –¥–ª—è OZON Pay
      const extId = `FRESH_ORDER_${Date.now()}_${paymentData.orderId}`; // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π orderId —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º
      const fiscalizationType = "FISCAL_TYPE_SINGLE";
      const paymentAlgorithm = "PAY_ALGO_SMS";
      const expiresAt = ""; // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–º–µ—Ä—É –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏

      // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∑–∞–ø—Ä–æ—Å–∞
      const requestSign = this.createOrderSignature(
        this.config.accessKey,
        expiresAt,
        extId,
        fiscalizationType,
        paymentAlgorithm,
        currencyCode,
        amountValue,
        this.config.secretKey
      );

      const requestData = {
        accessKey: this.config.accessKey,
        amount: {
          currencyCode: currencyCode,
          value: amountValue
        },
        enableFiscalization: true,
        extId: extId,
        fiscalizationType: fiscalizationType,
        paymentAlgorithm: paymentAlgorithm,
        successUrl: this.config.successUrl,
        failUrl: this.config.failUrl,
        notificationUrl: this.config.webhookUrl,
        requestSign: requestSign,
        items: items
      };

      console.log('Ozon Pay createOrder request:', JSON.stringify(requestData, null, 2));
      console.log('Ozon Pay API URL:', `${this.config.apiUrl}/createOrder`);

      const response = await fetch(`${this.config.apiUrl}/createOrder`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData),
      });

      const result = await response.json();
      console.log('Ozon Pay createOrder response status:', response.status);
      console.log('Ozon Pay createOrder response:', JSON.stringify(result, null, 2));

      // ‚ö†Ô∏è –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
      if (result.order && result.order.status === 'STATUS_PAID') {
        console.error('üö® –í–ù–ò–ú–ê–ù–ò–ï: –ó–∞–∫–∞–∑ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π —Å—Ä–∞–∑—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏!');
        console.error('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Ozon Pay - –≤–æ–∑–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º');
        console.error('Order ID:', result.order.id);
        console.error('Order Status:', result.order.status);
        console.error('Requested extId:', extId);
        console.error('Returned extId:', result.order.extId);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        if (result.order.items) {
          console.error('Returned items details:', result.order.items.map((item: any) => ({
            extId: item.extId,
            name: item.name,
            price: item.price,
            quantity: item.quantity
          })));
        }
      }
      
      if (result.order && result.order.items) {
        const requestedItems = items.length;
        const returnedItems = result.order.items.length;
        if (requestedItems !== returnedItems) {
          console.error(`üö® –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –¢–û–í–ê–†–û–í: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${requestedItems}, –ø–æ–ª—É—á–µ–Ω–æ ${returnedItems}`);
          console.error('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:', items.map(i => `${i.name} (ID: ${i.extId}, Price: ${i.price.value})`));
          console.error('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:', result.order.items.map((i: any) => `${i.name} (ID: ${i.extId}, Price: ${i.price})`));
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã —Å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
          const suspiciousItems = result.order.items.filter((returnedItem: any) => 
            !items.some(sentItem => sentItem.extId === returnedItem.extId)
          );
          
          if (suspiciousItems.length > 0) {
            console.error('üö® –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ï –¢–û–í–ê–†–´ (–Ω–µ –∏–∑ –Ω–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞):');
            suspiciousItems.forEach((item: any) => {
              console.error(`- ${item.name} (ID: ${item.extId}, Price: ${item.price})`);
            });
          }
        }
      }

      if (!response.ok) {
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å API, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É
        if (response.status === 404 || (result.message && result.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'))) {
          console.error('‚ùå Ozon Pay API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –∫–ª—é—á–∏ —É—Å—Ç–∞—Ä–µ–ª–∏');
          throw new Error('OZON_PAY_API_UNAVAILABLE');
        }
        throw new Error(`Ozon Pay API Error: ${result.message || response.statusText}`);
      }

      if (!result.order) {
        throw new Error('Invalid response format from Ozon Pay API');
      }

      return {
        orderId: result.order.id,
        paymentUrl: result.order.payLink,
        status: result.order.status
      };
    } catch (error) {
      console.error('Ozon Pay API Error:', error);
      
      // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API, –ø–µ—Ä–µ–¥–∞–µ–º –µ—ë –¥–∞–ª—å—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
      if (error instanceof Error && error.message === 'OZON_PAY_API_UNAVAILABLE') {
        throw error;
      }
      
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –≤ Ozon Pay');
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
   */
  async getOrderDetails(orderId: string, extId?: string): Promise<any> {
    try {
      const requestSign = this.createDetailsSignature(this.config.accessKey, orderId, this.config.secretKey);

      const requestData = {
        id: orderId,
        extId: extId || "",
        accessKey: this.config.accessKey,
        requestSign: requestSign
      };

      console.log('Ozon Pay getOrderDetails request:', JSON.stringify(requestData, null, 2));

      const response = await fetch(`${this.config.apiUrl}/getOrderDetails`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData),
      });

      const result = await response.json();
      console.log('Ozon Pay getOrderDetails response:', JSON.stringify(result, null, 2));

      if (!response.ok) {
        throw new Error(`Ozon Pay API Error: ${result.message || response.statusText}`);
      }

      return result;
    } catch (error) {
      console.error('Ozon Pay getOrderDetails Error:', error);
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ');
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
   */
  async getOrderStatus(orderId: string, extId?: string): Promise<any> {
    try {
      const requestSign = this.createDetailsSignature(this.config.accessKey, orderId, this.config.secretKey);

      const requestData = {
        id: orderId,
        extId: extId || "",
        accessKey: this.config.accessKey,
        requestSign: requestSign
      };

      console.log('Ozon Pay getOrderStatus request:', JSON.stringify(requestData, null, 2));

      const response = await fetch(`${this.config.apiUrl}/getOrderStatus`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData),
      });

      const result = await response.json();
      console.log('Ozon Pay getOrderStatus response:', JSON.stringify(result, null, 2));

      if (!response.ok) {
        throw new Error(`Ozon Pay API Error: ${result.message || response.statusText}`);
      }

      return result;
    } catch (error) {
      console.error('Ozon Pay getOrderStatus Error:', error);
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞');
    }
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ API
export const createOzonPayAPI = (): OzonPayAPI => {
  const config: OzonPayConfig = {
    accessKey: 'f3c0b7c9-9d17-4aa7-94b2-7106649534c3',
    secretKey: 'E6Wpm0o73sr67ZK7z6qvULn77BqG0lvR',
    notificationSecretKey: '3UrW32FscjhqAmeJhuq14eZ8hPamZlz8',
    apiUrl: 'https://payapi.ozon.ru/v1',
    successUrl: 'https://helens-jungle.ru/payment/success',
    failUrl: 'https://helens-jungle.ru/payment/fail',
    webhookUrl: 'https://helens-jungle.ru/api/ozonpay/webhook'
  };

  return new OzonPayAPI(config);
}; 