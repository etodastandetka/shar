import express from "express";
import passport from "passport";
import { Strategy as LocalStrategy } from "passport-local";
import session from "express-session";
import crypto from "crypto";
import { z } from "zod";
import { db } from "./db-sqlite";
import { 
  savePendingRegistration, 
  checkPhoneVerification, 
  getPendingRegistrationData, 
  removePendingRegistration 
} from "./phone-verification";

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º SQLite store –¥–ª—è —Å–µ—Å—Å–∏–π
const SQLiteStore = require('connect-sqlite3')(session);

// –¢–∏–ø—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export type UserRecord = {
  id: string;
  email: string;
  password: string;
  username: string | null;
  full_name: string | null;
  phone: string | null;
  address: string | null;
  is_admin: number;
  balance: string | null;
  created_at: string;
  updated_at: string;
};

export type User = {
  id: string;
  email: string;
  fullName: string;
  isAdmin: boolean;
  balance: string;
  password: string;
  socialType: null;
  createdAt: Date | null;
  phone: string;
  address: string;
  username: string;
};

// –ö—ç—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
const adminCache = new Set<string>();

// –•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
export function hashPassword(password: string): string {
  const saltRounds = 10;
  const salt = crypto.randomBytes(16).toString('hex');
  const hash = crypto.pbkdf2Sync(password, salt, 1000, 64, 'sha512').toString('hex');
  return `${salt}:${hash}`;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
export function comparePasswords(storedPassword: string, suppliedPassword: string): boolean {
  if (!storedPassword || !suppliedPassword) return false;
  
  try {
    // –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏, –∑–Ω–∞—á–∏—Ç –æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ –æ—Ç–∫—Ä—ã—Ç—ã–π —Ç–µ–∫—Å—Ç
    // (—ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏—è—Ö)
    if (!storedPassword.includes(':')) {
      console.log(`‚ö†Ô∏è –ù–ê–ô–î–ï–ù –û–¢–ö–†–´–¢–´–ô –ü–ê–†–û–õ–¨! –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é: "${storedPassword}" === "${suppliedPassword}"`);
      const match = storedPassword === suppliedPassword;
      console.log(`üîç –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –ø–∞—Ä–æ–ª—è: ${match}`);
      return match;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (salt:iterations:keylen:digest:hash)
    const parts = storedPassword.split(':');
    
    if (parts.length === 5) {
      // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: salt:iterations:keylen:digest:hash
      const [salt, iterations, keylen, digest, hash] = parts;
      const suppliedHash = crypto.pbkdf2Sync(
        suppliedPassword, 
        salt, 
        parseInt(iterations), 
        parseInt(keylen), 
        digest
      ).toString('hex');
      return hash === suppliedHash;
    } else if (parts.length === 2) {
      // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: salt:hash
      const [salt, hash] = parts;
    const suppliedHash = crypto.pbkdf2Sync(suppliedPassword, salt, 1000, 64, 'sha512').toString('hex');
    return hash === suppliedHash;
    } else {
      console.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ö–µ—à–∞ –ø–∞—Ä–æ–ª—è:', parts.length, '—á–∞—Å—Ç–µ–π');
      return false;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä–æ–ª—è:', error);
    return false;
  }
}

// –°—Ö–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
const loginSchema = z.object({
  email: z.string().email("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email"),
  password: z.string().min(1, "–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
});

const registerSchema = z.object({
  email: z.string().email("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email"),
  password: z.string().min(8, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤"),
  firstName: z.string().min(1, "–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"),
  lastName: z.string().min(1, "–§–∞–º–∏–ª–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞"),
  username: z.string().optional(),
  phone: z.string().min(1, "–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"),
  address: z.string().optional()
});

// –†–∞—Å—à–∏—Ä—è–µ–º —Ç–∏–ø—ã Express
declare global {
  namespace Express {
    interface User {
      id: string;
      email: string;
      fullName: string;
      phone: string;
      address: string;
      username: string;
      isAdmin: boolean;
      balance: string;
      [key: string]: any;
    }
  }
}

// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ë–î –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–µ—Å—Å–∏–∏
export function userRecordToSessionUser(dbUser: UserRecord): Express.User {
  // –ò–∑–≤–ª–µ–∫–∞–µ–º firstName –∏ lastName –∏–∑ full_name
  const fullNameParts = (dbUser.full_name || '').split(' ');
  const firstName = fullNameParts[0] || '';
  const lastName = fullNameParts.slice(1).join(' ') || '';
  
  return {
    id: dbUser.id,
    email: dbUser.email,
    fullName: dbUser.full_name || '',
    firstName: firstName,
    lastName: lastName,
    phone: dbUser.phone || '',
    address: dbUser.address || '',
    username: dbUser.username || '',
    isAdmin: Boolean(dbUser.is_admin),
    balance: dbUser.balance || '0.00',
    password: dbUser.password,
    socialType: null,
    createdAt: dbUser.created_at ? new Date(dbUser.created_at) : null
  };
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
export function setupAuth(app: express.Application) {
  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Å—Å–∏–π —Å SQLite —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
  app.use(session({
    secret: process.env.SESSION_SECRET || 'your-secret-key-here',
    resave: false,
    saveUninitialized: false,
    rolling: true, // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ (–ø—Ä–æ–¥–ª–µ–≤–∞–µ–º —Å—Ä–æ–∫)
    cookie: {
      secure: false,
      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 –¥–Ω–µ–π –≤–º–µ—Å—Ç–æ –≥–æ–¥–∞
      httpOnly: true
    },
    // SQLite —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–µ—Å—Å–∏–π - –ù–ï –ü–†–û–ü–ê–î–£–¢ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ!
    store: new SQLiteStore({
      db: 'sessions.sqlite',
      dir: './db',
      table: 'sessions',
      cleanup_interval: 60000, // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    }),
    name: 'sessionId'
  }));

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Passport
  app.use(passport.initialize());
  app.use(passport.session());

  // –õ–æ–∫–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  passport.use(new LocalStrategy(
    {
      usernameField: 'email',
      passwordField: 'password'
    },
    (email, password, done) => {
      try {
        console.log(`üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: ${email} —Å –ø–∞—Ä–æ–ª–µ–º: ${password.substring(0, 3)}...`);
        const user = db.queryOne("SELECT * FROM users WHERE email = ?", [email.toLowerCase()]) as UserRecord;
        
        if (!user) {
          console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –ù–ê–ô–î–ï–ù: ${email}`);
          return done(null, false, { message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }
        
        console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ${user.email}, —Ö–µ—à –ø–∞—Ä–æ–ª—è: ${user.password.substring(0, 10)}...`);

        if (!comparePasswords(user.password, password)) {
          console.log(`‚ùå –ù–ï–í–ï–†–ù–´–ô –ü–ê–†–û–õ–¨ –¥–ª—è ${email}`);
          return done(null, false, { message: "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å" });
        }

        console.log(`‚úÖ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω –¥–ª—è ${email}`);
        const sessionUser = userRecordToSessionUser(user);
        return done(null, sessionUser);
      } catch (error) {
        console.error(`üí• –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:`, error);
        return done(error);
      }
    }
  ));

  // –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ ID
  passport.serializeUser((user: Express.User, done) => {
    done(null, user.id);
  });

  // –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è - –∫–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const userCache = new Map<string, Express.User>();
  passport.deserializeUser((id: string, done) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à —Å–Ω–∞—á–∞–ª–∞
      if (userCache.has(id)) {
        const cachedUser = userCache.get(id)!;
        return done(null, cachedUser);
      }

      const user = db.queryOne("SELECT * FROM users WHERE id = ?", [id]) as UserRecord;
      if (user) {
        const sessionUser = userRecordToSessionUser(user);
        // –ö–µ—à–∏—Ä—É–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç
        userCache.set(id, sessionUser);
        setTimeout(() => userCache.delete(id), 5 * 60 * 1000);
        done(null, sessionUser);
      } else {
        done(null, null);
      }
    } catch (error) {
      done(error, null);
    }
  });

  // ENDPOINT'–´ –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –£–î–ê–õ–ï–ù–´ - —Ç–µ–ø–µ—Ä—å –æ–Ω–∏ —Ç–æ–ª—å–∫–æ –≤ routes-sqlite.ts
  // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ login endpoint

  app.post("/api/auth/login", (req, res, next) => {
    try {
      // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
      loginSchema.parse(req.body);
      
      passport.authenticate("local", (err: any, user: Express.User, info: any) => {
        if (err) {
          console.error("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:", err);
          return res.status(500).json({ 
            message: "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏" 
          });
        }

        if (!user) {
          return res.status(401).json({ 
            message: "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
            field: info?.field || "credentials"
          });
        }

        req.login(user, (err) => {
          if (err) {
            console.error("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:", err);
            return res.status(500).json({ 
              message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É" 
            });
          }

          // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const userRecord = db.queryOne("SELECT * FROM users WHERE id = ?", [user.id]) as UserRecord | null;
          if (!userRecord) {
            return res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
          }
          const fullUser = userRecordToSessionUser(userRecord);
          Object.assign(user, fullUser);
          
          return res.json({ 
            message: "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ", 
            user: {
              id: fullUser.id,
              email: fullUser.email,
              firstName: fullUser.firstName,
              lastName: fullUser.lastName,
              isAdmin: fullUser.isAdmin,
              balance: fullUser.balance
            }
          });
        });
      })(req, res, next);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({
          message: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
          errors: error.errors.map(err => ({
            path: err.path.join('.'),
            message: err.message
          }))
        });
      }
      console.error("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:", error);
      return res.status(500).json({ 
        message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" 
      });
    }
  });

  app.get("/api/auth/user", (req, res) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" });
    }
    
    const user = req.user as Express.User;

    if (!user) {
      console.error("[Auth] req.user –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ—Å–ª–µ isAuthenticated()");
      return res.status(500).json({ message: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ —Å–µ—Å—Å–∏–∏)" });
    }

    return res.json({
      user: {
        id: user.id,
        email: user.email,
        fullName: user.fullName,
        phone: user.phone,
        address: user.address,
        username: user.username,
        isAdmin: user.isAdmin,
        balance: user.balance
      },
    });
  });

  app.post("/api/auth/logout", (req, res) => {
    req.logout((err) => {
      if (err) {
        return res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã" });
      }
      res.json({ message: "–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥" });
    });
  });
}

// –ë–ï–ó–û–ü–ê–°–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö)
export function updateUserSession(req: express.Request) {
  if (!req.isAuthenticated() || !req.user) {
    console.log("[Auth] üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏");
    return Promise.resolve();
  }

  const user = req.user as Express.User;
  
  try {
    console.log(`[Auth] üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.email} (ID: ${user.id})`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    const dbUser = db.queryOne("SELECT * FROM users WHERE id = ?", [user.id]) as UserRecord | null;
    
    if (!dbUser) {
      console.log(`[Auth] ‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –°–û–•–†–ê–ù–Ø–ï–ú —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é`);
      return Promise.resolve(); // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é!
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    const prevBalance = user.balance;
    const prevIsAdmin = user.isAdmin;
    
    // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    const updatedUser = userRecordToSessionUser(dbUser);
    
    // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–ª—è –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    Object.assign(user, {
      id: updatedUser.id,
      email: updatedUser.email,
      fullName: updatedUser.fullName,
      phone: updatedUser.phone,
      address: updatedUser.address,
      username: updatedUser.username,
      isAdmin: updatedUser.isAdmin,
      balance: updatedUser.balance,
      socialType: updatedUser.socialType,
      createdAt: updatedUser.createdAt
    });
    
    // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if (prevBalance !== user.balance) {
      console.log(`[Auth] üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id} –æ–±–Ω–æ–≤–ª–µ–Ω: ${prevBalance} ‚Üí ${user.balance}`);
    }
    if (prevIsAdmin !== user.isAdmin) {
      console.log(`[Auth] üëë –°—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id} –æ–±–Ω–æ–≤–ª–µ–Ω: ${prevIsAdmin} ‚Üí ${user.isAdmin}`);
    }
    
    console.log(`[Auth] ‚úÖ –°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.email} –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ê–¥–º–∏–Ω: ${user.isAdmin}, –ë–∞–ª–∞–Ω—Å: ${user.balance}`);
    
    // –ù–ï –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é - —ç—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏
    return Promise.resolve();
    
  } catch (error) {
    console.error("[Auth] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏, –Ω–æ –°–û–•–†–ê–ù–Ø–ï–ú —Å–µ—Å—Å–∏—é:", error);
    return Promise.resolve(); // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö!
  }
}

// –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function registerUser(userData: {
  email: string;
  password: string;
  username?: string;
  fullName?: string;
  phone?: string;
  address?: string;
}): Promise<any> {
  try {
    if (!userData.email) throw new Error('Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    const emailExists = db.queryOne(
      "SELECT * FROM users WHERE email = ?",
      [userData.email.toLowerCase()]
    );
    if (emailExists) throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    const hashedPassword = hashPassword(userData.password);
    const userId = crypto.randomUUID();
    db.run(
      `INSERT INTO users (
        id, email, password, username, full_name, phone, address, balance, is_admin, created_at
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
      [
        userId,
        userData.email.toLowerCase(),
        hashedPassword,
        userData.username || userData.email.split('@')[0],
        userData.fullName || '',
        userData.phone || '',
        userData.address || '',
        '0.00',
        0,
        new Date().toISOString()
      ]
    );
    const newUser = db.queryOne("SELECT * FROM users WHERE id = ?", [userId]) as UserRecord;
    if (!newUser) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    const formattedUser = userRecordToSessionUser(newUser) as User;
    console.log(`–£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userData.email}`);
    return formattedUser;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    throw error;
  }
}

// SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const CREATE_USERS_TABLE = `
CREATE TABLE IF NOT EXISTS users (
  id TEXT PRIMARY KEY,
  email TEXT UNIQUE NOT NULL,
  password TEXT NOT NULL,
  username TEXT,
  full_name TEXT,
  phone TEXT,
  address TEXT,
  is_admin INTEGER DEFAULT 0,
  balance TEXT DEFAULT '0.00',
  created_at TEXT NOT NULL,
  updated_at TEXT
)`;

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
export async function initializeDatabase() {
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    db.run(CREATE_USERS_TABLE);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ full_name (–ª–æ–≥–∏–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏)
    const tableInfo = db.query("PRAGMA table_info(users)");
    const hasFullName = tableInfo.some((col: any) => col.name === 'full_name');
    const hasFirstName = tableInfo.some((col: any) => col.name === 'first_name');
    const hasLastName = tableInfo.some((col: any) => col.name === 'last_name');
    
    if (!hasFullName && (hasFirstName || hasLastName)) {
      // –î–æ–±–∞–≤–ª—è–µ–º full_name
      db.run("ALTER TABLE users ADD COLUMN full_name TEXT;");
      // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ
      db.run("UPDATE users SET full_name = TRIM(COALESCE(first_name, '') || ' ' || COALESCE(last_name, '')) WHERE full_name IS NULL;");
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –±–µ–∑ first_name/last_name
      db.run(`CREATE TABLE users_new (
        id TEXT PRIMARY KEY,
        email TEXT UNIQUE NOT NULL,
        password TEXT NOT NULL,
        username TEXT,
        full_name TEXT,
        phone TEXT,
        address TEXT,
        is_admin INTEGER DEFAULT 0,
        balance TEXT DEFAULT '0.00',
        created_at TEXT NOT NULL,
        updated_at TEXT
      );`);
      db.run(`INSERT INTO users_new (id, email, password, username, full_name, phone, address, is_admin, balance, created_at, updated_at)
        SELECT id, email, password, username, full_name, phone, address, is_admin, balance, created_at, updated_at FROM users;`);
      db.run("DROP TABLE users;");
      db.run("ALTER TABLE users_new RENAME TO users;");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    const adminEmail = "fortnite08qwer@gmail.com";
    const existingAdmin = db.queryOne("SELECT * FROM users WHERE email = ?", [adminEmail]);

    if (!existingAdmin) {
        console.log('–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
        const adminPassword = "Plmokn09";
        const adminUsername = "admin";
        const adminFullName = "Admin User";
        const adminPhone = "";
        const adminAddress = "";
        const adminBalance = '0.00';
        const now = new Date().toISOString();
        const userId = crypto.randomUUID();
        const hashedPassword = hashPassword(adminPassword);

        db.run(
            `INSERT INTO users (
                id, email, password, username, full_name, phone, address, is_admin, balance, created_at, updated_at
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
                userId,
                adminEmail,
                hashedPassword,
                adminUsername,
                adminFullName,
                adminPhone,
                adminAddress,
                1, // is_admin = 1
                adminBalance,
                now,
                now
            ]
        );
        console.log('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:');
        console.log(`Email: ${adminEmail}`);
        console.log(`–ü–∞—Ä–æ–ª—å: ${adminPassword}`);
    } else {
        console.log(`–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å email ${adminEmail} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`);
    }

    console.log('SQLite database initialized');
  } catch (error) {
    console.error('Error initializing SQLite database:', error);
    throw error;
  }
}

// –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
export function fastSessionLogin(req: express.Request, userData: {
  id: string;
  email: string;
  password: string;
  username: string;
  full_name: string;
  phone: string;
  address: string;
  is_admin: number;
  balance: string;
  created_at: string;
  updated_at: string;
}): Promise<Express.User> {
  return new Promise((resolve, reject) => {
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–µ—Å—Å–∏–∏ –ë–ï–ó –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î
    const sessionUser = userRecordToSessionUser(userData);
    
    // –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    req.login(sessionUser, { session: true }, (err) => {
      if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏:', err);
        reject(err);
      } else {
        console.log(`üöÄ –ë—ã—Å—Ç—Ä–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è: ${sessionUser.email}`);
        resolve(sessionUser);
      }
    });
  });
}

// –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –±—ã—Å—Ç—Ä–æ–π —Å–µ—Å—Å–∏–µ–π
export async function fastRegisterWithSession(
  req: express.Request,
  userData: {
    email: string;
    password: string;
    username: string;
    firstName: string;
    lastName: string;
    phone: string;
    address: string;
  }
): Promise<Express.User> {
  try {
    console.log(`üöÄ –ë—ã—Å—Ç—Ä–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${userData.email}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const existingUser = db.queryOne("SELECT * FROM users WHERE email = ?", [userData.email.toLowerCase()]) as UserRecord | null;
    if (existingUser) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const hashedPassword = hashPassword(userData.password);
    const userId = crypto.randomUUID();
    const now = new Date().toISOString();

    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const newUserData = {
      id: userId,
      email: userData.email.toLowerCase(),
      password: hashedPassword,
      username: userData.username,
      full_name: userData.firstName + " " + userData.lastName,
      phone: userData.phone,
      address: userData.address,
      is_admin: 0,
      balance: '0.00',
      created_at: now,
      updated_at: now
    };

    // –û–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.run(
      `INSERT INTO users (
        id, email, password, username, full_name, phone, address, 
        phone_verified, balance, is_admin, created_at, updated_at
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
      [
        newUserData.id,
        newUserData.email,
        newUserData.password,
        newUserData.username,
        newUserData.full_name,
        newUserData.phone,
        newUserData.address,
        1, // phone_verified = true
        newUserData.balance,
        newUserData.is_admin,
        newUserData.created_at,
        newUserData.updated_at
      ]
    );

    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${userData.email} (ID: ${userId})`);

    // –ë—ã—Å—Ç—Ä–æ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î
    const sessionUser = await fastSessionLogin(req, newUserData);
    
    console.log(`üéâ –ë—ã—Å—Ç—Ä–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${userData.email}`);
    return sessionUser;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    throw error;
  }
} 