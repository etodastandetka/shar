import { Telegraf, Markup } from 'telegraf';
import { markPhoneAsVerified, checkPendingRegistrations } from './phone-verification';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –±–æ—Ç–∞ (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏ startTelegramBot)
let bot: Telegraf;
let botToken: string;

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ç–∞–∫–∞—è –∂–µ, –∫–∞–∫ –≤ phone-verification.ts)
function normalizePhone(phone: string): string {
  // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ –ø–ª—é—Å–∞
  let normalized = phone.replace(/[^\d+]/g, '');
  
  // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ +7
  if (normalized.startsWith('8')) {
    normalized = '+7' + normalized.slice(1);
  }
  
  // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7 (–±–µ–∑ +), –¥–æ–±–∞–≤–ª—è–µ–º +
  if (normalized.startsWith('7') && !normalized.startsWith('+7')) {
    normalized = '+' + normalized;
  }
  
  // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +7, –Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç 11 —Ü–∏—Ñ—Ä –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7
  if (!normalized.startsWith('+') && normalized.length === 11 && normalized.startsWith('7')) {
    normalized = '+' + normalized;
  }
  
  // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç 10 —Ü–∏—Ñ—Ä (–±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã), –¥–æ–±–∞–≤–ª—è–µ–º +7
  if (!normalized.startsWith('+') && normalized.length === 10) {
    normalized = '+7' + normalized;
  }
  
  console.log(`üìû –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –≤ –±–æ—Ç–µ: "${phone}" -> "${normalized}"`);
  return normalized;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
interface OrderNotificationData {
  orderId: string;
  userName: string;
  totalAmount: number;
  paymentMethod: string;
  items: Array<{
    name: string;
    quantity: number;
    price: number;
  }>;
  orderStatus: string;
  paymentStatus: string;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
export async function sendOrderNotificationToUser(userPhone: string, orderData: OrderNotificationData): Promise<boolean> {
  if (!bot) {
    console.log('ü§ñ Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    return false;
  }
  
  try {
    // –ù–∞—Ö–æ–¥–∏–º Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const { db } = await import('./db-sqlite');
    const normalizedPhone = normalizePhone(userPhone);
    
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const user = db.queryOne(
      "SELECT * FROM users WHERE phone = ?",
      [normalizedPhone]
    ) as any;
    
    if (!user || !user.telegram_chat_id) {
      console.log(`üì± Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –Ω–æ–º–µ—Ä–∞ ${normalizedPhone}`);
      return false;
    }
    
    const message = formatOrderNotificationMessage(orderData);
    
    await bot.telegram.sendMessage(user.telegram_chat_id, message, {
      parse_mode: 'HTML'
    });
    
    console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ #${orderData.orderId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_chat_id}`);
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
export async function sendOrderStatusUpdateToUser(userPhone: string, orderData: OrderNotificationData): Promise<boolean> {
  if (!bot) {
    console.log('ü§ñ Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    return false;
  }
  
  try {
    const { db } = await import('./db-sqlite');
    const normalizedPhone = normalizePhone(userPhone);
    
    const user = db.queryOne(
      "SELECT * FROM users WHERE phone = ?",
      [normalizedPhone]
    ) as any;
    
    if (!user || !user.telegram_chat_id) {
      console.log(`üì± Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –Ω–æ–º–µ—Ä–∞ ${normalizedPhone}`);
      return false;
    }
    
    const message = formatOrderStatusMessage(orderData);
    
    await bot.telegram.sendMessage(user.telegram_chat_id, message, {
      parse_mode: 'HTML'
    });
    
    console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #${orderData.orderId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_chat_id}`);
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
    return false;
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
function formatOrderNotificationMessage(orderData: OrderNotificationData): string {
  const itemsList = orderData.items.map(item => 
    `‚Ä¢ ${item.name} x${item.quantity} - ${(item.price * item.quantity).toLocaleString('ru-RU')}‚ÇΩ`
  ).join('\n');
  
  const paymentMethodText = getPaymentMethodText(orderData.paymentMethod);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –∑–∞–∫–∞–∑ (–µ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã)
  const isCompleted = orderData.paymentStatus === 'verification';
  
  const title = isCompleted ? '‚úÖ –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!' : 'üõí –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!';
  const finalMessage = isCompleted ? 
    '–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É! –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.' :
    '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏.';
  
  return `${title}
<b>–ó–∞–∫–∞–∑ #${orderData.orderId}</b>

üå± <b>–ó–∞–∫–∞–∑–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è:</b>
${itemsList}

üí∞ <b>–û–±—â–∞—è —Å—É–º–º–∞:</b> ${orderData.totalAmount.toLocaleString('ru-RU')}‚ÇΩ
üí≥ <b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> ${paymentMethodText}

üìã <b>–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:</b> ${getOrderStatusText(orderData.orderStatus)}
üí∏ <b>–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã:</b> ${getPaymentStatusText(orderData.paymentStatus)}

${finalMessage}

üåø <i>Jungle Plants - –í–∞—à–∏ –∑–µ–ª–µ–Ω—ã–µ –¥—Ä—É–∑—å—è</i>`;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
function formatOrderStatusMessage(orderData: OrderNotificationData): string {
  return `üì¶ <b>–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #${orderData.orderId} –∏–∑–º–µ–Ω–µ–Ω</b>

üìã <b>–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:</b> ${getOrderStatusText(orderData.orderStatus)}
üí∏ <b>–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã:</b> ${getPaymentStatusText(orderData.paymentStatus)}
üí∞ <b>–°—É–º–º–∞:</b> ${orderData.totalAmount.toLocaleString('ru-RU')}‚ÇΩ

${getStatusDescription(orderData.orderStatus)}

üåø <i>Jungle Plants - –í–∞—à–∏ –∑–µ–ª–µ–Ω—ã–µ –¥—Ä—É–∑—å—è</i>`;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
function getPaymentMethodText(paymentMethod: string): string {
  switch (paymentMethod) {
    case 'ozonpay':
      return 'Ozon Pay';
    case 'balance':
      return '–ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞';
    case 'bank_transfer':
      return '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥';
    case 'card':
      return '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞';
    default:
      return paymentMethod;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
function getOrderStatusText(status: string): string {
  switch (status) {
    case 'pending':
      return '‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏';
    case 'processing':
      return '‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è';
    case 'shipped':
      return 'üöö –û—Ç–ø—Ä–∞–≤–ª–µ–Ω';
    case 'delivered':
      return '‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω';
    case 'cancelled':
      return '‚ùå –û—Ç–º–µ–Ω–µ–Ω';
    default:
      return status;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã
function getPaymentStatusText(status: string): string {
  switch (status) {
    case 'pending':
      return '‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã';
    case 'completed':
      return '‚úÖ –û–ø–ª–∞—á–µ–Ω';
    case 'failed':
      return '‚ùå –û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã';
    case 'pending_verification':
      return 'üîç –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è';
    case 'verification':
      return 'üîç –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º';
    default:
      return status;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
function getStatusDescription(status: string): string {
  switch (status) {
    case 'pending':
      return '–í–∞—à –∑–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.';
    case 'processing':
      return '–í–∞—à –∑–∞–∫–∞–∑ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ú—ã –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—Ç–µ–Ω–∏—è –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ.';
    case 'shipped':
      return '–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –í—ã –ø–æ–ª—É—á–∏—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.';
    case 'delivered':
      return '–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω! –ù–∞–¥–µ–µ–º—Å—è, –≤–∞–º –ø–æ–Ω—Ä–∞–≤—è—Ç—Å—è –≤–∞—à–∏ –Ω–æ–≤—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è.';
    case 'cancelled':
      return '–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.';
    default:
      return '';
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
export async function startTelegramBot() {
  try {
    console.log('ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...');
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞...');
    console.log('üìÅ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    botToken = process.env.TELEGRAM_BOT_TOKEN || '';
    console.log(`üîë TELEGRAM_BOT_TOKEN: ${botToken ? '–ù–ê–ô–î–ï–ù' : '–ù–ï –ù–ê–ô–î–ï–ù'}`);
    
    if (!botToken) {
      console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
      throw new Error('TELEGRAM_BOT_TOKEN is required');
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    bot = new Telegraf(botToken);

    // –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø–∞–º—è—Ç–∏)
    const userTokens = new Map<number, string>();

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å —Ç–æ–∫–µ–Ω–æ–º
    bot.command('start', async (ctx) => {
      try {
        const startCode = ctx.message.text.split(' ')[1];
        const chatId = ctx.from.id;
        
        if (startCode) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          userTokens.set(chatId, startCode);
          
          console.log(`üîë –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${startCode} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
          
          // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
          const keyboard = Markup.keyboard([
            [Markup.button.contactRequest('üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')]
          ]).resize();

          await ctx.reply(
            `üå± <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Jungle Plants!</b>\n\n` +
            `–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n` +
            `–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–∫—Å—Ç–æ–º.`,
            {
              parse_mode: 'HTML',
              ...keyboard
            }
          );
        } else {
          await ctx.reply(
            `üå± <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Jungle Plants!</b>\n\n` +
            `–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É —Å —Å–∞–π—Ç–∞.`,
            { parse_mode: 'HTML' }
          );
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
    bot.on('contact', async (ctx) => {
      try {
        const phoneNumber = ctx.message.contact.phone_number;
        const chatId = ctx.from.id;
        const userToken = userTokens.get(chatId);
        
        console.log(`üì± –ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç: ${phoneNumber} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
        console.log(`üì± –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ:`, JSON.stringify(ctx.message.contact, null, 2));
        
        if (!userToken) {
          await ctx.reply(
            `‚ùå <b>–¢–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n` +
            `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ —Å —Å–∞–π—Ç–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.`,
            { 
              parse_mode: 'HTML',
              ...Markup.removeKeyboard()
            }
          );
          return;
        }

        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
        const normalizedPhone = normalizePhone(phoneNumber);
        
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä: ${normalizedPhone} —Å —Ç–æ–∫–µ–Ω–æ–º: ${userToken}`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const pendingData = checkPendingRegistrations(userToken);
        console.log(`üîç –î–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ ${userToken}:`, pendingData);
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ
        const verified = markPhoneAsVerified(normalizedPhone, userToken);
        
        if (verified) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º Telegram chat ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          try {
            const { db } = await import('./db-sqlite');
            
            // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü telegram_chat_id –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            try {
              db.exec('ALTER TABLE users ADD COLUMN telegram_chat_id TEXT');
              console.log('‚úÖ –°—Ç–æ–ª–±–µ—Ü telegram_chat_id –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É users');
            } catch (error) {
              // –°—Ç–æ–ª–±–µ—Ü —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
              console.log('üìã –°—Ç–æ–ª–±–µ—Ü telegram_chat_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º telegram_chat_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            const updateResult = db.run(
              'UPDATE users SET telegram_chat_id = ? WHERE phone = ?',
              [chatId.toString(), normalizedPhone]
            );
            
            if (updateResult.changes > 0) {
              console.log(`‚úÖ Telegram chat ID ${chatId} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –Ω–æ–º–µ—Ä–∞ ${normalizedPhone}`);
            }
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ Telegram chat ID:', error);
          }
          
          await ctx.reply(
            `‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ!</b>\n\n` +
            `–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ <code>${phoneNumber}</code> —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.\n\n` +
            `–¢–µ–ø–µ—Ä—å –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ <b>"–Ø –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –Ω–æ–º–µ—Ä"</b> –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n` +
            `üîî –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–∞—Ö –≤ —ç—Ç–æ—Ç —á–∞—Ç.`,
            { 
              parse_mode: 'HTML',
              ...Markup.removeKeyboard()
            }
          );
          
          // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–∞–º—è—Ç–∏
          userTokens.delete(chatId);
          console.log(`‚úÖ –ù–æ–º–µ—Ä ${normalizedPhone} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
        } else {
          await ctx.reply(
            `‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n\n` +
            `–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n` +
            `‚Ä¢ –¢–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω\n` +
            `‚Ä¢ –ù–æ–º–µ—Ä –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–∞–Ω–Ω—ã–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n\n` +
            `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–Ω–æ–≤–æ –Ω–∞ —Å–∞–π—Ç–µ.`,
            { 
              parse_mode: 'HTML',
              ...Markup.removeKeyboard()
            }
          );
          console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–º–µ—Ä ${normalizedPhone} —Å —Ç–æ–∫–µ–Ω–æ–º ${userToken}`);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error);
        await ctx.reply(
          '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
          Markup.removeKeyboard()
        );
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    bot.on('text', async (ctx) => {
      try {
        const text = ctx.message.text;
        const chatId = ctx.from.id;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if (/^\+?[0-9\s\-\(\)]+$/.test(text)) {
          const userToken = userTokens.get(chatId);
          
          if (!userToken) {
            await ctx.reply(
              `‚ùå <b>–¢–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n` +
              `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ —Å —Å–∞–π—Ç–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.`,
              { parse_mode: 'HTML' }
            );
            return;
          }

          // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
          const normalizedPhone = normalizePhone(text);
          
          console.log(`üìù –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä: ${normalizedPhone} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          const pendingData = checkPendingRegistrations(userToken);
          console.log(`üîç –î–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ ${userToken}:`, pendingData);
          
          // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ
          const verified = markPhoneAsVerified(normalizedPhone, userToken);
          
          if (verified) {
            await ctx.reply(
              `‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ!</b>\n\n` +
              `–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ <code>${text}</code> —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.\n\n` +
              `–¢–µ–ø–µ—Ä—å –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ <b>"–Ø –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –Ω–æ–º–µ—Ä"</b> –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.`,
              { parse_mode: 'HTML' }
            );
            
            // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–∞–º—è—Ç–∏
            userTokens.delete(chatId);
            console.log(`‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä ${normalizedPhone} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
          } else {
            await ctx.reply(
              `‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n\n` +
              `–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–æ–¥–∏—Ç–µ —Ç–æ—Ç –∂–µ –Ω–æ–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ.\n\n` +
              `–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–Ω–æ–≤–æ.`,
              { parse_mode: 'HTML' }
            );
            console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä ${normalizedPhone} —Å —Ç–æ–∫–µ–Ω–æ–º ${userToken}`);
          }
          return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        await ctx.reply(
          `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n` +
          `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É <b>"üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"</b> –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–∫—Å—Ç–æ–º.`,
          { parse_mode: 'HTML' }
        );
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    bot.catch((err, ctx) => {
      console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', err);
      console.error('–ö–æ–Ω—Ç–µ–∫—Å—Ç:', ctx.update);
    });
    
    console.log(`üîë –¢–æ–∫–µ–Ω: ${botToken ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
    
    await bot.launch();
    
    console.log('‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞: https://t.me/${bot.botInfo?.username || 'unknown'}`);
    
    // Graceful stop
    process.once('SIGINT', () => {
      console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
      bot.stop('SIGINT');
    });
    
    process.once('SIGTERM', () => {
      console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
      bot.stop('SIGTERM');
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
    console.error('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å TELEGRAM_BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ');
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export { bot }; 