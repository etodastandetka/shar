const { Telegraf } = require('telegraf');
const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const crypto = require('crypto');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config();

// –¢–û–ö–ï–ù –ë–û–¢–ê –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || process.env.BOT_TOKEN;

if (!BOT_TOKEN) {
  console.error('‚ùå –û–®–ò–ë–ö–ê: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
  console.error('üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –¥–æ–±–∞–≤—å—Ç–µ:');
  console.error('   TELEGRAM_BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–æ—Ç_botfather');
  console.error('üí° –ò–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN');
  process.exit(1);
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new Telegraf(BOT_TOKEN);

// –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const DB_PATH = path.join(__dirname, '..', 'db', 'database.sqlite');

console.log('ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...');
console.log('üìÅ –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', DB_PATH);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
function getDatabase() {
  return new sqlite3.Database(DB_PATH, (err) => {
    if (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err.message);
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã telegram_chat_id –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
function ensureTelegramChatIdColumn() {
  const db = getDatabase();
  
  db.run(`
    ALTER TABLE users ADD COLUMN telegram_chat_id TEXT;
  `, (err) => {
    if (err && !err.message.includes('duplicate column name')) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ telegram_chat_id:', err.message);
    } else if (!err) {
      console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ telegram_chat_id –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É users');
    }
  });
  
  db.close();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É
function getUserByToken(token) {
  return new Promise((resolve, reject) => {
    const db = getDatabase();
    
    db.get(
      'SELECT * FROM users WHERE phone_verification_token = ?',
      [token],
      (err, row) => {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É:', err);
          reject(err);
        } else {
          resolve(row);
        }
        db.close();
      }
    );
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è telegram_chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function updateUserTelegramChatId(userId, chatId) {
  return new Promise((resolve, reject) => {
    const db = getDatabase();
    
    db.run(
      'UPDATE users SET telegram_chat_id = ? WHERE id = ?',
      [chatId ? chatId.toString() : null, userId],
      function(err) {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è telegram_chat_id:', err);
          reject(err);
        } else {
          if (chatId) {
            console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω telegram_chat_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${chatId}`);
          } else {
            console.log(`‚úÖ Telegram –æ—Ç–≤—è–∑–∞–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
          }
          resolve(this.changes);
        }
        db.close();
      }
    );
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø
function confirmPhoneVerification(userId, phoneNumber) {
  return new Promise((resolve, reject) => {
    const db = getDatabase();
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    let normalizedPhone = phoneNumber.replace(/[^\d+]/g, '');
    if (normalizedPhone.startsWith('8')) {
      normalizedPhone = '+7' + normalizedPhone.slice(1);
    }
    if (normalizedPhone.startsWith('7') && !normalizedPhone.startsWith('+7')) {
      normalizedPhone = '+' + normalizedPhone;
    }
    if (!normalizedPhone.startsWith('+') && normalizedPhone.length === 11 && normalizedPhone.startsWith('7')) {
      normalizedPhone = '+' + normalizedPhone;
    }
    if (!normalizedPhone.startsWith('+') && normalizedPhone.length === 10) {
      normalizedPhone = '+7' + normalizedPhone;
    }
    
    console.log(`üìû –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –û–±–Ω–æ–≤–ª—è–µ–º pending_registrations –¥–ª—è –Ω–æ–º–µ—Ä–∞: ${normalizedPhone}`);
    
    // –¢–û–õ–¨–ö–û –æ–±–Ω–æ–≤–ª—è–µ–º pending_registrations (–ù–ï —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!)
    db.run(
      'UPDATE pending_registrations SET verified = 1 WHERE phone = ?',
      [normalizedPhone],
      function(err) {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è pending_registrations:', err);
          reject(err);
        } else {
          console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ pending_registrations: ${this.changes}`);
          console.log('üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–∞ —Å–∞–π—Ç–µ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–Ø –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –Ω–æ–º–µ—Ä"');
          resolve(this.changes);
        }
        db.close();
      }
    );
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getUserOrders(userId) {
  return new Promise((resolve, reject) => {
    const db = getDatabase();
    
    db.all(
      'SELECT * FROM orders WHERE user_id = ? ORDER BY created_at DESC',
      [userId],
      (err, rows) => {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', err);
          reject(err);
        } else {
          resolve(rows || []);
        }
        db.close();
      }
    );
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_chat_id
function getUserByChatId(chatId) {
  return new Promise((resolve, reject) => {
    const db = getDatabase();
    
    db.get(
      'SELECT * FROM users WHERE telegram_chat_id = ?',
      [chatId.toString()],
      (err, row) => {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chat_id:', err);
          reject(err);
        } else {
          resolve(row);
        }
        db.close();
      }
    );
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å telegram_chat_id
function getAllUsersWithTelegram() {
  return new Promise((resolve, reject) => {
    const db = getDatabase();
    
    db.all(
      'SELECT * FROM users WHERE telegram_chat_id IS NOT NULL AND telegram_chat_id != ""',
      [],
      (err, rows) => {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Telegram:', err);
          reject(err);
        } else {
          resolve(rows || []);
        }
        db.close();
      }
    );
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É (–≤–∫–ª—é—á–∞—è —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö)
function getUserByTokenOrVerified(token) {
  return new Promise((resolve, reject) => {
    const db = getDatabase();
    
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ —Ç–æ–∫–µ–Ω—É
    db.get(
      'SELECT * FROM users WHERE phone_verification_token = ?',
      [token],
      (err, row) => {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É:', err);
          reject(err);
          db.close();
          return;
        }
        
        if (row) {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –ø–æ —Ç–æ–∫–µ–Ω—É
          resolve(row);
          db.close();
          return;
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —Ç–æ–∫–µ–Ω—É, –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–¥–∞–≤–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å
        db.get(
          'SELECT * FROM users WHERE phone_verified = 1 AND created_at > datetime("now", "-1 hour") ORDER BY created_at DESC LIMIT 1',
          [],
          (err2, row2) => {
            if (err2) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err2);
              reject(err2);
            } else {
              resolve(row2);
            }
            db.close();
          }
        );
      }
    );
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
async function findUserForVerification(token, chatId) {
  console.log(`üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:`);
  console.log(`   –¢–æ–∫–µ–Ω: ${token}`);
  console.log(`   Chat ID: ${chatId}`);
  
  const db = getDatabase();
  
  return new Promise((resolve, reject) => {
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ pending_registrations –ø–æ —Ç–æ–∫–µ–Ω—É
    db.get(
      'SELECT * FROM pending_registrations WHERE verification_token = ?',
      [token],
      (err, pendingReg) => {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ pending_registrations:', err);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫ –≤ users
        } else if (pendingReg) {
          console.log(`üìã –ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤ pending_registrations:`);
          console.log(`   –¢–µ–ª–µ—Ñ–æ–Ω: ${pendingReg.phone}`);
          console.log(`   –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: ${pendingReg.verified ? '–î–∞' : '–ù–µ—Ç'}`);
          console.log(`   –°–æ–∑–¥–∞–Ω: ${pendingReg.created_at}`);
          
          try {
            const userData = JSON.parse(pendingReg.user_data);
            console.log(`   Email: ${userData.email}`);
            
            // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users
            db.get(
              'SELECT * FROM users WHERE email = ? OR phone = ?',
              [userData.email, pendingReg.phone],
              (userErr, user) => {
                if (userErr) {
                  console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userErr);
                  db.close();
                  reject(userErr);
                  return;
                }
                
                                 if (user) {
                   console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.email}`);
                   
                   // –ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω
                   if (pendingReg.verified && !user.phone_verified) {
                     console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...`);
                     
                     // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                     db.run(
                       'UPDATE users SET phone_verified = 1, phone_verification_token = NULL WHERE id = ?',
                       [user.id],
                       function(updateErr) {
                         if (updateErr) {
                           console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', updateErr);
                         } else {
                           console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
                           user.phone_verified = 1;
                           user.phone_verification_token = null;
                         }
                         
                         db.close();
                         resolve(user);
                       }
                     );
                     return;
                   }
                   
                   db.close();
                   resolve(user);
                 } else {
                   console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ users`);
                   console.log(`üí° –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ pending_registrations...`);
                   
                   // –ù–ï –°–û–ó–î–ê–ï–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–¥–µ—Å—å! –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ /api/auth/check-phone-verification
                   console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –ù–ï —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –≤ Telegram –±–æ—Ç–µ!`);
                   console.log(`üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ /api/auth/check-phone-verification`);
                   
                   db.close();
                   resolve(null);
                   return;
                   
                 }
              }
            );
          } catch (parseErr) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', parseErr);
            db.close();
            resolve(null);
          }
          return;
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ pending_registrations, –∏—â–µ–º –≤ users –ø–æ —Ç–æ–∫–µ–Ω—É
        db.get(
          'SELECT * FROM users WHERE phone_verification_token = ?',
          [token],
          (err2, userByToken) => {
            if (err2) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–æ–∫–µ–Ω—É –≤ users:', err2);
              db.close();
              reject(err2);
              return;
            }
            
            console.log(`üìã –ü–æ–∏—Å–∫ –ø–æ —Ç–æ–∫–µ–Ω—É –≤ users: ${userByToken ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
            if (userByToken) {
              console.log(`   –ù–∞–π–¥–µ–Ω: ${userByToken.email} (ID: ${userByToken.id})`);
              console.log(`   –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: ${userByToken.phone_verified ? '–î–∞' : '–ù–µ—Ç'}`);
              console.log(`   Telegram ID: ${userByToken.telegram_chat_id || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
              db.close();
              resolve(userByToken);
              return;
            }
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —Ç–æ–∫–µ–Ω—É, –∏—â–µ–º –ø–æ chat_id
            db.get(
              'SELECT * FROM users WHERE telegram_chat_id = ?',
              [chatId.toString()],
              (err3, userByChatId) => {
                if (err3) {
                  console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ chat_id:', err3);
                  db.close();
                  reject(err3);
                  return;
                }
                
                console.log(`üìã –ü–æ–∏—Å–∫ –ø–æ chat_id: ${userByChatId ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
                if (userByChatId) {
                  console.log(`   –ù–∞–π–¥–µ–Ω: ${userByChatId.email} (ID: ${userByChatId.id})`);
                  console.log(`   –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: ${userByChatId.phone_verified ? '–î–∞' : '–ù–µ—Ç'}`);
                  db.close();
                  resolve(userByChatId);
                  return;
                }
                
                console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é');
                db.close();
                resolve(null);
              }
            );
          }
        );
      }
    );
  });
}

// –ö–û–ú–ê–ù–î–ê /start
bot.start(async (ctx) => {
  const chatId = ctx.chat.id;
  const startPayload = ctx.startPayload; // –¢–æ–∫–µ–Ω –∏–∑ —Å—Å—ã–ª–∫–∏
  
  console.log(`üì± –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}, —Ç–æ–∫–µ–Ω: ${startPayload}`);
  
  if (startPayload) {
    // –≠—Ç–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    try {
      const user = await findUserForVerification(startPayload, chatId);
      
      if (user) {
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ${user.email} (ID: ${user.id})`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∂–µ –ª–∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
        if (user.phone_verified) {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
          await updateUserTelegramChatId(user.id, chatId);
          await ctx.reply(
            `–ü—Ä–∏–≤–µ—Ç, ${user.email}!\n\n` +
            `‚úÖ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.\n` +
            `üîó –¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –±–æ—Ç—É!\n\n` +
            `üå± –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Jungle Plants!`,
            {
              reply_markup: {
                keyboard: [
                  ['–ú–æ–∏ –∑–∞–∫–∞–∑—ã', '–ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã'],
                  ['–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', '–ü–æ–º–æ—â—å']
                ],
                resize_keyboard: true
              }
            }
          );
        } else {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä
          await updateUserTelegramChatId(user.id, chatId);
          
          // –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ pending_registrations
          const db = getDatabase();
          const pendingReg = await new Promise((resolve, reject) => {
            db.get(
              'SELECT * FROM pending_registrations WHERE user_data LIKE ? AND verified = 0 ORDER BY created_at DESC LIMIT 1',
              [`%${user.email}%`],
              (err, row) => {
                if (err) {
                  console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ pending_registration:', err);
                  reject(err);
                } else {
                  resolve(row);
                }
                db.close();
              }
            );
          });
          
          let expectedPhoneMessage = '';
          if (pendingReg && pendingReg.phone) {
            expectedPhoneMessage = `\n\nüîç –û–∂–∏–¥–∞–µ–º—ã–π –Ω–æ–º–µ—Ä: ${pendingReg.phone}`;
          }
          
          await ctx.reply(
            `–ü—Ä–∏–≤–µ—Ç, ${user.email}!\n\n` +
            `üì± –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.` +
            expectedPhoneMessage +
            `\n\n‚ö†Ô∏è –í–∞–∂–Ω–æ: –Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!`,
            {
              reply_markup: {
                keyboard: [
                  [{ text: 'üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', request_contact: true }]
                ],
                resize_keyboard: true,
                one_time_keyboard: true
              }
            }
          );
        }
      } else {
        console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç–æ–∫–µ–Ω–∞: ${startPayload}`);
        await ctx.reply(
          'üîç –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à—É —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å.\n\n' +
          'üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n' +
          '1Ô∏è‚É£ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ –Ω–∞ —Å–∞–π—Ç–µ\n' +
          '2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏\n' +
          '3Ô∏è‚É£ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n' +
          'üåê –°–∞–π—Ç: https://helens-jungle.ru\n' +
          'üìû –ö–∞–Ω–∞–ª: @helensjungle'
        );
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
      await ctx.reply(
        '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏.\n\n' +
        'üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n' +
        '‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ\n' +
        '‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n' +
        'üåê https://helens-jungle.ru'
      );
    }
  } else {
    // –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await ctx.reply(
      'üå± –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Jungle Plants!\n\n' +
      'üìã –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n' +
      'üõí –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–≤–æ–∏—Ö –∑–∞–∫–∞–∑–æ–≤\n' +
      'üÜï –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö\n' +
      'üåê –ë—ã—Å—Ç—Ä–æ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç\n\n' +
      'üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      {
        reply_markup: {
          keyboard: [
            ['üõí –ú–æ–∏ –∑–∞–∫–∞–∑—ã', 'üÜï –ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã'],
            ['üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', '‚ùì –ü–æ–º–æ—â—å']
          ],
          resize_keyboard: true
        }
      }
    );
  }
});

// –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ù–¢–ê–ö–¢–ê (–Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞)
bot.on('contact', async (ctx) => {
  const chatId = ctx.chat.id;
  const contact = ctx.message.contact;
  const phoneNumber = contact.phone_number;
  
  console.log(`üì± –ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}: ${phoneNumber}`);
  
  try {
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chat_id
    const user = await getUserByChatId(chatId);
    
    if (!user) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.');
      return;
    }
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    let normalizedReceivedPhone = phoneNumber.replace(/[^\d+]/g, '');
    if (normalizedReceivedPhone.startsWith('8')) {
      normalizedReceivedPhone = '+7' + normalizedReceivedPhone.slice(1);
    }
    if (normalizedReceivedPhone.startsWith('7') && !normalizedReceivedPhone.startsWith('+7')) {
      normalizedReceivedPhone = '+' + normalizedReceivedPhone;
    }
    if (!normalizedReceivedPhone.startsWith('+') && normalizedReceivedPhone.length === 11 && normalizedReceivedPhone.startsWith('7')) {
      normalizedReceivedPhone = '+' + normalizedReceivedPhone;
    }
    if (!normalizedReceivedPhone.startsWith('+') && normalizedReceivedPhone.length === 10) {
      normalizedReceivedPhone = '+7' + normalizedReceivedPhone;
    }
    
    console.log(`üìû –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: ${normalizedReceivedPhone}`);
    
    // –ò—â–µ–º pending_registration –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const db = getDatabase();
    const pendingReg = await new Promise((resolve, reject) => {
      db.get(
        'SELECT * FROM pending_registrations WHERE user_data LIKE ? AND verified = 0 ORDER BY created_at DESC LIMIT 1',
        [`%${user.email}%`],
        (err, row) => {
          if (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ pending_registration:', err);
            reject(err);
          } else {
            resolve(row);
          }
          db.close();
        }
      );
    });
    
    if (!pendingReg) {
      await ctx.reply(
        '‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n' +
        'üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ –Ω–∞ —Å–∞–π—Ç–µ:\n' +
        'üåê https://helens-jungle.ru'
      );
      return;
    }
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä –∏–∑ pending_registrations
    let expectedPhone = pendingReg.phone.replace(/[^\d+]/g, '');
    if (expectedPhone.startsWith('8')) {
      expectedPhone = '+7' + expectedPhone.slice(1);
    }
    if (expectedPhone.startsWith('7') && !expectedPhone.startsWith('+7')) {
      expectedPhone = '+' + expectedPhone;
    }
    if (!expectedPhone.startsWith('+') && expectedPhone.length === 11 && expectedPhone.startsWith('7')) {
      expectedPhone = '+' + expectedPhone;
    }
    if (!expectedPhone.startsWith('+') && expectedPhone.length === 10) {
      expectedPhone = '+7' + expectedPhone;
    }
    
    console.log(`üìã –û–∂–∏–¥–∞–µ–º—ã–π –Ω–æ–º–µ—Ä –∏–∑ pending_registrations: ${expectedPhone}`);
    console.log(`üì± –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: ${normalizedReceivedPhone}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞—é—Ç –ª–∏ –Ω–æ–º–µ—Ä–∞
    if (normalizedReceivedPhone !== expectedPhone) {
      await ctx.reply(
        `‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!\n\n` +
        `üîç –û–∂–∏–¥–∞–ª—Å—è: ${expectedPhone}\n` +
        `üì± –ü–æ–ª—É—á–µ–Ω: ${normalizedReceivedPhone}\n\n` +
        `üí° –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç —Å –Ω–æ–º–µ—Ä–æ–º ${expectedPhone} –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ.`
      );
      return;
    }
    
    // –ù–æ–º–µ—Ä–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
    await confirmPhoneVerification(user.id, normalizedReceivedPhone);
    
    await ctx.reply(
      '‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n' +
      'üîÑ –¢–µ–ø–µ—Ä—å –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ —Å–∞–π—Ç–µ:\n' +
      'üåê https://helens-jungle.ru\n\n' +
      `üìß Email: ${user.email}\n` +
      `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${normalizedReceivedPhone}\n\n` +
      '–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ!',
      {
        reply_markup: {
          keyboard: [
            ['–ú–æ–∏ –∑–∞–∫–∞–∑—ã', '–ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã'],
            ['–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', '–ü–æ–º–æ—â—å']
          ],
          resize_keyboard: true
        }
      }
    );
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –ö–û–ú–ê–ù–î–ê /orders –∏ –∫–Ω–æ–ø–∫–∞ "–ú–æ–∏ –∑–∞–∫–∞–∑—ã"
async function handleOrdersCommand(ctx) {
  const chatId = ctx.chat.id;
  
  try {
    const user = await getUserByChatId(chatId);
    
    if (!user) {
      await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ.');
      return;
    }
    
    const orders = await getUserOrders(user.id);
    
    if (orders.length === 0) {
      await ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.\n\n–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥: https://helens-jungle.ru/catalog');
    } else {
      let ordersList = '–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n';
      
      orders.forEach((order, index) => {
        const date = new Date(order.created_at).toLocaleString('ru-RU');
        const status = order.status || '–Ω–æ–≤—ã–π';
        const total = order.total_amount || 0;
        
        ordersList += `${index + 1}. –ó–∞–∫–∞–∑ #${order.id}\n`;
        ordersList += `–î–∞—Ç–∞: ${date}\n`;
        ordersList += `–°—É–º–º–∞: ${total} —Ä—É–±.\n`;
        ordersList += `–°—Ç–∞—Ç—É—Å: ${status}\n\n`;
      });
      
      await ctx.reply(ordersList);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

bot.command('orders', handleOrdersCommand);
bot.hears('–ú–æ–∏ –∑–∞–∫–∞–∑—ã', handleOrdersCommand);
bot.hears('üõí –ú–æ–∏ –∑–∞–∫–∞–∑—ã', handleOrdersCommand);

// –ö–û–ú–ê–ù–î–ê /unlink - –æ—Ç–≤—è–∑–∫–∞ –æ—Ç –±–æ—Ç–∞
async function handleUnlinkCommand(ctx) {
  const chatId = ctx.chat.id;
  
  try {
    const user = await getUserByChatId(chatId);
    
    if (!user) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.');
      return;
    }
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–≤—è–∑–∫–∏
    await ctx.reply(
      '‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤—è–∑–∞—Ç—å —ç—Ç–æ—Ç Telegram –æ—Ç —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞?\n\n' +
      '‚ùó –ü–æ—Å–ª–µ –æ—Ç–≤—è–∑–∫–∏ –≤—ã –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö.\n\n' +
      '–û—Ç–ø—Ä–∞–≤—å—Ç–µ "–î–ê" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã.',
      { reply_markup: { remove_keyboard: true } }
    );
    
    // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    bot.hears(/^(–¥–∞|–î–ê|yes|YES)$/i, async (confirmCtx) => {
      if (confirmCtx.chat.id !== chatId) return; // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      
      try {
        // –û—Ç–≤—è–∑—ã–≤–∞–µ–º telegram_chat_id
        await updateUserTelegramChatId(user.id, null);
        
        await confirmCtx.reply(
          '‚úÖ Telegram —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞!\n\n' +
          'üîÑ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–Ω–æ–≤–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –±–æ—Ç–∞, –ø–µ—Ä–µ–π–¥—è –≤ –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ —Å–∞–π—Ç–µ.\n\n' +
          'üåê –°–∞–π—Ç: https://russkii-portal.ru/profile'
        );
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤—è–∑–∫–∏:', error);
        await confirmCtx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤—è–∑–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã unlink:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

bot.command('unlink', handleUnlinkCommand);

// –ö–û–ú–ê–ù–î–ê /help –∏ –∫–Ω–æ–ø–∫–∞ "–ü–æ–º–æ—â—å"
async function handleHelpCommand(ctx) {
  await ctx.reply(
    '–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É Jungle Plants\n\n' +
    '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
    '/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n' +
    '/orders - –ú–æ–∏ –∑–∞–∫–∞–∑—ã\n' +
    '/unlink - –û—Ç–≤—è–∑–∞—Ç—å Telegram –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞\n' +
    '/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n' +
    '/site - –°—Å—ã–ª–∫–∏ –Ω–∞ —Å–∞–π—Ç\n\n' +
    '–ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é:\n' +
    '–ú–æ–∏ –∑–∞–∫–∞–∑—ã - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤\n' +
    '–ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–≤–∏–Ω–∫–∞—Ö\n' +
    '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç - –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç\n\n' +
    '–ü–æ–¥–¥–µ—Ä–∂–∫–∞: @helensjungle'
  );
}

bot.command('help', handleHelpCommand);
bot.hears('–ü–æ–º–æ—â—å', handleHelpCommand);
bot.hears('‚ùì –ü–æ–º–æ—â—å', handleHelpCommand);

// –ö–û–ú–ê–ù–î–ê /site –∏ –∫–Ω–æ–ø–∫–∞ "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç"
async function handleSiteCommand(ctx) {
  await ctx.reply(
    '–°—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç:\n\n' +
    '–ì–ª–∞–≤–Ω–∞—è: https://helens-jungle.ru\n' +
    '–ö–∞—Ç–∞–ª–æ–≥: https://helens-jungle.ru/catalog\n' +
    '–ö–æ—Ä–∑–∏–Ω–∞: https://helens-jungle.ru/cart\n' +
    '–ü—Ä–æ—Ñ–∏–ª—å: https://helens-jungle.ru/profile\n\n' +
    'Telegram –∫–∞–Ω–∞–ª: @helensjungle'
  );
}

bot.command('site', handleSiteCommand);
bot.hears('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', handleSiteCommand);
bot.hears('üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', handleSiteCommand);

// –ö–Ω–æ–ø–∫–∞ "–ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã"
async function handleNewProductsCommand(ctx) {
  await ctx.reply(
    'üÜï –ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã\n\n' +
    'üå± –ú—ã —Ä–µ–≥—É–ª—è—Ä–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –≤ –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥!\n' +
    'üîî –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Å–µ—Ö –Ω–æ–≤–∏–Ω–∫–∞—Ö.\n\n' +
    'üõí –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥: https://helens-jungle.ru/catalog\n' +
    'üì¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏: @helensjungle'
  );
}

bot.hears('–ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã', handleNewProductsCommand);
bot.hears('üÜï –ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã', handleNewProductsCommand);

// –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô (—ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö)

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async function sendOrderNotificationToUser(userId, orderData) {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
    const db = getDatabase();
    const user = await new Promise((resolve, reject) => {
      db.get(
        'SELECT * FROM users WHERE id = ? AND telegram_chat_id IS NOT NULL AND telegram_chat_id != ""',
        [userId],
        (err, row) => {
          if (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID:', err);
            reject(err);
          } else {
            resolve(row);
          }
          db.close();
        }
      );
    });
    
    if (!user || !user.telegram_chat_id) {
      console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç Telegram`);
      return false;
    }

    const message = `–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n` +
      `–ó–∞–∫–∞–∑ #${orderData.orderId}\n` +
      `–°—É–º–º–∞: ${orderData.totalAmount} —Ä—É–±.\n` +
      `–î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}\n\n` +
      `–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å: /orders\n` +
      `–°–∞–π—Ç: https://helens-jungle.ru/profile`;

    await bot.telegram.sendMessage(user.telegram_chat_id, message);
    console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error);
    return false;
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
async function sendOrderStatusUpdateToUser(userId, orderData) {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
    const db = getDatabase();
    const user = await new Promise((resolve, reject) => {
      db.get(
        'SELECT * FROM users WHERE id = ? AND telegram_chat_id IS NOT NULL AND telegram_chat_id != ""',
        [userId],
        (err, row) => {
          if (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID:', err);
            reject(err);
          } else {
            resolve(row);
          }
          db.close();
        }
      );
    });
    
    if (!user || !user.telegram_chat_id) {
      console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç Telegram`);
      return false;
    }

    const message = `–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞\n\n` +
      `–ó–∞–∫–∞–∑ #${orderData.orderId}\n` +
      `–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ${orderData.status}\n` +
      `–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}\n\n` +
      `–í—Å–µ –∑–∞–∫–∞–∑—ã: /orders\n` +
      `–°–∞–π—Ç: https://helens-jungle.ru/profile`;

    await bot.telegram.sendMessage(user.telegram_chat_id, message);
    console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error);
    return false;
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Ç–æ–≤–∞—Ä–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async function sendNewProductNotificationToAllUsers(productData) {
  try {
    const users = await getAllUsersWithTelegram();
    console.log(`üì¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Ç–æ–≤–∞—Ä–µ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º`);
    
    let sentCount = 0;
    
    const message = `–ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä –≤ –∫–∞—Ç–∞–ª–æ–≥–µ!\n\n` +
      `${productData.productName}\n` +
      `–¶–µ–Ω–∞: ${productData.productPrice} —Ä—É–±.\n` +
      `–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${productData.productCategory}\n` +
      `${productData.productDescription}\n\n` +
      `–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å: https://helens-jungle.ru/product/${productData.productId}\n` +
      `–ö–∞—Ç–∞–ª–æ–≥: https://helens-jungle.ru/catalog`;

    for (const user of users) {
      try {
        await bot.telegram.sendMessage(user.telegram_chat_id, message);
        sentCount++;
        console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id} (${user.email})`);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        await new Promise(resolve => setTimeout(resolve, 100));
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}:`, error);
      }
    }
    
    console.log(`üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Ç–æ–≤–∞—Ä–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sentCount}/${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º`);
    return sentCount;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤–æ–º —Ç–æ–≤–∞—Ä–µ:', error);
    return 0;
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async function sendUserOrdersStatus(chatId) {
  try {
    const user = await getUserByChatId(chatId);
    if (!user) {
      await bot.telegram.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ.');
      return false;
    }
    
    const orders = await getUserOrders(user.id);
    
    if (orders.length === 0) {
      await bot.telegram.sendMessage(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.\n\n–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥: https://helens-jungle.ru/catalog');
    } else {
      let ordersList = '–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n';
      
      orders.forEach((order, index) => {
        const date = new Date(order.created_at).toLocaleString('ru-RU');
        const status = order.status || '–Ω–æ–≤—ã–π';
        const total = order.total_amount || 0;
        
        ordersList += `${index + 1}. –ó–∞–∫–∞–∑ #${order.id}\n`;
        ordersList += `–î–∞—Ç–∞: ${date}\n`;
        ordersList += `–°—É–º–º–∞: ${total} —Ä—É–±.\n`;
        ordersList += `–°—Ç–∞—Ç—É—Å: ${status}\n\n`;
      });
      
      await bot.telegram.sendMessage(chatId, ordersList);
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–æ–≤:', error);
    return false;
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:', err);
  console.error('–ö–æ–Ω—Ç–µ–∫—Å—Ç:', ctx.update);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function startBot() {
  try {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫—É telegram_chat_id –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    ensureTelegramChatIdColumn();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await bot.launch();
    
    console.log('‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log('üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞: https://t.me/jungle_plants_bot');
    console.log('üì± –î–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: https://t.me/jungle_plants_bot?start=TOKEN');
    
    // Graceful stop
    process.once('SIGINT', () => bot.stop('SIGINT'));
    process.once('SIGTERM', () => bot.stop('SIGTERM'));
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
    process.exit(1);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
module.exports = {
  sendOrderNotificationToUser,
  sendOrderStatusUpdateToUser,
  sendNewProductNotificationToAllUsers,
  sendUserOrdersStatus,
  bot
};

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞, –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  startBot();
} 