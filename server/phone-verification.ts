import Database from 'better-sqlite3';
import path from 'path';

const dbPath = path.join(process.cwd(), 'db', 'database.sqlite');
const db = new Database(dbPath);

// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
db.exec(`
  CREATE TABLE IF NOT EXISTS pending_registrations (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    phone TEXT NOT NULL,
    user_data TEXT NOT NULL,
    verification_token TEXT NOT NULL,
    verified INTEGER DEFAULT 0,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
  )
`);

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
function normalizePhone(phone: string): string {
  // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ –ø–ª—é—Å–∞
  let normalized = phone.replace(/[^\d+]/g, '');
  
  // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ +7
  if (normalized.startsWith('8')) {
    normalized = '+7' + normalized.slice(1);
  }
  
  // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7 (–±–µ–∑ +), –¥–æ–±–∞–≤–ª—è–µ–º +
  if (normalized.startsWith('7') && !normalized.startsWith('+7')) {
    normalized = '+' + normalized;
  }
  
  // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +7, –Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç 11 —Ü–∏—Ñ—Ä –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7
  if (!normalized.startsWith('+') && normalized.length === 11 && normalized.startsWith('7')) {
    normalized = '+' + normalized;
  }
  
  // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç 10 —Ü–∏—Ñ—Ä (–±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã), –¥–æ–±–∞–≤–ª—è–µ–º +7
  if (!normalized.startsWith('+') && normalized.length === 10) {
    normalized = '+7' + normalized;
  }
  
  console.log(`üìû –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞: "${phone}" -> "${normalized}"`);
  return normalized;
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å —Ç–æ–∫–µ–Ω–æ–º
export function savePendingRegistration(phone: string, userData: any, verificationToken: string): boolean {
  try {
    const normalizedPhone = normalizePhone(phone);
    
    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:`);
    console.log(`   –ò—Å—Ö–æ–¥–Ω—ã–π –Ω–æ–º–µ—Ä: ${phone}`);
    console.log(`   –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: ${normalizedPhone}`);
    console.log(`   –¢–æ–∫–µ–Ω: ${verificationToken}`);
    console.log(`   –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, userData);
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    const deleteStmt = db.prepare('DELETE FROM pending_registrations WHERE phone = ?');
    const deleteResult = deleteStmt.run(normalizedPhone);
    console.log(`   –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π: ${deleteResult.changes}`);
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    const insertStmt = db.prepare(`
      INSERT INTO pending_registrations (phone, user_data, verification_token, verified)
      VALUES (?, ?, ?, 0)
    `);
    
    const result = insertStmt.run(normalizedPhone, JSON.stringify(userData), verificationToken);
    console.log(`   –í—Å—Ç–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${result.changes}`);
    console.log(`   ID –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏: ${result.lastInsertRowid}`);
    
    const success = result.changes > 0;
    console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç: ${success ? '–£–°–ü–ï–®–ù–û' : '–û–®–ò–ë–ö–ê'}`);
    
    return success;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    return false;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
export function checkPhoneVerification(phone: string, verificationToken: string): boolean {
  try {
    const normalizedPhone = normalizePhone(phone);
    
    const stmt = db.prepare(`
      SELECT verified FROM pending_registrations 
      WHERE phone = ? AND verification_token = ?
    `);
    
    const result = stmt.get(normalizedPhone, verificationToken) as { verified: number } | undefined;
    return result ? result.verified === 1 : false;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
    return false;
  }
}

// –ü–æ–º–µ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–≥–æ —Å —Ç–æ–∫–µ–Ω–æ–º
export function markPhoneAsVerified(phone: string, verificationToken: string): boolean {
  try {
    const normalizedPhone = normalizePhone(phone);
    
    console.log(`üîç –ü–û–ü–´–¢–ö–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø –¢–ï–õ–ï–§–û–ù–ê:`);
    console.log(`   –ò—Å—Ö–æ–¥–Ω—ã–π –Ω–æ–º–µ—Ä: "${phone}"`);
    console.log(`   –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: "${normalizedPhone}"`);
    console.log(`   –¢–æ–∫–µ–Ω: "${verificationToken}"`);
    
    // 1. –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω–æ –ø–æ –Ω–æ–º–µ—Ä—É –∏ —Ç–æ–∫–µ–Ω—É
    let stmt = db.prepare(`
      SELECT * FROM pending_registrations 
      WHERE phone = ? AND verification_token = ?
    `);
    
    let result = stmt.get(normalizedPhone, verificationToken) as any;
    console.log(`   –ü–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω–æ–º—É –Ω–æ–º–µ—Ä—É –∏ —Ç–æ–∫–µ–Ω—É:`, result ? '–ù–ê–ô–î–ï–ù–û' : '–ù–ï –ù–ê–ô–î–ï–ù–û');
    
    // 2. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º —Ç–æ–ª—å–∫–æ –ø–æ —Ç–æ–∫–µ–Ω—É
    if (!result) {
      console.log(`   –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç–æ–ª—å–∫–æ –ø–æ —Ç–æ–∫–µ–Ω—É...`);
      stmt = db.prepare(`
        SELECT * FROM pending_registrations 
        WHERE verification_token = ?
      `);
      
      result = stmt.get(verificationToken) as any;
      console.log(`   –ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ —Ç–æ–∫–µ–Ω—É:`, result ? '–ù–ê–ô–î–ï–ù–û' : '–ù–ï –ù–ê–ô–î–ï–ù–û');
      
      if (result && result.phone) {
        console.log(`   –ù–∞–π–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –≤ –±–∞–∑–µ: "${result.phone}"`);
        console.log(`   –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤: "${normalizedPhone}" vs "${result.phone}"`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–æ–º–µ—Ä–∞
        const phoneVariants = [
          phone,
          normalizedPhone,
          phone.replace(/[^\d]/g, ''), // —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
          '+7' + phone.replace(/[^\d]/g, '').slice(-10), // +7 + –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ü–∏—Ñ—Ä
          '8' + phone.replace(/[^\d]/g, '').slice(-10), // 8 + –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ü–∏—Ñ—Ä
        ];
        
        console.log(`   –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã:`, phoneVariants);
        
        // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –≤ –±–∞–∑–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–¥–Ω–∏–º –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        if (phoneVariants.includes(result.phone)) {
          console.log(`   ‚úÖ –ù–æ–º–µ—Ä —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–¥–Ω–∏–º –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤`);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
          const updateStmt = db.prepare(`
            UPDATE pending_registrations 
            SET verified = 1 
            WHERE verification_token = ?
          `);
          
          const updateResult = updateStmt.run(verificationToken);
          console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${updateResult.changes}`);
          return updateResult.changes > 0;
        }
      }
    }
    
    // 3. –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ —Ç–æ—á–Ω–∞—è –∑–∞–ø–∏—Å—å, –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë
    if (result) {
      console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);
      
      const updateStmt = db.prepare(`
        UPDATE pending_registrations 
        SET verified = 1 
        WHERE phone = ? AND verification_token = ?
      `);
      
      const updateResult = updateStmt.run(normalizedPhone, verificationToken);
      console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${updateResult.changes}`);
      return updateResult.changes > 0;
    }
    
    // 4. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –µ—Å—Ç—å –≤ –±–∞–∑–µ
    console.log(`   ‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ pending registrations:`);
    const allStmt = db.prepare('SELECT * FROM pending_registrations ORDER BY created_at DESC LIMIT 5');
    const allResults = allStmt.all() as any[];
    
    allResults.forEach((record: any, index: number) => {
      console.log(`   ${index + 1}. Phone: "${record.phone}", Token: "${record.verification_token}", Verified: ${record.verified}`);
    });
    
    return false;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', error);
    return false;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å —Ç–æ–∫–µ–Ω–æ–º
export function getPendingRegistrationData(phone: string, verificationToken: string): any | null {
  try {
    const normalizedPhone = normalizePhone(phone);
    
    const stmt = db.prepare(`
      SELECT user_data FROM pending_registrations 
      WHERE phone = ? AND verification_token = ? AND verified = 1
    `);
    
    const result = stmt.get(normalizedPhone, verificationToken) as { user_data: string } | undefined;
    return result ? JSON.parse(result.user_data) : null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    return null;
  }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏ —Å —Ç–æ–∫–µ–Ω–æ–º
export function removePendingRegistration(phone: string, verificationToken: string): boolean {
  try {
    const normalizedPhone = normalizePhone(phone);
    
    const stmt = db.prepare('DELETE FROM pending_registrations WHERE phone = ? AND verification_token = ?');
    const result = stmt.run(normalizedPhone, verificationToken);
    return result.changes > 0;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    return false;
  }
}

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
export function cleanupOldRegistrations(): number {
  try {
    const stmt = db.prepare(`
      DELETE FROM pending_registrations 
      WHERE created_at < datetime('now', '-24 hours')
    `);
    
    const result = stmt.run();
    return result.changes;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π:', error);
    return 0;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ Telegram –±–æ—Ç–µ)
export function getVerificationTokenByPhone(phone: string): string | null {
  try {
    const normalizedPhone = normalizePhone(phone);
    
    const stmt = db.prepare(`
      SELECT verification_token FROM pending_registrations 
      WHERE phone = ? AND verified = 0
      ORDER BY created_at DESC
      LIMIT 1
    `);
    
    const result = stmt.get(normalizedPhone) as { verification_token: string } | undefined;
    return result ? result.verification_token : null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ —Ç–æ–∫–µ–Ω—É
export function checkPendingRegistrations(verificationToken: string): any {
  try {
    const stmt = db.prepare(`
      SELECT * FROM pending_registrations 
      WHERE verification_token = ?
    `);
    
    const result = stmt.get(verificationToken);
    return result;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–ø–∏—Å–µ–π:', error);
    return null;
  }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
cleanupOldRegistrations();