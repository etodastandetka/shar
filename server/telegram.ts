import { db } from './db-sqlite';

interface TelegramSettings {
  bot_token: string;
  chat_id: string;
  enable_notifications: boolean;
}

interface OrderData {
  id: number;
  userId: string;
  userName: string;
  userEmail: string;
  userPhone: string;
  totalAmount: number;
  paymentMethod: string;
  deliveryAddress: string;
  items: Array<{
    name: string;
    quantity: number;
    price: number;
  }>;
  createdAt: string;
}

export class TelegramService {
  private static instance: TelegramService;
  
  public static getInstance(): TelegramService {
    if (!TelegramService.instance) {
      TelegramService.instance = new TelegramService();
    }
    return TelegramService.instance;
  }
  
  private async getSettings(): Promise<TelegramSettings | null> {
    try {
      const settings = db.queryOne("SELECT * FROM telegram_settings LIMIT 1") as TelegramSettings | null;
      return settings;
    } catch (error) {
      console.error("Error fetching telegram settings:", error);
      return null;
    }
  }
  
  private async sendMessage(botToken: string, chatId: string, message: string): Promise<boolean> {
    try {
      const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: message,
          parse_mode: 'HTML',
          disable_web_page_preview: true
        })
      });
      
      if (!response.ok) {
        const error = await response.json();
        console.error("Telegram API error:", error);
        return false;
      }
      
      console.log("Telegram message sent successfully");
      return true;
    } catch (error) {
      console.error("Error sending telegram message:", error);
      return false;
    }
  }
  
  public async sendOrderNotification(orderData: OrderData): Promise<boolean> {
    try {
      const settings = await this.getSettings();
      
      if (!settings || !settings.enable_notifications || !settings.bot_token || !settings.chat_id) {
        console.log("Telegram notifications disabled or not configured");
        return false;
      }
      
      const message = this.formatOrderMessage(orderData);
      return await this.sendMessage(settings.bot_token, settings.chat_id, message);
    } catch (error) {
      console.error("Error sending order notification:", error);
      return false;
    }
  }
  
  public async sendPaymentNotification(orderData: OrderData, paymentStatus: string): Promise<boolean> {
    try {
      const settings = await this.getSettings();
      
      if (!settings || !settings.enable_notifications || !settings.bot_token || !settings.chat_id) {
        console.log("Telegram notifications disabled or not configured");
        return false;
      }
      
      const message = this.formatPaymentMessage(orderData, paymentStatus);
      return await this.sendMessage(settings.bot_token, settings.chat_id, message);
    } catch (error) {
      console.error("Error sending payment notification:", error);
      return false;
    }
  }

  public async sendPaymentProofNotification(orderData: OrderData): Promise<boolean> {
    try {
      const settings = await this.getSettings();
      
      if (!settings || !settings.enable_notifications || !settings.bot_token || !settings.chat_id) {
        console.log("Telegram notifications disabled or not configured");
        return false;
      }
      
      const message = `üìÑ *–ó–∞–≥—Ä—É–∂–µ–Ω —á–µ–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!*\n\n` +
        `üõí *–ó–∞–∫–∞–∑:* #${orderData.id}\n` +
        `üë§ *–ö–ª–∏–µ–Ω—Ç:* ${orderData.userName}\n` +
        `üìß *Email:* ${orderData.userEmail}\n` +
        `üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${orderData.userPhone}\n` +
        `üí∞ *–°—É–º–º–∞:* ${orderData.totalAmount}‚ÇΩ\n\n` +
        `‚ö†Ô∏è *–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–∫–∞ –Ω–∞ —Å–∞–π—Ç–µ!*\n` +
        `üëâ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞.`;
      
      return await this.sendMessage(settings.bot_token, settings.chat_id, message);
    } catch (error) {
      console.error("Error sending payment proof notification:", error);
      return false;
    }
  }
  
  public async testConnection(botToken: string, chatId: string): Promise<{ success: boolean; message: string }> {
    try {
      const testMessage = "ü§ñ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Jungle Plants</b>\n\n–°–≤—è–∑—å —Å Telegram-–±–æ—Ç–æ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!";
      
      const success = await this.sendMessage(botToken, chatId, testMessage);
      
      if (success) {
        return { success: true, message: "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!" };
      } else {
        return { success: false, message: "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è" };
      }
    } catch (error) {
      console.error("Error testing telegram connection:", error);
      return { success: false, message: `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}` };
    }
  }
  
  private formatOrderMessage(orderData: OrderData): string {
    const itemsList = orderData.items.map(item => 
      `‚Ä¢ ${item.name} x${item.quantity} - ${item.price * item.quantity}‚ÇΩ`
    ).join('\n');
    
    const paymentMethodText = this.getPaymentMethodText(orderData.paymentMethod);
    
    return `üõí <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó #${orderData.id}</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b>
${orderData.userName}
üìß ${orderData.userEmail}
üì± ${orderData.userPhone}

üì¶ <b>–¢–æ–≤–∞—Ä—ã:</b>
${itemsList}

üí∞ <b>–°—É–º–º–∞:</b> ${orderData.totalAmount}‚ÇΩ
üí≥ <b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> ${paymentMethodText}

üöö <b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b>
${orderData.deliveryAddress}

üìÖ <b>–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:</b> ${new Date(orderData.createdAt).toLocaleString('ru-RU')}`;
  }
  
  private formatPaymentMessage(orderData: OrderData, paymentStatus: string): string {
    const statusEmoji = paymentStatus === 'paid' ? '‚úÖ' : '‚ùå';
    const statusText = paymentStatus === 'paid' ? '–û–ü–õ–ê–ß–ï–ù' : '–ù–ï –û–ü–õ–ê–ß–ï–ù';
    
    return `${statusEmoji} <b>–°–¢–ê–¢–£–° –û–ü–õ–ê–¢–´ –ò–ó–ú–ï–ù–ï–ù</b>

üõí <b>–ó–∞–∫–∞–∑ #${orderData.id}</b>
üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${orderData.userName}
üí∞ <b>–°—É–º–º–∞:</b> ${orderData.totalAmount}‚ÇΩ
üìä <b>–°—Ç–∞—Ç—É—Å:</b> ${statusText}

üìÖ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}`;
  }
  
  private getPaymentMethodText(paymentMethod: string): string {
    switch (paymentMethod) {
      case 'ozonpay':
        return 'Ozon Pay';
      case 'balance':
        return '–ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞';
      case 'bank_transfer':
        return '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥';
      default:
        return paymentMethod;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton instance
export const telegramService = TelegramService.getInstance(); 