import axios from 'axios';

const SERVER_URL = 'http://localhost:5000';

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞
function generateTestData() {
  const timestamp = Date.now();
  return {
    email: `test_${timestamp}@example.com`,
    password: 'testpassword123',
    firstName: 'Test',
    lastName: 'User',
    username: `testuser_${timestamp}`,
    phone: `+7999${timestamp.toString().slice(-7)}`,
    address: 'Test Address',
    verificationToken: 'test_token_' + timestamp
  };
}

async function testRegistrationSpeed() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–µ–π...\n');
  
  const testData = generateTestData();
  
  try {
    // 1. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—ç—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –≤ pending_registrations)
    console.log('1. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —Ç–µ–ª–µ—Ñ–æ–Ω–∞...');
    const saveResponse = await axios.post(`${SERVER_URL}/api/auth/request-phone-verification`, {
      phone: testData.phone,
      userData: {
        email: testData.email,
        password: testData.password,
        firstName: testData.firstName,
        lastName: testData.lastName,
        username: testData.username,
        address: testData.address,
        socialType: 'Instagram',
        socialUser: '@testuser'
      },
      verificationToken: testData.verificationToken
    });
    
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø—Ä–æ—à–µ–Ω–∞');
    
    // 2. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω (–∏–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram)
    console.log('2. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω...');
    const confirmResponse = await axios.post(`${SERVER_URL}/api/telegram/verify-phone`, {
      phone: testData.phone,
      verificationToken: testData.verificationToken
    });
    
    console.log('‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω');
    
    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –±—ã—Å—Ç—Ä—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
    console.log('\n3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –±—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏...');
    const startTime = Date.now();
    
    const verifyResponse = await axios.post(`${SERVER_URL}/api/auth/check-phone-verification`, {
      phone: testData.phone,
      verificationToken: testData.verificationToken
    });
    
    const endTime = Date.now();
    const duration = endTime - startTime;
    
    console.log(`‚ö° –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: ${duration}ms`);
    
    if (verifyResponse.data.verified && verifyResponse.data.autoLogin) {
      console.log('‚úÖ –ë—ã—Å—Ç—Ä–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –∞–≤—Ç–æ–ª–æ–≥–∏–Ω–æ–º —É—Å–ø–µ—à–Ω–∞!');
      console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${verifyResponse.data.user.email}`);
      console.log(`üèÉ‚Äç‚ôÇÔ∏è –°–∫–æ—Ä–æ—Å—Ç—å: ${duration < 500 ? '–û–¢–õ–ò–ß–ù–û' : duration < 1000 ? '–•–û–†–û–®–û' : '–ú–ï–î–õ–ï–ù–ù–û'}`);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', verifyResponse.data);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.response?.data || error.message);
  }
}

// –¢–µ—Å—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –ø–æ–¥—Ä—è–¥
async function testMultipleRegistrations() {
  console.log('\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π...\n');
  
  const results = [];
  const testCount = 5;
  
  for (let i = 1; i <= testCount; i++) {
    console.log(`–¢–µ—Å—Ç ${i}/${testCount}:`);
    
    const testData = generateTestData();
    const startTime = Date.now();
    
    try {
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
      await axios.post(`${SERVER_URL}/api/auth/request-phone-verification`, {
        phone: testData.phone,
        userData: {
          email: testData.email,
          password: testData.password,
          firstName: testData.firstName,
          lastName: testData.lastName,
          username: testData.username,
          address: testData.address,
          socialType: 'Instagram',
          socialUser: '@testuser'
        },
        verificationToken: testData.verificationToken
      });
      
      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
      await axios.post(`${SERVER_URL}/api/telegram/verify-phone`, {
        phone: testData.phone,
        verificationToken: testData.verificationToken
      });
      
      // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
      const verifyResponse = await axios.post(`${SERVER_URL}/api/auth/check-phone-verification`, {
        phone: testData.phone,
        verificationToken: testData.verificationToken
      });
      
      const endTime = Date.now();
      const duration = endTime - startTime;
      
      results.push(duration);
      console.log(`  ‚ö° ${duration}ms - ${duration < 500 ? '‚úÖ' : '‚ö†Ô∏è'}`);
      
    } catch (error) {
      console.log(`  ‚ùå –û—à–∏–±–∫–∞: ${error.response?.data?.error || error.message}`);
    }
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 100));
  }
  
  if (results.length > 0) {
    const avgTime = results.reduce((a, b) => a + b, 0) / results.length;
    const minTime = Math.min(...results);
    const maxTime = Math.max(...results);
    
    console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${avgTime.toFixed(0)}ms`);
    console.log(`   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ: ${minTime}ms`);
    console.log(`   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ: ${maxTime}ms`);
    console.log(`   –û—Ü–µ–Ω–∫–∞: ${avgTime < 500 ? 'üöÄ –û–¢–õ–ò–ß–ù–û' : avgTime < 1000 ? '‚úÖ –•–û–†–û–®–û' : '‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò'}`);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
async function runTests() {
  console.log('üî• –¢–ï–°–¢ –°–ö–û–†–û–°–¢–ò –°–û–ó–î–ê–ù–ò–Ø –°–ï–°–°–ò–ò –ü–†–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò\n');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    await axios.get(`${SERVER_URL}/api/products`);
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω\n');
  } catch (error) {
    console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5000');
    return;
  }
  
  await testRegistrationSpeed();
  await testMultipleRegistrations();
  
  console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

runTests().catch(console.error); 