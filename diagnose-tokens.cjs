const Database = require('better-sqlite3');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

async function deleteUser() {
  try {
    console.log('üóëÔ∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const email = await question('üìß –í–≤–µ–¥–∏—Ç–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ');
    const phone = await question('üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Å +7): ');
    
    console.log('\nüîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    console.log(`Email: ${email}`);
    console.log(`Phone: ${phone}`);
    
    const confirm = await question('\n‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è? (–¥–∞/–Ω–µ—Ç): ');
    
    if (confirm.toLowerCase() !== '–¥–∞' && confirm.toLowerCase() !== 'yes') {
      console.log('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
      rl.close();
      return;
    }

    const db = new Database('./db/database.sqlite');
    let totalDeleted = 0;

    console.log('\nüöÄ –ù–∞—á–∏–Ω–∞—é —É–¥–∞–ª–µ–Ω–∏–µ...');

    // 1. –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º user_id –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const user = db.prepare('SELECT id FROM users WHERE email = ? OR phone = ?').get(email, phone);
    const userId = user ? user.id : null;

    if (userId) {
      console.log(`üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: ${userId}`);
      
      // –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑—ã
      const ordersResult = db.prepare('DELETE FROM orders WHERE user_id = ?').run(userId);
      console.log('üõí –£–¥–∞–ª–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤:', ordersResult.changes);
      totalDeleted += ordersResult.changes;

      // –£–¥–∞–ª—è–µ–º –æ—Ç–∑—ã–≤—ã (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–∞—è —Ç–∞–±–ª–∏—Ü–∞)
      try {
        const reviewsResult = db.prepare('DELETE FROM reviews WHERE user_id = ?').run(userId);
        console.log('‚≠ê –£–¥–∞–ª–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤:', reviewsResult.changes);
        totalDeleted += reviewsResult.changes;
      } catch (e) {
        // –¢–∞–±–ª–∏—Ü–∞ reviews –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
      }
    }

    // 2. –£–¥–∞–ª—è–µ–º –∏–∑ users
    const userResult = db.prepare('DELETE FROM users WHERE email = ? OR phone = ?').run(email, phone);
    console.log('üë§ –£–¥–∞–ª–µ–Ω–æ –∏–∑ users:', userResult.changes);
    totalDeleted += userResult.changes;

    // 3. –£–¥–∞–ª—è–µ–º –∏–∑ pending_registrations —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    const pendingResult = db.prepare('DELETE FROM pending_registrations WHERE phone = ?').run(phone);
    console.log('üìã –£–¥–∞–ª–µ–Ω–æ –∏–∑ pending_registrations:', pendingResult.changes);
    totalDeleted += pendingResult.changes;

    // 4. –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é —Ç–æ–∫–µ–Ω–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (email.includes('@')) {
      const emailPart = email.split('@')[0].substring(0, 8); // –ü–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ –¥–æ @
      const tokenResult = db.prepare('DELETE FROM pending_registrations WHERE verification_token LIKE ?').run(`${emailPart}%`);
      if (tokenResult.changes > 0) {
        console.log(`üîë –£–¥–∞–ª–µ–Ω–æ –ø–æ —Ç–æ–∫–µ–Ω—É ${emailPart}*:`, tokenResult.changes);
        totalDeleted += tokenResult.changes;
      }
    }

    // 5. –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    try {
      const sessionsDb = new Database('./db/sessions.sqlite');
      const sessionResult = sessionsDb.prepare('DELETE FROM sessions WHERE sess LIKE ?').run(`%${email}%`);
      console.log('üîê –£–¥–∞–ª–µ–Ω–æ —Å–µ—Å—Å–∏–π:', sessionResult.changes);
      totalDeleted += sessionResult.changes;
      sessionsDb.close();
    } catch (e) {
      console.log('‚ÑπÔ∏è –°–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –±–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
    }

    console.log('\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢:');
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log(`üìä –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${totalDeleted}`);
    
    if (totalDeleted > 0) {
      console.log('üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω! –ú–æ–∂–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.');
    } else {
      console.log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }

    db.close();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    rl.close();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º
deleteUser(); 