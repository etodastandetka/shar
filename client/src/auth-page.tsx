import { useState, useEffect } from "react";
import { useLocation } from "wouter";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { insertUserSchema } from "@shared/schema";
import { useAuth } from "@/hooks/use-auth";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Checkbox } from "@/components/ui/checkbox";
import { Sprout, User, Mail, Key, Phone, Home, AtSign, Instagram, Facebook, Twitter, MessageCircle, CheckCircle } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

// Login schema
const loginSchema = z.object({
  email: z.string().email("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email"),
  password: z.string().min(1, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"),
});

// Registration schema (extending the insert schema)
const registerSchema = z.object({
  username: z.string().min(1, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
  email: z.string()
    .email("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email")
    .min(5, "Email –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤")
    .max(100, "Email –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤")
    .transform(email => email.toLowerCase().trim()),
  password: z.string()
    .min(8, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤")
    .max(100, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤")
    .regex(/[A-Z]/, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É")
    .regex(/[0-9]/, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É"),
  confirmPassword: z.string().min(1, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"),
  fullName: z.string()
    .min(2, "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞")
    .max(50, "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤")
    .regex(/^[a-zA-Z–∞-—è–ê-–Ø—ë–Å\s]+$/, "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã"),
  phone: z.string()
    .min(10, "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Ü–∏—Ñ—Ä")
    .regex(/^\+?[0-9\s\-\(\)]+$/, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    .transform(phone => phone.replace(/\s/g, '')), // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
  address: z.string().optional(),
  socialType: z.string().optional(),
  socialUser: z.string().optional(),
  acceptTerms: z.boolean().refine(val => val === true, {
    message: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å –ø—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç–æ–π",
  }),
  acceptPrivacy: z.boolean().refine(val => val === true, {
    message: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
  }),
}).refine((data) => data.password === data.confirmPassword, {
  message: "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç",
  path: ["confirmPassword"],
});

type LoginValues = z.infer<typeof loginSchema>;
type RegisterValues = z.infer<typeof registerSchema>;

export default function AuthPage() {
  const [location, setLocation] = useLocation();
  const { user, loginMutation, registerMutation } = useAuth();
  const [activeTab, setActiveTab] = useState<string>("login");
  const [showPhoneVerification, setShowPhoneVerification] = useState(false);
  const [pendingRegistrationData, setPendingRegistrationData] = useState<any>(null);
  const [isCheckingVerification, setIsCheckingVerification] = useState(false);
  const [verificationToken, setVerificationToken] = useState<string>("");
  const { toast } = useToast();

  // Redirect if already logged in
  useEffect(() => {
    if (user) {
      setLocation("/");
    }
  }, [user, setLocation]);

  // Login form
  const loginForm = useForm<LoginValues>({
    resolver: zodResolver(loginSchema),
    defaultValues: {
      email: "",
      password: "",
    },
  });

  // Register form
  const registerForm = useForm<RegisterValues>({
    resolver: zodResolver(registerSchema),
    defaultValues: {
      username: "",
      email: "",
      password: "",
      confirmPassword: "",
      fullName: "",
      phone: "",
      address: "",
      socialType: "Instagram",
      socialUser: "",
      acceptTerms: false,
      acceptPrivacy: false,
    },
  });

  // Login function
  const onLoginSubmit = (data: LoginValues) => {
    loginMutation.mutate(data);
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const generateVerificationToken = () => {
    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
  };

  // Register function - —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  const onRegisterSubmit = (data: RegisterValues) => {
    try {
      // Remove confirmPassword and agreement fields as they're not part of the API schema
      const { confirmPassword, socialUser, acceptTerms, acceptPrivacy, ...registerData } = data;
      
      // –†–∞–∑–¥–µ–ª—è–µ–º fullName –Ω–∞ first_name –∏ last_name
      const nameParts = registerData.fullName.trim().split(' ');
      const firstName = nameParts[0] || '';
      const lastName = nameParts.slice(1).join(' ') || '';
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const userData = {
        ...registerData,
        firstName,
        lastName,
        username: registerData.username || registerData.email.split('@')[0],
        phone: registerData.phone || '',
        address: registerData.address || '',
      };
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const token = generateVerificationToken();
      setVerificationToken(token);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      const userDataWithToken = {...userData, verificationToken: token};
      setPendingRegistrationData(userDataWithToken);
      setShowPhoneVerification(true);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
      setTimeout(() => {
        handlePhoneVerificationRequest(userDataWithToken, token);
      }, 100);
      
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
  const handlePhoneVerificationRequest = async (userData?: any, token?: string) => {
    const dataToUse = userData || pendingRegistrationData;
    const tokenToUse = token || verificationToken;
    
    if (!dataToUse) return;
    
    console.log("üìã –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", {
      email: dataToUse.email,
      phone: dataToUse.phone,
      token: tokenToUse
    });
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º endpoint –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      const response = await fetch('/api/auth/request-phone-verification', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          phone: dataToUse.phone,
          userData: {
            email: dataToUse.email,
            password: dataToUse.password,
            firstName: dataToUse.firstName,
            lastName: dataToUse.lastName,
            username: dataToUse.username,
            phone: dataToUse.phone,
            address: dataToUse.address
          },
          verificationToken: tokenToUse
        }),
      });

      const result = await response.json();
      console.log("üìã –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", result);

      if (response.ok) {
        toast({
          title: "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
          description: "–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Telegram –±–æ—Ç–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞",
        });
      } else {
        throw new Error(result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞');
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
        variant: "destructive"
      });
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  const checkPhoneVerification = async () => {
    if (!pendingRegistrationData) return;
    
    setIsCheckingVerification(true);
    
    try {
      const response = await fetch('/api/auth/check-phone-verification', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          phone: pendingRegistrationData.phone,
          verificationToken: verificationToken
        }),
      });

      const result = await response.json();
      
      if (response.ok && result.verified) {
        // –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        // –ù–ï –≤—ã–∑—ã–≤–∞–µ–º registerMutation.mutate - —ç—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –¥–≤–æ–π–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ!
        
        setShowPhoneVerification(false);
        setPendingRegistrationData(null);
        setVerificationToken("");
        
        toast({
          title: "–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!",
          description: "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
        });

        // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –æ—Ç–≤–µ—Ç–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
        if (result.user) {
          // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
          setLocation("/");
        }
      } else {
        toast({
          title: "–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω",
          description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ Telegram –±–æ—Ç–µ",
          variant: "destructive"
        });
      }
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
        variant: "destructive"
      });
    } finally {
      setIsCheckingVerification(false);
    }
  };

  // Telegram bot URL —Å —Ç–æ–∫–µ–Ω–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const telegramBotUrl = `https://t.me/InvittingToTGbotik_bot?start=${verificationToken}`;

  return (
    <div className="py-10 md:py-16 bg-neutral-medium min-h-screen">
      <div className="container mx-auto px-4">
        <div className="flex flex-col md:flex-row gap-8 max-w-6xl mx-auto">
          {/* Auth Forms */}
          <div className="md:w-1/2">
            <Tabs value={activeTab} onValueChange={setActiveTab}>
              <TabsList className="grid w-full grid-cols-2 mb-6">
                <TabsTrigger value="login">–í—Ö–æ–¥</TabsTrigger>
                <TabsTrigger value="register">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</TabsTrigger>
              </TabsList>
              
              <TabsContent value="login">
                <Card>
                  <CardHeader>
                    <CardTitle>–í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç</CardTitle>
                    <CardDescription>
                      –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <Form {...loginForm}>
                      <form onSubmit={loginForm.handleSubmit(onLoginSubmit)} className="space-y-4">
                        <FormField
                          control={loginForm.control}
                          name="email"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Email</FormLabel>
                              <FormControl>
                                <div className="relative">
                                  <Mail className="absolute top-3 left-3 h-5 w-5 text-gray-400" />
                                  <Input
                                    {...field}
                                    className="pl-10 form-input"
                                    placeholder="–í–≤–µ–¥–∏—Ç–µ email"
                                  />
                                </div>
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        <FormField
                          control={loginForm.control}
                          name="password"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>–ü–∞—Ä–æ–ª—å</FormLabel>
                              <FormControl>
                                <div className="relative">
                                  <Key className="absolute top-3 left-3 h-5 w-5 text-gray-400" />
                                  <Input
                                    {...field}
                                    type="password"
                                    className="pl-10 form-input"
                                    placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                                  />
                                </div>
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        <Button 
                          type="submit" 
                          className="w-full bg-secondary hover:bg-yellow-500 text-white"
                          disabled={loginMutation.isPending}
                        >
                          {loginMutation.isPending ? "–í—Ö–æ–¥..." : "–í–æ–π—Ç–∏"}
                        </Button>
                      </form>
                    </Form>
                  </CardContent>
                  <CardFooter className="flex flex-col space-y-2">
                    <div className="text-sm text-gray-500">
                      –ï—â–µ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?{" "}
                      <button 
                        onClick={() => setActiveTab("register")}
                        className="text-primary hover:underline"
                      >
                        –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å
                      </button>
                    </div>
                  </CardFooter>
                </Card>
              </TabsContent>
              
              <TabsContent value="register">
                <Card>
                  <CardHeader>
                    <CardTitle>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</CardTitle>
                    <CardDescription>
                      –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <Form {...registerForm}>
                      <form onSubmit={registerForm.handleSubmit(onRegisterSubmit)} className="space-y-4">
                        <FormField
                          control={registerForm.control}
                          name="username"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</FormLabel>
                              <FormControl>
                                <div className="relative">
                                  <AtSign className="absolute top-3 left-3 h-5 w-5 text-gray-400" />
                                  <Input
                                    {...field}
                                    className="pl-10 form-input"
                                    placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                                  />
                                </div>
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        <FormField
                          control={registerForm.control}
                          name="email"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Email</FormLabel>
                              <FormControl>
                                <div className="relative">
                                  <Mail className="absolute top-3 left-3 h-5 w-5 text-gray-400" />
                                  <Input
                                    {...field}
                                    type="email"
                                    className="pl-10 form-input"
                                    placeholder="–í–≤–µ–¥–∏—Ç–µ email"
                                  />
                                </div>
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <FormField
                            control={registerForm.control}
                            name="password"
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>–ü–∞—Ä–æ–ª—å</FormLabel>
                                <FormControl>
                                  <div className="relative">
                                    <Key className="absolute top-3 left-3 h-5 w-5 text-gray-400" />
                                    <Input
                                      {...field}
                                      type="password"
                                      className="pl-10 form-input"
                                      placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                                    />
                                  </div>
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                          <FormField
                            control={registerForm.control}
                            name="confirmPassword"
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è</FormLabel>
                                <FormControl>
                                  <div className="relative">
                                    <Key className="absolute top-3 left-3 h-5 w-5 text-gray-400" />
                                    <Input
                                      {...field}
                                      type="password"
                                      className="pl-10 form-input"
                                      placeholder="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                                    />
                                  </div>
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                        </div>
                        <FormField
                          control={registerForm.control}
                          name="fullName"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>–§–ò–û</FormLabel>
                              <FormControl>
                                <div className="relative">
                                  <User className="absolute top-3 left-3 h-5 w-5 text-gray-400" />
                                  <Input
                                    {...field}
                                    className="pl-10 form-input"
                                    placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è"
                                  />
                                </div>
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                          <FormField
                            control={registerForm.control}
                            name="phone"
                            render={({ field }) => (
                              <FormItem>
                              <FormLabel>–¢–µ–ª–µ—Ñ–æ–Ω *</FormLabel>
                                <FormControl>
                                  <div className="relative">
                                    <Phone className="absolute top-3 left-3 h-5 w-5 text-gray-400" />
                                    <Input
                                      {...field}
                                      className="pl-10 form-input"
                                    placeholder="+79920793424"
                                    />
                                  </div>
                                </FormControl>
                                <FormMessage />
                              <p className="text-xs text-gray-500 mt-1">
                                –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞
                              </p>
                              </FormItem>
                            )}
                          />
                        <FormField
                          control={registerForm.control}
                          name="address"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>–ê–¥—Ä–µ—Å</FormLabel>
                              <FormControl>
                                <div className="relative">
                                  <Home className="absolute top-3 left-3 h-5 w-5 text-gray-400" />
                                  <Input
                                    {...field}
                                    className="pl-10 form-input"
                                    placeholder="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏"
                                  />
                                </div>
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        <FormField
                          control={registerForm.control}
                          name="acceptTerms"
                          render={({ field }) => (
                            <FormItem className="flex flex-row items-start space-x-3 space-y-0">
                              <FormControl>
                                <Checkbox
                                  checked={field.value}
                                  onCheckedChange={field.onChange}
                                />
                              </FormControl>
                              <div className="space-y-1 leading-none">
                                <FormLabel>
                                  –Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å{" "}
                                  <a
                                    href="/offer"
                                    target="_blank"
                                    rel="noopener noreferrer"
                                    className="text-primary hover:underline"
                                  >
                                    –ø—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç–æ–π
                                  </a>
                                </FormLabel>
                                <FormMessage />
                              </div>
                            </FormItem>
                          )}
                        />
                        <FormField
                          control={registerForm.control}
                          name="acceptPrivacy"
                          render={({ field }) => (
                            <FormItem className="flex flex-row items-start space-x-3 space-y-0">
                              <FormControl>
                                <Checkbox
                                  checked={field.value}
                                  onCheckedChange={field.onChange}
                                />
                              </FormControl>
                              <div className="space-y-1 leading-none">
                                <FormLabel>
                                  –Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å{" "}
                                  <a
                                    href="/privacy"
                                    target="_blank"
                                    rel="noopener noreferrer"
                                    className="text-primary hover:underline"
                                  >
                                    –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
                                  </a>
                                </FormLabel>
                                <FormMessage />
                              </div>
                            </FormItem>
                          )}
                        />
                        <Button 
                          type="submit" 
                          className="w-full bg-secondary hover:bg-yellow-500 text-white"
                          disabled={registerMutation.isPending}
                        >
                          {registerMutation.isPending ? "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è..." : "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"}
                        </Button>
                      </form>
                    </Form>
                  </CardContent>
                  <CardFooter className="flex flex-col space-y-2">
                    <div className="text-sm text-gray-500">
                      –£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?{" "}
                      <button 
                        onClick={() => setActiveTab("login")}
                        className="text-primary hover:underline"
                      >
                        –í–æ–π–¥–∏—Ç–µ
                      </button>
                    </div>
                  </CardFooter>
                </Card>
              </TabsContent>
            </Tabs>
          </div>
          
          {/* Hero Section */}
          <div className="md:w-1/2 hidden md:block">
            <div className="bg-primary rounded-lg p-10 h-full text-white relative overflow-hidden">
              <div 
                className="absolute inset-0 opacity-20" 
                style={{
                  backgroundImage: "url('https://images.unsplash.com/photo-1545241047-6083a3684587?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1920&q=80')",
                  backgroundSize: "cover",
                  backgroundPosition: "center"
                }}
              ></div>
              <div className="relative z-10">
                <div className="flex items-center mb-6">
                  <Sprout className="h-8 w-8 mr-2" />
                  <h2 className="font-montserrat font-bold text-2xl">Jungle Plants</h2>
                </div>
                
                <h3 className="font-montserrat font-bold text-3xl mb-4">
                  –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –∫–æ–º–Ω–∞—Ç–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π
                </h3>
                
                <p className="mb-6 text-lg opacity-90">
                  –°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–¥–∫–∏–º –∏ —ç–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏–º —Ä–∞—Å—Ç–µ–Ω–∏—è–º —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏.
                </p>
                
                <div className="space-y-4">
                  <div className="flex items-start">
                    <div className="bg-white bg-opacity-20 p-2 rounded-full mr-3">
                      <Sprout className="h-5 w-5" />
                    </div>
                    <div>
                      <h4 className="font-semibold">–£–Ω–∏–∫–∞–ª—å–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è</h4>
                      <p className="opacity-80">–†–µ–¥–∫–∏–µ –∏ —ç–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è —Å–æ –≤—Å–µ–≥–æ –º–∏—Ä–∞</p>
                    </div>
                  </div>
                  
                  <div className="flex items-start">
                    <div className="bg-white bg-opacity-20 p-2 rounded-full mr-3">
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        width="20"
                        height="20"
                        viewBox="0 0 24 24"
                        fill="none"
                        stroke="currentColor"
                        strokeWidth="2"
                        strokeLinecap="round"
                        strokeLinejoin="round"
                      >
                        <path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2" />
                        <circle cx="9" cy="7" r="4" />
                        <path d="M22 21v-2a4 4 0 0 0-3-3.87" />
                        <path d="M16 3.13a4 4 0 0 1 0 7.75" />
                      </svg>
                    </div>
                    <div>
                      <h4 className="font-semibold">–°–æ–æ–±—â–µ—Å—Ç–≤–æ –ª—é–±–∏—Ç–µ–ª–µ–π —Ä–∞—Å—Ç–µ–Ω–∏–π</h4>
                      <p className="opacity-80">–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —Ä–∞—Å—Ç—É—â–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É</p>
                    </div>
                  </div>
                  
                  <div className="flex items-start">
                    <div className="bg-white bg-opacity-20 p-2 rounded-full mr-3">
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        width="20"
                        height="20"
                        viewBox="0 0 24 24"
                        fill="none"
                        stroke="currentColor"
                        strokeWidth="2"
                        strokeLinecap="round"
                        strokeLinejoin="round"
                      >
                        <rect x="2" y="4" width="20" height="16" rx="2" />
                        <path d="m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7" />
                      </svg>
                    </div>
                    <div>
                      <h4 className="font-semibold">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–ª–∏—á–∏–∏</h4>
                      <p className="opacity-80">–ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–≥–¥–∞ —Ä–µ–¥–∫–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è —Å–Ω–æ–≤–∞ –≤ –Ω–∞–ª–∏—á–∏–∏</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* –î–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - –£–í–ï–õ–ò–ß–ï–ù–ù–´–ô */}
      <Dialog open={showPhoneVerification} onOpenChange={setShowPhoneVerification}>
        <DialogContent className="sm:max-w-2xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2 text-xl">
              <MessageCircle className="h-6 w-6 text-blue-500" />
              –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            </DialogTitle>
            <DialogDescription className="text-base">
              –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-6">
            <div className="bg-blue-50 p-6 rounded-lg">
              <h4 className="font-medium text-blue-900 mb-3 text-lg">–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</h4>
              <p className="text-blue-800 font-mono text-xl font-bold">{pendingRegistrationData?.phone}</p>
            </div>
            
            <div className="space-y-4 bg-gray-50 p-6 rounded-lg">
              <h4 className="font-medium text-gray-900 text-lg mb-4">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</h4>
              <div className="space-y-3">
                <div className="flex items-start gap-3">
                  <div className="bg-blue-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold">1</div>
                  <p className="text-gray-700 text-base">
                    –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Telegram –±–æ—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ (—Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
                  </p>
                </div>
                <div className="flex items-start gap-3">
                  <div className="bg-blue-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold">2</div>
                  <p className="text-gray-700 text-base">
                    –ù–∞–∂–º–∏—Ç–µ /start –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                  </p>
                </div>
                <div className="flex items-start gap-3">
                  <div className="bg-blue-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold">3</div>
                  <p className="text-gray-700 text-base">
                    –í–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ "–Ø –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –Ω–æ–º–µ—Ä"
                  </p>
                </div>
              </div>
            </div>
          </div>
          
          <DialogFooter className="flex-col space-y-3 sm:flex-row sm:space-y-0 sm:space-x-3">
            <Button 
              onClick={() => window.open(telegramBotUrl, '_blank')}
              className="w-full bg-blue-500 hover:bg-blue-600 text-white text-base py-3"
            >
              <MessageCircle className="mr-2 h-5 w-5" />
              –ü–µ—Ä–µ–π—Ç–∏ –≤ Telegram –±–æ—Ç–∞
            </Button>
            <Button 
              onClick={checkPhoneVerification}
              disabled={isCheckingVerification}
              className="w-full bg-green-500 hover:bg-green-600 text-white text-base py-3"
            >
              {isCheckingVerification ? (
                "–ü—Ä–æ–≤–µ—Ä–∫–∞..."
              ) : (
                <>
                  <CheckCircle className="mr-2 h-5 w-5" />
                  –Ø –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –Ω–æ–º–µ—Ä
                </>
              )}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}
