const Database = require('better-sqlite3');
const path = require('path');

console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π...\n');

const dbPath = path.join(__dirname, 'db', 'database.sqlite');
const db = new Database(dbPath);

console.log(`üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${dbPath}\n`);

// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º pending_registrations
console.log('üìã 1. –ê–ù–ê–õ–ò–ó PENDING_REGISTRATIONS:');
try {
  const pendingRegs = db.prepare(`
    SELECT id, phone, verification_token, verified, created_at,
           datetime(created_at, 'localtime') as local_time
    FROM pending_registrations 
    ORDER BY created_at DESC 
    LIMIT 20
  `).all();
  
  console.log(`   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${pendingRegs.length}`);
  
  if (pendingRegs.length > 0) {
    console.log(`\n   üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:`);
    pendingRegs.forEach((reg, index) => {
      const userData = JSON.parse(reg.user_data || '{}');
      console.log(`   ${index + 1}. ID: ${reg.id}`);
      console.log(`      üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${reg.phone}`);
      console.log(`      üìß Email: ${userData.email || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
      console.log(`      üîë –¢–æ–∫–µ–Ω: ${reg.verification_token?.slice(0, 8)}...`);
      console.log(`      ‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: ${reg.verified ? '–î–ê' : '–ù–ï–¢'}`);
      console.log(`      üìÖ –°–æ–∑–¥–∞–Ω: ${reg.local_time}`);
      console.log('');
    });
  } else {
    console.log('   ‚ö†Ô∏è –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ pending_registrations');
  }
} catch (error) {
  console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
}

// 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
console.log('\nüë• 2. –ê–ù–ê–õ–ò–ó –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:');
try {
  const users = db.prepare(`
    SELECT id, email, phone, phone_verified, telegram_chat_id, 
           datetime(created_at, 'localtime') as local_time
    FROM users 
    ORDER BY created_at DESC 
    LIMIT 10
  `).all();
  
  console.log(`   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
  console.log(`   –° –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏: ${users.filter(u => u.phone_verified).length}`);
  console.log(`   –° Telegram: ${users.filter(u => u.telegram_chat_id).length}`);
  
  if (users.length > 0) {
    console.log(`\n   üë§ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:`);
    users.forEach((user, index) => {
      console.log(`   ${index + 1}. ${user.email}`);
      console.log(`      üìû ${user.phone || '–Ω–µ —É–∫–∞–∑–∞–Ω'} ${user.phone_verified ? '‚úÖ' : '‚ùå'}`);
      console.log(`      üì± Telegram: ${user.telegram_chat_id || '–Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω'}`);
      console.log(`      üìÖ –°–æ–∑–¥–∞–Ω: ${user.local_time}`);
      console.log('');
    });
  }
} catch (error) {
  console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
}

// 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
console.log('\nüìû 3. –ü–†–û–í–ï–†–ö–ê –ü–†–û–ë–õ–ï–ú–ù–´–• –ù–û–ú–ï–†–û–í:');
const problemPhones = [
  '89055752187', '89177985719', '+7 (906) 177-52-95', 
  '89514601973', '79061520938', '89872530078',
  '89528582942', '+79026573070', '+79296701161', '+79179276626'
];

function normalizePhone(phone) {
  let normalized = phone.replace(/[^\d+]/g, '');
  if (normalized.startsWith('8')) {
    normalized = '+7' + normalized.slice(1);
  }
  if (normalized.startsWith('7') && !normalized.startsWith('+7')) {
    normalized = '+' + normalized;
  }
  if (!normalized.startsWith('+') && normalized.length === 11 && normalized.startsWith('7')) {
    normalized = '+' + normalized;
  }
  if (!normalized.startsWith('+') && normalized.length === 10) {
    normalized = '+7' + normalized;
  }
  return normalized;
}

problemPhones.forEach((phone, index) => {
  const normalized = normalizePhone(phone);
  console.log(`\n   ${index + 1}. ${phone} -> ${normalized}`);
  
  // –ò—â–µ–º –≤ users
  const user = db.prepare('SELECT * FROM users WHERE phone = ?').get(normalized);
  if (user) {
    console.log(`      ‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.email} (ID: ${user.id})`);
    console.log(`      üì± –¢–µ–ª–µ—Ñ–æ–Ω –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: ${user.phone_verified ? '–î–ê' : '–ù–ï–¢'}`);
  } else {
    console.log(`      ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ users`);
  }
  
  // –ò—â–µ–º –≤ pending_registrations
  const pending = db.prepare('SELECT * FROM pending_registrations WHERE phone = ?').get(normalized);
  if (pending) {
    const userData = JSON.parse(pending.user_data || '{}');
    console.log(`      ‚è≥ –ù–∞–π–¥–µ–Ω –≤ pending: ${userData.email}`);
    console.log(`      üì± –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: ${pending.verified ? '–î–ê' : '–ù–ï–¢'}`);
    console.log(`      üîë –¢–æ–∫–µ–Ω: ${pending.verification_token?.slice(0, 8)}...`);
  } else {
    console.log(`      ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –≤ pending_registrations`);
  }
});

// 4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
console.log('\nüìä 4. –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–†–ï–ú–ï–ù–ò:');
try {
  const stats = db.prepare(`
    SELECT 
      DATE(created_at) as date,
      COUNT(*) as registrations,
      SUM(CASE WHEN verified = 1 THEN 1 ELSE 0 END) as verified_count
    FROM pending_registrations 
    WHERE created_at >= datetime('now', '-7 days')
    GROUP BY DATE(created_at)
    ORDER BY date DESC
  `).all();
  
  if (stats.length > 0) {
    console.log('   üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:');
    stats.forEach(stat => {
      console.log(`   ${stat.date}: ${stat.registrations} —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π, ${stat.verified_count} –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã`);
    });
  } else {
    console.log('   ‚ö†Ô∏è –ù–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π');
  }
} catch (error) {
  console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`);
}

// 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
console.log('\nüí° 5. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');

const totalPending = db.prepare('SELECT COUNT(*) as count FROM pending_registrations').get().count;
const unverifiedPending = db.prepare('SELECT COUNT(*) as count FROM pending_registrations WHERE verified = 0').get().count;
const oldPending = db.prepare(`
  SELECT COUNT(*) as count FROM pending_registrations 
  WHERE created_at < datetime('now', '-24 hours')
`).get().count;

console.log(`   üìù –í—Å–µ–≥–æ –≤ pending_registrations: ${totalPending}`);
console.log(`   ‚ùå –ù–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: ${unverifiedPending}`);
console.log(`   ‚è∞ –°—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤: ${oldPending}`);

if (unverifiedPending > 0) {
  console.log(`\n   üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${unverifiedPending} –Ω–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π!`);
  console.log(`   üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å: node fix-registration-manual.cjs`);
}

if (oldPending > 0) {
  console.log(`\n   üßπ –ù–∞–π–¥–µ–Ω–æ ${oldPending} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π`);
  console.log(`   üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—á–∏—Å—Ç–∏—Ç—å: DELETE FROM pending_registrations WHERE created_at < datetime('now', '-24 hours')`);
}

db.close();
console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!'); 