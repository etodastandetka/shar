const Database = require('better-sqlite3');
const crypto = require('crypto');
const path = require('path');

const ADMIN_EMAIL = 'fortnite08qwer@gmail.com';
const ADMIN_PASSWORD = 'Plmokn09';

// –§—É–Ω–∫—Ü–∏—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è (–∫–∞–∫ –≤ auth-sqlite.ts)
function hashPassword(password) {
  const saltRounds = 10;
  const salt = crypto.randomBytes(16).toString('hex');
  const hash = crypto.pbkdf2Sync(password, salt, 1000, 64, 'sha512').toString('hex');
  return `${salt}:${hash}`;
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
function comparePasswords(hashedPassword, inputPassword) {
  try {
    const [salt, hash] = hashedPassword.split(':');
    const inputHash = crypto.pbkdf2Sync(inputPassword, salt, 1000, 64, 'sha512').toString('hex');
    return hash === inputHash;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä–æ–ª—è:', error);
    return false;
  }
}

try {
  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  const dbPath = path.join(__dirname, 'db', 'database.sqlite');
  const db = new Database(dbPath);

  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
  
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const user = db.prepare('SELECT * FROM users WHERE email = ?').get(ADMIN_EMAIL);
  
  if (!user) {
    console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    process.exit(1);
  }
  
  console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:');
  console.log(`   ID: ${user.id}`);
  console.log(`   Email: ${user.email}`);
  console.log(`   Full Name: ${user.full_name}`);
  console.log(`   Is Admin: ${user.is_admin}`);
  console.log(`   Password Hash: ${user.password?.substring(0, 50)}...`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
  console.log('\nüîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è...');
  const isPasswordValid = comparePasswords(user.password, ADMIN_PASSWORD);
  console.log(`   –ü–∞—Ä–æ–ª—å "${ADMIN_PASSWORD}" –≤–∞–ª–∏–¥–µ–Ω: ${isPasswordValid}`);
  
  if (!isPasswordValid) {
    console.log('\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è...');
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ö–µ—à –ø–∞—Ä–æ–ª—è
    const newHashedPassword = hashPassword(ADMIN_PASSWORD);
    console.log(`   –ù–æ–≤—ã–π —Ö–µ—à: ${newHashedPassword.substring(0, 50)}...`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –≤ –±–∞–∑–µ
    const result = db.prepare('UPDATE users SET password = ?, updated_at = ? WHERE email = ?')
      .run(newHashedPassword, new Date().toISOString(), ADMIN_EMAIL);
    
    if (result.changes > 0) {
      console.log('‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
      const updatedUser = db.prepare('SELECT password FROM users WHERE email = ?').get(ADMIN_EMAIL);
      const isNewPasswordValid = comparePasswords(updatedUser.password, ADMIN_PASSWORD);
      console.log(`   –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è: ${isNewPasswordValid}`);
    } else {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å');
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
  console.log('\nüëë –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
  if (user.is_admin === 1) {
    console.log('‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã');
  } else {
    console.log('üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
    const result = db.prepare('UPDATE users SET is_admin = 1, updated_at = ? WHERE email = ?')
      .run(new Date().toISOString(), ADMIN_EMAIL);
    
    if (result.changes > 0) {
      console.log('‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!');
    } else {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    }
  }
  
  console.log('\nüéØ –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
  console.log(`   Email: ${ADMIN_EMAIL}`);
  console.log(`   Password: ${ADMIN_PASSWORD}`);
  console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.');

} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  process.exit(1);
} 