const Database = require('better-sqlite3');
const crypto = require('crypto');
const path = require('path');

// –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const dbPath = path.join(process.cwd(), 'db', 'database.sqlite');
const db = new Database(dbPath);

// –§—É–Ω–∫—Ü–∏—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è
function hashPassword(password) {
  const saltRounds = 10;
  const salt = crypto.randomBytes(16).toString('hex');
  const hash = crypto.pbkdf2Sync(password, salt, 1000, 64, 'sha512').toString('hex');
  return `${salt}:${hash}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞—Ä–æ–ª—å –æ—Ç–∫—Ä—ã—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º
function isPlainTextPassword(password) {
  // –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ ":", –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –æ—Ç–∫—Ä—ã—Ç—ã–π —Ç–µ–∫—Å—Ç
  return !password.includes(':');
}

async function fixPlainPasswords() {
  console.log('üîê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–¢–ö–†–´–¢–´–• –ü–ê–†–û–õ–ï–ô –í –ë–ê–ó–ï –î–ê–ù–ù–´–•\n');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = db.prepare('SELECT id, email, password FROM users').all();
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}\n`);
    
    let fixedCount = 0;
    let alreadyHashedCount = 0;
    
    for (const user of users) {
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.email}`);
      console.log(`   –ü–∞—Ä–æ–ª—å: ${user.password.substring(0, 10)}...`);
      
      if (isPlainTextPassword(user.password)) {
        console.log(`   ‚ö†Ô∏è –ù–ê–ô–î–ï–ù –û–¢–ö–†–´–¢–´–ô –ü–ê–†–û–õ–¨! –•–µ—à–∏—Ä—É–µ–º...`);
        
        // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        const hashedPassword = hashPassword(user.password);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const updateStmt = db.prepare('UPDATE users SET password = ? WHERE id = ?');
        const result = updateStmt.run(hashedPassword, user.id);
        
        if (result.changes > 0) {
          console.log(`   ‚úÖ –ü–∞—Ä–æ–ª—å –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω: ${hashedPassword.substring(0, 20)}...`);
          fixedCount++;
        } else {
          console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è`);
        }
      } else {
        console.log(`   ‚úÖ –ü–∞—Ä–æ–ª—å —É–∂–µ –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω`);
        alreadyHashedCount++;
      }
      console.log('');
    }
    
    console.log('üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
    console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ–≥–æ: ${users.length}`);
    console.log(`   –ü–∞—Ä–æ–ª–µ–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${fixedCount}`);
    console.log(`   –£–∂–µ –±—ã–ª–∏ –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω—ã: ${alreadyHashedCount}`);
    
    if (fixedCount > 0) {
      console.log('\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—Å–µ –ø–∞—Ä–æ–ª–∏ –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω—ã.');
      console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: pm2 restart russkii-portal');
    } else {
      console.log('\n‚úÖ –í—Å–µ –ø–∞—Ä–æ–ª–∏ —É–∂–µ –±—ã–ª–∏ –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω—ã.');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª–µ–π:', error);
  } finally {
    db.close();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
fixPlainPasswords(); 