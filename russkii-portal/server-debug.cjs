const sqlite3 = require('sqlite3').verbose();
const path = require('path');

// –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const DB_PATH = path.join(__dirname, 'db', 'database.sqlite');

console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ù–ê –°–ï–†–í–ï–†–ï');
console.log('üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:', DB_PATH);

const db = new sqlite3.Database(DB_PATH, (err) => {
  if (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', err.message);
    return;
  }
  
  console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ\n');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º pending_registrations
  db.all('SELECT * FROM pending_registrations ORDER BY created_at DESC LIMIT 10', (err, pendingRegs) => {
    if (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è pending_registrations:', err);
      return;
    }
    
    console.log(`üìã –í–†–ï–ú–ï–ù–ù–´–ï –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò: ${pendingRegs.length}`);
    console.log('='.repeat(80));
    
    pendingRegs.forEach((reg, index) => {
      console.log(`\n${index + 1}. üìû ${reg.phone}`);
      console.log(`   üîë –¢–æ–∫–µ–Ω: ${reg.verification_token}`);
      console.log(`   ‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: ${reg.verified ? '–î–∞' : '–ù–µ—Ç'}`);
      console.log(`   üìÖ –°–æ–∑–¥–∞–Ω: ${reg.created_at}`);
      
      try {
        const userData = JSON.parse(reg.user_data);
        console.log(`   üìß Email: ${userData.email || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
        console.log(`   üë§ –ò–º—è: ${userData.name || userData.firstName || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`);
      } catch (e) {
        console.log(`   üìã –î–∞–Ω–Ω—ã–µ: ${reg.user_data.substring(0, 100)}...`);
      }
      
      console.log(`   üîó –°—Å—ã–ª–∫–∞: https://t.me/jungle_plants_bot?start=${reg.verification_token}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º users
    db.all('SELECT * FROM users ORDER BY created_at DESC LIMIT 10', (err2, users) => {
      if (err2) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err2);
        return;
      }
      
      console.log(`\nüë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –í –¢–ê–ë–õ–ò–¶–ï USERS: ${users.length}`);
      console.log('='.repeat(80));
      
      users.forEach((user, index) => {
        console.log(`\n${index + 1}. üë§ ${user.email}`);
        console.log(`   üÜî ID: ${user.id}`);
        console.log(`   üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
        console.log(`   ‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: ${user.phone_verified ? '–î–∞' : '–ù–µ—Ç'}`);
        console.log(`   üì± Telegram ID: ${user.telegram_chat_id || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
        console.log(`   üìÖ –°–æ–∑–¥–∞–Ω: ${user.created_at}`);
      });
      
      // –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
      console.log('\n' + '='.repeat(80));
      console.log('üîç –ê–ù–ê–õ–ò–ó –°–û–û–¢–í–ï–¢–°–¢–í–ò–ô:');
      
      pendingRegs.forEach((pending, index) => {
        try {
          const userData = JSON.parse(pending.user_data);
          const email = userData.email;
          const phone = pending.phone;
          
          const matchingUser = users.find(u => 
            u.email === email || u.phone === phone
          );
          
          console.log(`\n${index + 1}. Pending: ${email} (${phone})`);
          if (matchingUser) {
            console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${matchingUser.email} (ID: ${matchingUser.id})`);
            console.log(`   üì± Telegram ID: ${matchingUser.telegram_chat_id || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
            console.log(`   ‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: ${matchingUser.phone_verified ? '–î–∞' : '–ù–µ—Ç'}`);
          } else {
            console.log(`   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –ù–ê–ô–î–ï–ù –≤ —Ç–∞–±–ª–∏—Ü–µ users!`);
            console.log(`   üí° –í–æ–∑–º–æ–∂–Ω–æ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
          }
        } catch (e) {
          console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö: ${pending.user_data}`);
        }
      });
      
      console.log('\n' + '='.repeat(80));
      console.log('üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
      
      const unmatchedPending = pendingRegs.filter(pending => {
        try {
          const userData = JSON.parse(pending.user_data);
          const email = userData.email;
          const phone = pending.phone;
          return !users.find(u => u.email === email || u.phone === phone);
        } catch (e) {
          return true;
        }
      });
      
      if (unmatchedPending.length > 0) {
        console.log('‚ùå –ï–°–¢–¨ –ù–ï–ó–ê–í–ï–†–®–ï–ù–ù–´–ï –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò!');
        console.log('üîß –≠—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –µ—Å—Ç—å –≤ pending_registrations, –Ω–æ –ù–ï–¢ –≤ users:');
        
        unmatchedPending.forEach((pending, index) => {
          try {
            const userData = JSON.parse(pending.user_data);
            console.log(`${index + 1}. ${userData.email} - ${pending.phone}`);
            console.log(`   –¢–æ–∫–µ–Ω: ${pending.verification_token}`);
            console.log(`   –°—Å—ã–ª–∫–∞: https://t.me/jungle_plants_bot?start=${pending.verification_token}`);
          } catch (e) {
            console.log(`${index + 1}. –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö: ${pending.phone}`);
          }
        });
        
        console.log('\nüíª –†–ï–®–ï–ù–ò–Ø:');
        console.log('1. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ —Å–∞–π—Ç–µ –¥–ª—è —ç—Ç–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        console.log('2. –ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ users –≤—Ä—É—á–Ω—É—é');
        console.log('3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      } else {
        console.log('‚úÖ –í—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–º–µ—é—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      }
      
      db.close();
    });
  });
}); 