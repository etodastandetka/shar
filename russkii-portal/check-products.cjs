const Database = require('better-sqlite3');
const path = require('path');

try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const dbPath = path.join(__dirname, 'db', 'database.sqlite');
    const db = new Database(dbPath);
    
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
    const tables = db.prepare("SELECT name FROM sqlite_master WHERE type='table';").all();
    console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:');
    tables.forEach(table => console.log(`  - ${table.name}`));
    console.log('');
    
    // –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    const productTableNames = ['products', 'product', '—Ç–æ–≤–∞—Ä—ã', 'catalog'];
    let productsTable = null;
    
    for (const tableName of productTableNames) {
        try {
            const result = db.prepare(`SELECT COUNT(*) as count FROM ${tableName}`).get();
            productsTable = tableName;
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤: "${tableName}"`);
            break;
        } catch (e) {
            // –¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        }
    }
    
    if (productsTable) {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
        const products = db.prepare(`SELECT * FROM ${productsTable} ORDER BY id`).all();
        
        console.log(`üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ "${productsTable}": ${products.length}\n`);
        
        if (products.length > 0) {
            console.log('üõçÔ∏è –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:');
            products.forEach((product, index) => {
                console.log(`\n${index + 1}. ID: ${product.id}`);
                console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${product.name || product.title || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`);
                console.log(`   –¶–µ–Ω–∞: ${product.price || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
                console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${product.category || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
                console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${(product.description || '').substring(0, 100)}${product.description && product.description.length > 100 ? '...' : ''}`);
                if (product.image_url || product.image) {
                    console.log(`   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${product.image_url || product.image}`);
                }
                if (product.stock !== undefined) {
                    console.log(`   –í –Ω–∞–ª–∏—á–∏–∏: ${product.stock}`);
                }
            });
        } else {
            console.log('‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!');
            console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
            console.log('   1. –¢–æ–≤–∞—Ä—ã –µ—â–µ –Ω–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
            console.log('   2. –¢–æ–≤–∞—Ä—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã');
            console.log('   3. –¢–æ–≤–∞—Ä—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –¥—Ä—É–≥–æ–π —Ç–∞–±–ª–∏—Ü–µ');
        }
    } else {
        console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        console.log('\nüìã –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ –¥—Ä—É–≥–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö...');
        
        for (const table of tables) {
            try {
                const columns = db.prepare(`PRAGMA table_info(${table.name})`).all();
                const hasProductFields = columns.some(col => 
                    ['name', 'title', 'price', 'product'].some(field => 
                        col.name.toLowerCase().includes(field)
                    )
                );
                
                if (hasProductFields) {
                    const count = db.prepare(`SELECT COUNT(*) as count FROM ${table.name}`).get();
                    console.log(`\nüîç –¢–∞–±–ª–∏—Ü–∞ "${table.name}" (${count.count} –∑–∞–ø–∏—Å–µ–π):`);
                    columns.forEach(col => console.log(`   - ${col.name} (${col.type})`));
                    
                    if (count.count > 0 && count.count <= 10) {
                        const sample = db.prepare(`SELECT * FROM ${table.name} LIMIT 3`).all();
                        console.log(`   –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:`);
                        sample.forEach((row, idx) => {
                            console.log(`   ${idx + 1}. ${JSON.stringify(row, null, 2)}`);
                        });
                    }
                }
            } catch (e) {
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫–∏
            }
        }
    }
    
    db.close();
    
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö:', error.message);
    console.log('\nüîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
    console.log('   1. –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª db/database.sqlite');
    console.log('   2. –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö');
} 