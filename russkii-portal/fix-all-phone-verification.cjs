const sqlite3 = require('sqlite3').verbose();
const path = require('path');

const DB_PATH = path.join(__dirname, 'db', 'database.sqlite');

console.log('üîß –ú–ê–°–°–û–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò –¢–ï–õ–ï–§–û–ù–û–í');
console.log('üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:', DB_PATH);
console.log('=' * 50);

const db = new sqlite3.Database(DB_PATH, (err) => {
  if (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', err.message);
    return;
  }
});

// –§—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∫–æ–ø–∏—è –∏–∑ phone-verification.ts)
function normalizePhone(phone) {
  if (!phone) return null;
  
  let normalized = phone.replace(/[^\d+]/g, '');
  
  if (normalized.startsWith('8')) {
    normalized = '+7' + normalized.slice(1);
  }
  
  if (normalized.startsWith('7') && !normalized.startsWith('+7')) {
    normalized = '+' + normalized;
  }
  
  if (!normalized.startsWith('+') && normalized.length === 11 && normalized.startsWith('7')) {
    normalized = '+' + normalized;
  }
  
  if (!normalized.startsWith('+') && normalized.length === 10) {
    normalized = '+7' + normalized;
  }
  
  return normalized;
}

console.log('üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏ –≤ users...');

// –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏
db.all(
  'SELECT id, email, phone, phone_verified FROM users WHERE phone_verified = 1 AND phone IS NOT NULL',
  [],
  (err, verifiedUsers) => {
    if (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err.message);
      db.close();
      return;
    }

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏: ${verifiedUsers.length}`);

    if (verifiedUsers.length === 0) {
      console.log('‚úÖ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
      db.close();
      return;
    }

    let processedCount = 0;
    let updatedCount = 0;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    verifiedUsers.forEach((user, index) => {
      const normalizedPhone = normalizePhone(user.phone);
      
      console.log(`\n${index + 1}. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`);
      console.log(`   Email: ${user.email}`);
      console.log(`   –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: ${user.phone}`);
      console.log(`   –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: ${normalizedPhone}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –≤ pending_registrations
      db.get(
        'SELECT * FROM pending_registrations WHERE phone = ?',
        [normalizedPhone],
        (err2, pendingReg) => {
          if (err2) {
            console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ pending_registrations: ${err2.message}`);
          } else if (pendingReg) {
            if (pendingReg.verified === 0) {
              // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –∫–∞–∫ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é
              db.run(
                'UPDATE pending_registrations SET verified = 1 WHERE phone = ?',
                [normalizedPhone],
                function(err3) {
                  if (err3) {
                    console.error(`   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${err3.message}`);
                  } else {
                    console.log(`   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ pending_registrations: ${this.changes}`);
                    updatedCount += this.changes;
                  }
                  
                  processedCount++;
                  if (processedCount === verifiedUsers.length) {
                    finishProcessing();
                  }
                }
              );
            } else {
              console.log(`   ‚úÖ –ó–∞–ø–∏—Å—å —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞`);
              processedCount++;
              if (processedCount === verifiedUsers.length) {
                finishProcessing();
              }
            }
          } else {
            console.log(`   ‚ö†Ô∏è –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ pending_registrations`);
            processedCount++;
            if (processedCount === verifiedUsers.length) {
              finishProcessing();
            }
          }
        }
      );
    });

    function finishProcessing() {
      console.log('\n' + '=' * 50);
      console.log('üéâ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!');
      console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${processedCount}`);
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${updatedCount}`);
      console.log('\nüí° –¢–µ–ø–µ—Ä—å –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏');
      console.log('   –¥–æ–ª–∂–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –Ω–∞ —Å–∞–π—Ç–µ!');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      db.get(
        `SELECT 
          COUNT(*) as total_users,
          SUM(CASE WHEN phone_verified = 1 THEN 1 ELSE 0 END) as verified_users
         FROM users WHERE phone IS NOT NULL`,
        [],
        (err, stats) => {
          if (!err && stats) {
            console.log(`\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
            console.log(`   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏: ${stats.total_users}`);
            console.log(`   –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: ${stats.verified_users}`);
          }
          db.close();
        }
      );
    }
  }
); 