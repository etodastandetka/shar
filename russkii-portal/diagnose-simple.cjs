const Database = require('better-sqlite3');
const path = require('path');

console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•');

try {
    const dbPath = path.join(__dirname, 'db', 'database.sqlite');
    console.log(`üìÅ –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${dbPath}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    const fs = require('fs');
    if (!fs.existsSync(dbPath)) {
        console.log('‚ùå –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢!');
        console.log('üí° –†–µ—à–µ–Ω–∏–µ: —Å–æ–∑–¥–∞–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏');
        process.exit(1);
    }
    
    console.log('‚úÖ –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const db = new Database(dbPath);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
    console.log('\nüìã –ü–†–û–í–ï–†–ö–ê –¢–ê–ë–õ–ò–¶:');
    const tables = db.prepare("SELECT name FROM sqlite_master WHERE type='table';").all();
    console.log(`   –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: ${tables.length}`);
    
    const requiredTables = ['users', 'products', 'orders', 'pending_registrations'];
    const existingTables = tables.map(t => t.name);
    
    requiredTables.forEach(table => {
        if (existingTables.includes(table)) {
            console.log(`   ‚úÖ ${table} - –°–£–©–ï–°–¢–í–£–ï–¢`);
        } else {
            console.log(`   ‚ùå ${table} - –ù–ï –ù–ê–ô–î–ï–ù–ê`);
        }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüë• –ü–†–û–í–ï–†–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:');
    try {
        const usersCount = db.prepare('SELECT COUNT(*) as count FROM users').get();
        console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: ${usersCount.count}`);
        
        if (usersCount.count > 0) {
            const sampleUsers = db.prepare('SELECT id, email, is_admin FROM users LIMIT 3').all();
            sampleUsers.forEach(user => {
                console.log(`   - ID: ${user.id}, Email: ${user.email}, –ê–¥–º–∏–Ω: ${user.is_admin ? '–î–∞' : '–ù–µ—Ç'}`);
            });
        } else {
            console.log('   ‚ö†Ô∏è –í –±–∞–∑–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        }
    } catch (e) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${e.message}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã
    console.log('\nüì¶ –ü–†–û–í–ï–†–ö–ê –¢–û–í–ê–†–û–í:');
    try {
        const productsCount = db.prepare('SELECT COUNT(*) as count FROM products').get();
        console.log(`   –¢–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ: ${productsCount.count}`);
        
        if (productsCount.count > 0) {
            const sampleProducts = db.prepare('SELECT id, name, price FROM products LIMIT 3').all();
            sampleProducts.forEach(product => {
                console.log(`   - ID: ${product.id}, –ù–∞–∑–≤–∞–Ω–∏–µ: ${product.name}, –¶–µ–Ω–∞: ${product.price}`);
            });
        } else {
            console.log('   ‚ö†Ô∏è –í –±–∞–∑–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤');
        }
    } catch (e) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: ${e.message}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã products
    console.log('\nüèóÔ∏è –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶–´ PRODUCTS:');
    try {
        const productColumns = db.prepare('PRAGMA table_info(products)').all();
        console.log('   –ö–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ products:');
        productColumns.forEach(col => {
            console.log(`   - ${col.name}: ${col.type} ${col.notnull ? 'NOT NULL' : ''} ${col.pk ? 'PRIMARY KEY' : ''}`);
        });
    } catch (e) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã products: ${e.message}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞—é—â–∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    console.log('\n‚è≥ –ü–†–û–í–ï–†–ö–ê –û–ñ–ò–î–ê–Æ–©–ò–• –†–ï–ì–ò–°–¢–†–ê–¶–ò–Æ:');
    try {
        const pendingCount = db.prepare('SELECT COUNT(*) as count FROM pending_registrations').get();
        console.log(`   –û–∂–∏–¥–∞—é—â–∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: ${pendingCount.count}`);
        
        if (pendingCount.count > 0) {
            const pendingUsers = db.prepare('SELECT username, phone, phone_verified FROM pending_registrations').all();
            pendingUsers.forEach(user => {
                console.log(`   - ${user.username} (${user.phone}) - –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: ${user.phone_verified ? '–î–∞' : '–ù–µ—Ç'}`);
            });
        }
    } catch (e) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ pending_registrations: ${e.message}`);
    }
    
    db.close();
    
    console.log('\n‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
    
} catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error.message);
    console.log('\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
    console.log('1. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞');
    console.log('2. –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É');
    console.log('3. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º');
} 