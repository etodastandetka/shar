const Database = require('better-sqlite3');
const path = require('path');

try {
  const dbPath = path.join(__dirname, 'db', 'database.sqlite');
  const db = new Database(dbPath);

  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã users
  console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã users:');
  const userColumns = db.prepare("PRAGMA table_info(users)").all();
  if (userColumns.length === 0) {
    console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ users –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  } else {
    userColumns.forEach(col => {
      console.log(`  ${col.name} (${col.type}) - ${col.notnull ? 'NOT NULL' : 'NULL'} ${col.pk ? 'PRIMARY KEY' : ''}`);
    });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã pending_registrations
  console.log('\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã pending_registrations:');
  const pendingColumns = db.prepare("PRAGMA table_info(pending_registrations)").all();
  if (pendingColumns.length === 0) {
    console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ pending_registrations –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  } else {
    pendingColumns.forEach(col => {
      console.log(`  ${col.name} (${col.type}) - ${col.notnull ? 'NOT NULL' : 'NULL'} ${col.pk ? 'PRIMARY KEY' : ''}`);
    });
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
  console.log('\nüìä –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
  const tables = db.prepare("SELECT name FROM sqlite_master WHERE type='table'").all();
  tables.forEach(table => {
    console.log(`  üìÅ ${table.name}`);
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –∏–∑ users
  console.log('\nüë§ –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users:');
  try {
    const users = db.prepare('SELECT * FROM users LIMIT 3').all();
    if (users.length === 0) {
      console.log('‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ');
    } else {
      users.forEach((user, index) => {
        console.log(`\n  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${index + 1}:`);
        Object.keys(user).forEach(key => {
          console.log(`    ${key}: ${user[key]}`);
        });
      });
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ users:', error.message);
  }

} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞:', error);
} 