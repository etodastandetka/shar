#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîê –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π...');

// –§—É–Ω–∫—Ü–∏—è comparePasswords –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
const fixedComparePasswordsCode = `
export function comparePasswords(storedPassword: string, suppliedPassword: string): boolean {
  if (!storedPassword || !suppliedPassword) return false;
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (salt:iterations:keylen:digest:hash)
    const parts = storedPassword.split(':');
    
    if (parts.length === 5) {
      // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: salt:iterations:keylen:digest:hash
      const [salt, iterations, keylen, digest, hash] = parts;
      const suppliedHash = crypto.pbkdf2Sync(
        suppliedPassword, 
        salt, 
        parseInt(iterations), 
        parseInt(keylen), 
        digest
      ).toString('hex');
      return hash === suppliedHash;
    } else if (parts.length === 2) {
      // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: salt:hash
      const [salt, hash] = parts;
      const suppliedHash = crypto.pbkdf2Sync(suppliedPassword, salt, 1000, 64, 'sha512').toString('hex');
      return hash === suppliedHash;
    } else {
      console.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ö–µ—à–∞ –ø–∞—Ä–æ–ª—è:', parts.length, '—á–∞—Å—Ç–µ–π');
      return false;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä–æ–ª—è:', error);
    return false;
  }
}
`;

console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!');
console.log('');
console.log('üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –¥–µ–ø–ª–æ—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä:');
console.log('');
console.log('1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–π–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä:');
console.log('   ‚Ä¢ server/auth-sqlite.ts');
console.log('   ‚Ä¢ server/auth-utils.ts');
console.log('   ‚Ä¢ server/auth.ts');
console.log('');
console.log('2. –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã:');
console.log('   cd /var/www/russkii-portal');
console.log('   npm run build');
console.log('   pm2 restart russkii-portal');
console.log('');
console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏:');
console.log('   pm2 logs russkii-portal');
console.log('');
console.log('üéØ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—Ö–æ–¥ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!'); 