const sqlite3 = require('sqlite3').verbose();
const path = require('path');

const DB_PATH = path.join(__dirname, 'db', 'database.sqlite');
const EMAIL = 'etodastandetka@gmail.com';
const PHONE = '+79920793424';

console.log('üßπ –û—á–∏—Å—Ç–∫–∞ pending_registrations');
console.log('üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:', DB_PATH);
console.log('üìß Email:', EMAIL);
console.log('üìû –¢–µ–ª–µ—Ñ–æ–Ω:', PHONE);

const db = new sqlite3.Database(DB_PATH, (err) => {
  if (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', err.message);
    return;
  }
});

// –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∂–µ–º —á—Ç–æ –µ—Å—Ç—å
console.log('\nüîç –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π...');

db.all(
  `SELECT * FROM pending_registrations 
   WHERE phone = ? OR user_data LIKE ?`,
  [PHONE, `%${EMAIL}%`],
  (err, rows) => {
    if (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', err.message);
      db.close();
      return;
    }

    if (rows.length === 0) {
      console.log('‚úÖ –ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      db.close();
      return;
    }

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${rows.length}`);
    
    rows.forEach((row, index) => {
      console.log(`\n   ${index + 1}. ID: ${row.id}`);
      console.log(`      –¢–µ–ª–µ—Ñ–æ–Ω: ${row.phone}`);
      console.log(`      –¢–æ–∫–µ–Ω: ${row.verification_token}`);
      console.log(`      –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: ${row.verified ? '–î–ê' : '–ù–ï–¢'}`);
      console.log(`      –°–æ–∑–¥–∞–Ω: ${row.created_at}`);
      
      try {
        const userData = JSON.parse(row.user_data);
        console.log(`      Email: ${userData.email}`);
      } catch (e) {
        console.log(`      User data: ${row.user_data}`);
      }
    });

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
    console.log('\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π...');
    
    db.run(
      `DELETE FROM pending_registrations 
       WHERE phone = ? OR user_data LIKE ?`,
      [PHONE, `%${EMAIL}%`],
      function(err2) {
        if (err2) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', err2.message);
        } else {
          console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${this.changes}`);
          console.log('üéâ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–Ω–æ–≤–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!');
        }
        db.close();
      }
    );
  }
); 