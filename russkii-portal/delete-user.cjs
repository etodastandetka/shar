const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const readline = require('readline');

// –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const DB_PATH = path.join(__dirname, 'db', 'database.sqlite');

console.log('üóëÔ∏è –°–∫—Ä–∏–ø—Ç —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
console.log('üìÅ –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', DB_PATH);

// –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–≤–æ–¥–∞
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function getDatabase() {
  return new sqlite3.Database(DB_PATH, (err) => {
    if (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err.message);
      process.exit(1);
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function searchUsers(searchTerm) {
  return new Promise((resolve, reject) => {
    const db = getDatabase();
    
    const query = `
      SELECT id, email, phone, telegram_chat_id, phone_verified, created_at 
      FROM users 
      WHERE email LIKE ? OR phone LIKE ? OR telegram_chat_id LIKE ?
      ORDER BY created_at DESC
    `;
    
    const searchPattern = `%${searchTerm}%`;
    
    db.all(query, [searchPattern, searchPattern, searchPattern], (err, rows) => {
      if (err) {
        reject(err);
      } else {
        resolve(rows);
      }
      db.close();
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function deleteUser(userId) {
  return new Promise((resolve, reject) => {
    const db = getDatabase();
    
    db.run('DELETE FROM users WHERE id = ?', [userId], function(err) {
      if (err) {
        reject(err);
      } else {
        resolve(this.changes);
      }
      db.close();
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function showAllUsers() {
  return new Promise((resolve, reject) => {
    const db = getDatabase();
    
    db.all('SELECT id, email, phone, telegram_chat_id, phone_verified, created_at FROM users ORDER BY created_at DESC LIMIT 10', (err, rows) => {
      if (err) {
        reject(err);
      } else {
        resolve(rows);
      }
      db.close();
    });
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    console.log('\nüìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:');
    console.log('1. –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    console.log('2. –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email/—Ç–µ–ª–µ—Ñ–æ–Ω—É');
    console.log('3. –£–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–û–°–¢–û–†–û–ñ–ù–û!)');
    console.log('4. –í—ã—Ö–æ–¥');
    
    rl.question('\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è (1-4): ', async (choice) => {
      try {
        switch (choice) {
          case '1':
            console.log('\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
            const allUsers = await showAllUsers();
            if (allUsers.length === 0) {
              console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            } else {
              allUsers.forEach((user, index) => {
                console.log(`\n${index + 1}. ID: ${user.id}`);
                console.log(`   Email: ${user.email}`);
                console.log(`   –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
                console.log(`   Telegram: ${user.telegram_chat_id || '–Ω–µ —Å–≤—è–∑–∞–Ω'}`);
                console.log(`   –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: ${user.phone_verified ? '–î–∞' : '–ù–µ—Ç'}`);
                console.log(`   –°–æ–∑–¥–∞–Ω: ${user.created_at}`);
              });
              
              rl.question('\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–∏–ª–∏ Enter –¥–ª—è –æ—Ç–º–µ–Ω—ã): ', async (userId) => {
                if (userId.trim()) {
                  const deleted = await deleteUser(userId.trim());
                  if (deleted > 0) {
                    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!`);
                  } else {
                    console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                  }
                } else {
                  console.log('‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
                }
                rl.close();
              });
            }
            break;
            
          case '2':
            rl.question('–í–≤–µ–¥–∏—Ç–µ email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞: ', async (searchTerm) => {
              if (!searchTerm.trim()) {
                console.log('‚ùå –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
                rl.close();
                return;
              }
              
              const users = await searchUsers(searchTerm);
              if (users.length === 0) {
                console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
              } else {
                console.log(`\nüìã –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
                users.forEach((user, index) => {
                  console.log(`\n${index + 1}. ID: ${user.id}`);
                  console.log(`   Email: ${user.email}`);
                  console.log(`   –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
                  console.log(`   Telegram: ${user.telegram_chat_id || '–Ω–µ —Å–≤—è–∑–∞–Ω'}`);
                  console.log(`   –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: ${user.phone_verified ? '–î–∞' : '–ù–µ—Ç'}`);
                });
                
                rl.question('\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–∏–ª–∏ Enter –¥–ª—è –æ—Ç–º–µ–Ω—ã): ', async (userId) => {
                  if (userId.trim()) {
                    const deleted = await deleteUser(userId.trim());
                    if (deleted > 0) {
                      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!`);
                    } else {
                      console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                    }
                  } else {
                    console.log('‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
                  }
                  rl.close();
                });
              }
            });
            break;
            
          case '3':
            rl.question('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π! –í–≤–µ–¥–∏—Ç–µ "DELETE ALL" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ', async (confirmation) => {
              if (confirmation === 'DELETE ALL') {
                const db = getDatabase();
                db.run('DELETE FROM users', function(err) {
                  if (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', err.message);
                  } else {
                    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${this.changes} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
                  }
                  db.close();
                  rl.close();
                });
              } else {
                console.log('‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
                rl.close();
              }
            });
            break;
            
          case '4':
            console.log('üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!');
            rl.close();
            break;
            
          default:
            console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä');
            rl.close();
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
        rl.close();
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    rl.close();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main(); 