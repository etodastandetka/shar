// –ù–û–í–´–ô –ü–†–ê–í–ò–õ–¨–ù–´–ô ENDPOINT –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò
app.post("/api/auth/register-new", async (req, res) => {
  try {
    const { email, password, firstName, lastName, username, phone, address } = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!email || !password || !firstName || !lastName || !phone) {
      return res.status(400).json({ 
        message: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è",
        errors: { 
          email: !email ? "Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" : null,
          password: !password ? "–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" : null,
          firstName: !firstName ? "–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ" : null,
          lastName: !lastName ? "–§–∞–º–∏–ª–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞" : null,
          phone: !phone ? "–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" : null
        }
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    if (password.length < 8) {
      return res.status(400).json({ 
        message: "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤",
        errors: { password: "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤" }
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ users
    const existingUser = db.queryOne("SELECT * FROM users WHERE email = ?", [email.toLowerCase()]);
    if (existingUser) {
      return res.status(400).json({
        message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
        errors: { email: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" }
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ pending_registrations
    const existingPending = db.queryOne("SELECT * FROM pending_registrations WHERE user_data LIKE ?", [`%${email}%`]);
    if (existingPending) {
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å
      db.run("DELETE FROM pending_registrations WHERE user_data LIKE ?", [`%${email}%`]);
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const verificationToken = crypto.randomBytes(16).toString('hex');

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userData = {
      email: email.toLowerCase(),
      password: hashPassword(password), // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å —Å—Ä–∞–∑—É
      firstName,
      lastName,
      username: username || email.split('@')[0],
      phone,
      address: address || ''
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ pending_registrations
    const success = savePendingRegistration(phone, userData, verificationToken);
    
    if (!success) {
      return res.status(500).json({
        message: "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
      });
    }

    console.log(`üìù –ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:`);
    console.log(`   Email: ${email}`);
    console.log(`   –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}`);
    console.log(`   –¢–æ–∫–µ–Ω: ${verificationToken}`);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    res.json({
      message: "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
      verificationToken,
      phone,
      needsPhoneVerification: true
    });

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
    res.status(500).json({ 
      message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      error: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
    });
  }
}); 