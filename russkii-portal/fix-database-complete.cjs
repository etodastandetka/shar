const Database = require('better-sqlite3');
const path = require('path');
const crypto = require('crypto');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
function hashPassword(password) {
    const salt = crypto.randomBytes(32).toString('hex');
    const iterations = 10000;
    const keylen = 64;
    const digest = 'sha512';
    
    const hash = crypto.pbkdf2Sync(password, salt, iterations, keylen, digest).toString('hex');
    return `${salt}:${iterations}:${keylen}:${digest}:${hash}`;
}

try {
    console.log('üîß –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•\n');
    
    const dbPath = path.join(__dirname, 'db', 'database.sqlite');
    const db = new Database(dbPath);
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
    console.log('üìã 1. –ü–†–û–í–ï–†–ö–ê –¢–ê–ë–õ–ò–¶:');
    const tables = db.prepare("SELECT name FROM sqlite_master WHERE type='table';").all();
    console.log(`   –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: ${tables.length}`);
    tables.forEach(table => console.log(`   - ${table.name}`));
    
    // 2. –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    console.log('\nüèóÔ∏è 2. –°–û–ó–î–ê–ù–ò–ï –ù–ï–î–û–°–¢–ê–Æ–©–ò–• –¢–ê–ë–õ–ò–¶:');
    
    // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    try {
        db.prepare(`
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE NOT NULL,
                email TEXT UNIQUE,
                password_hash TEXT NOT NULL,
                phone TEXT,
                telegram_id TEXT,
                phone_verified BOOLEAN DEFAULT 0,
                telegram_verified BOOLEAN DEFAULT 0,
                is_admin BOOLEAN DEFAULT 0,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        `).run();
        console.log('   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ users —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞');
    } catch (e) {
        console.log('   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã users:', e.message);
    }
    
    // –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤
    try {
        db.prepare(`
            CREATE TABLE IF NOT EXISTS products (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                description TEXT,
                price INTEGER NOT NULL,
                category TEXT,
                image_url TEXT,
                stock INTEGER DEFAULT 0,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        `).run();
        console.log('   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ products —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞');
    } catch (e) {
        console.log('   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã products:', e.message);
    }
    
    // –¢–∞–±–ª–∏—Ü–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    try {
        db.prepare(`
            CREATE TABLE IF NOT EXISTS pending_registrations (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                email TEXT,
                password_hash TEXT NOT NULL,
                phone TEXT NOT NULL,
                telegram_id TEXT,
                phone_verified BOOLEAN DEFAULT 0,
                telegram_verified BOOLEAN DEFAULT 0,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        `).run();
        console.log('   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ pending_registrations —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞');
    } catch (e) {
        console.log('   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã pending_registrations:', e.message);
    }
    
    // –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
    try {
        db.prepare(`
            CREATE TABLE IF NOT EXISTS orders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                total_amount INTEGER,
                status TEXT DEFAULT 'pending',
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id)
            )
        `).run();
        console.log('   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ orders —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞');
    } catch (e) {
        console.log('   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã orders:', e.message);
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüë• 3. –ü–†–û–í–ï–†–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:');
    try {
        const users = db.prepare('SELECT * FROM users').all();
        console.log(`   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
        
        if (users.length > 0) {
            console.log('   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:');
            users.forEach((user, idx) => {
                console.log(`   ${idx + 1}. ${user.username} (ID: ${user.id})`);
                console.log(`      Email: ${user.email || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
                console.log(`      –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
                console.log(`      –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: ${user.phone_verified ? '–î–∞' : '–ù–µ—Ç'}`);
                console.log(`      Telegram –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: ${user.telegram_verified ? '–î–∞' : '–ù–µ—Ç'}`);
                console.log(`      –ê–¥–º–∏–Ω: ${user.is_admin ? '–î–∞' : '–ù–µ—Ç'}`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä–æ–ª—è
                if (user.password_hash) {
                    const parts = user.password_hash.split(':');
                    if (parts.length === 5) {
                        console.log(`      –ü–∞—Ä–æ–ª—å: ‚úÖ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (pbkdf2)`);
                    } else if (parts.length === 1 && user.password_hash.startsWith('$2b$')) {
                        console.log(`      –ü–∞—Ä–æ–ª—å: ‚ö†Ô∏è bcrypt —Ñ–æ—Ä–º–∞—Ç (–Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å)`);
                    } else {
                        console.log(`      –ü–∞—Ä–æ–ª—å: ‚ùå –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç`);
                    }
                }
                console.log('');
            });
        }
        
        // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        const admin = db.prepare('SELECT * FROM users WHERE is_admin = 1').get();
        if (!admin) {
            console.log('   üîß –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞...');
            const adminPassword = hashPassword('admin123');
            db.prepare(`
                INSERT INTO users (username, email, password_hash, is_admin, phone_verified, telegram_verified)
                VALUES (?, ?, ?, 1, 1, 1)
            `).run('admin', 'admin@russkii-portal.ru', adminPassword);
            console.log('   ‚úÖ –ê–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω: admin / admin123');
        }
        
    } catch (e) {
        console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', e.message);
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã
    console.log('\nüì¶ 4. –ü–†–û–í–ï–†–ö–ê –¢–û–í–ê–†–û–í:');
    try {
        const products = db.prepare('SELECT * FROM products').all();
        console.log(`   –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);
        
        if (products.length === 0) {
            console.log('   üîß –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã...');
            
            const testProducts = [
                {
                    name: '–§–∏–∫—É—Å –ë–µ–Ω–¥–∂–∞–º–∏–Ω–∞',
                    description: '–ö—Ä–∞—Å–∏–≤–æ–µ –∫–æ–º–Ω–∞—Ç–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ —Å –≥–ª—è–Ω—Ü–µ–≤—ã–º–∏ –ª–∏—Å—Ç—å—è–º–∏',
                    price: 150000, // 1500.00 —Ä—É–± –≤ –∫–æ–ø–µ–π–∫–∞—Ö
                    category: '–ö–æ–º–Ω–∞—Ç–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è',
                    stock: 10
                },
                {
                    name: '–ú–æ–Ω—Å—Ç–µ—Ä–∞ –î–µ–ª–∏–∫–∞—Ç–µ—Å–Ω–∞—è',
                    description: '–¢—Ä–æ–ø–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ —Å —Ä–µ–∑–Ω—ã–º–∏ –ª–∏—Å—Ç—å—è–º–∏',
                    price: 250000, // 2500.00 —Ä—É–± –≤ –∫–æ–ø–µ–π–∫–∞—Ö
                    category: '–ö–æ–º–Ω–∞—Ç–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è',
                    stock: 5
                },
                {
                    name: '–°–∞–Ω—Å–µ–≤–∏–µ—Ä–∏—è (–¢–µ—â–∏–Ω —è–∑—ã–∫)',
                    description: '–ù–µ–ø—Ä–∏—Ö–æ—Ç–ª–∏–≤–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö',
                    price: 80000, // 800.00 —Ä—É–± –≤ –∫–æ–ø–µ–π–∫–∞—Ö
                    category: '–ö–æ–º–Ω–∞—Ç–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è',
                    stock: 15
                }
            ];
            
            const insertProduct = db.prepare(`
                INSERT INTO products (name, description, price, category, stock)
                VALUES (?, ?, ?, ?, ?)
            `);
            
            testProducts.forEach(product => {
                insertProduct.run(product.name, product.description, product.price, product.category, product.stock);
            });
            
            console.log(`   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${testProducts.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤`);
        } else {
            console.log('   –¢–æ–≤–∞—Ä—ã:');
            products.slice(0, 5).forEach((product, idx) => {
                console.log(`   ${idx + 1}. ${product.name} - ${(product.price / 100).toFixed(2)} —Ä—É–±`);
                console.log(`      –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${product.category || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
                console.log(`      –í –Ω–∞–ª–∏—á–∏–∏: ${product.stock || 0}`);
            });
            if (products.length > 5) {
                console.log(`   ... –∏ –µ—â–µ ${products.length - 5} —Ç–æ–≤–∞—Ä–æ–≤`);
            }
        }
    } catch (e) {
        console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', e.message);
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º pending_registrations
    console.log('\n‚è≥ 5. –ü–†–û–í–ï–†–ö–ê –û–ñ–ò–î–ê–Æ–©–ò–• –†–ï–ì–ò–°–¢–†–ê–¶–ò–Æ:');
    try {
        const pending = db.prepare('SELECT * FROM pending_registrations').all();
        console.log(`   –û–∂–∏–¥–∞—é—â–∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: ${pending.length}`);
        
        if (pending.length > 0) {
            pending.forEach((user, idx) => {
                console.log(`   ${idx + 1}. ${user.username} - ${user.phone}`);
                console.log(`      –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: ${user.phone_verified ? '–î–∞' : '–ù–µ—Ç'}`);
                console.log(`      Telegram –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: ${user.telegram_verified ? '–î–∞' : '–ù–µ—Ç'}`);
            });
        }
    } catch (e) {
        console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ pending_registrations:', e.message);
    }
    
    // 6. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–æ–ª–∏
    console.log('\nüîê 6. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–ê–†–û–õ–ï–ô:');
    try {
        const usersWithBadPasswords = db.prepare(`
            SELECT * FROM users 
            WHERE password_hash NOT LIKE '%:%:%:%:%'
            AND password_hash NOT LIKE '$2b$%'
        `).all();
        
        if (usersWithBadPasswords.length > 0) {
            console.log(`   –ù–∞–π–¥–µ–Ω–æ ${usersWithBadPasswords.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–æ–ª—è–º–∏`);
            
            usersWithBadPasswords.forEach(user => {
                console.log(`   –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è: ${user.username}`);
                const newPassword = hashPassword('temp123'); // –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
                db.prepare('UPDATE users SET password_hash = ? WHERE id = ?').run(newPassword, user.id);
                console.log(`   ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: temp123`);
            });
        } else {
            console.log('   ‚úÖ –í—Å–µ –ø–∞—Ä–æ–ª–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ');
        }
    } catch (e) {
        console.log('   ‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π:', e.message);
    }
    
    console.log('\n‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!');
    console.log('\nüìù –ò–¢–û–ì–ò:');
    console.log('   - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    console.log('   - –°–æ–∑–¥–∞–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã');
    console.log('   - –î–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω: admin / admin123 (–µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ)');
    console.log('   - –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã (–µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ)');
    console.log('   - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–æ–ª–∏');
    
    console.log('\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
    console.log('   1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä');
    console.log('   2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –∫–∞–∫ admin / admin123');
    console.log('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∞–π—Ç–µ');
    console.log('   4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    
    db.close();
    
} catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    console.log('\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
    console.log('   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    console.log('   2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º');
    console.log('   3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –∏ telegram-bot –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º');
} 