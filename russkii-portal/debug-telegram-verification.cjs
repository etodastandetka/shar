const Database = require('better-sqlite3');
const path = require('path');

const dbPath = path.join(__dirname, 'db', 'database.sqlite');
const db = new Database(dbPath);

console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TELEGRAM –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò');
console.log('===================================');

const testPhone = '+79920793424';
const testPhoneVariants = [
  '+79920793424',
  '79920793424', 
  '89920793424',
  '+7 992 079 3424',
  '9920793424'
];

console.log(`\nüì± –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –Ω–æ–º–µ—Ä: ${testPhone}`);
console.log(`üì± –í–∞—Ä–∏–∞–Ω—Ç—ã –Ω–æ–º–µ—Ä–∞:`, testPhoneVariants);

// –§—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ (–∫–∞–∫ –≤ –∫–æ–¥–µ)
function normalizePhone(phone) {
  let normalized = phone.replace(/[^\d+]/g, '');
  
  if (normalized.startsWith('8')) {
    normalized = '+7' + normalized.slice(1);
  }
  
  if (normalized.startsWith('7') && !normalized.startsWith('+7')) {
    normalized = '+' + normalized;
  }
  
  if (!normalized.startsWith('+') && normalized.length === 11 && normalized.startsWith('7')) {
    normalized = '+' + normalized;
  }
  
  if (!normalized.startsWith('+') && normalized.length === 10) {
    normalized = '+7' + normalized;
  }
  
  console.log(`üìû –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: "${phone}" -> "${normalized}"`);
  return normalized;
}

// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –≤ pending_registrations
console.log('\nüìã –í—Å–µ pending registrations:');
const allPending = db.prepare('SELECT * FROM pending_registrations ORDER BY created_at DESC').all();

if (allPending.length === 0) {
  console.log('‚ùå –ù–ï–¢ PENDING REGISTRATIONS!');
  console.log('üí° –ù—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ —Å–∞–π—Ç–µ –∑–∞–Ω–æ–≤–æ');
} else {
  allPending.forEach((record, index) => {
    console.log(`\n${index + 1}. ID: ${record.id}`);
    console.log(`   üì± Phone: "${record.phone}"`);
    console.log(`   üîë Token: "${record.verification_token}"`);
    console.log(`   ‚úÖ Verified: ${record.verified ? 'YES' : 'NO'}`);
    console.log(`   üìÖ Created: ${record.created_at}`);
  });
}

// 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
console.log('\nüîß –¢–ï–°–¢ –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ò:');
testPhoneVariants.forEach(variant => {
  const normalized = normalizePhone(variant);
  console.log(`"${variant}" -> "${normalized}"`);
});

// 3. –ü–æ–∏—Å–∫ —Ç–æ–∫–µ–Ω–∞ –ø–æ –Ω–æ–º–µ—Ä—É (–∏–º–∏—Ç–∞—Ü–∏—è getVerificationTokenByPhone)
console.log('\nüîç –ü–û–ò–°–ö –¢–û–ö–ï–ù–ê –ü–û –ù–û–ú–ï–†–£:');
testPhoneVariants.forEach(variant => {
  const normalized = normalizePhone(variant);
  
  const result = db.prepare(`
    SELECT verification_token FROM pending_registrations 
    WHERE phone = ? AND verified = 0
    ORDER BY created_at DESC
    LIMIT 1
  `).get(normalized);
  
  console.log(`–ù–æ–º–µ—Ä: "${variant}" (${normalized}) -> –¢–æ–∫–µ–Ω: ${result ? result.verification_token : '–ù–ï –ù–ê–ô–î–ï–ù'}`);
});

// 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ markPhoneAsVerified –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
if (allPending.length > 0) {
  const latestRecord = allPending[0];
  console.log(`\nüß™ –¢–ï–°–¢ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å—å—é:`);
  console.log(`   –ó–∞–ø–∏—Å—å: Phone="${latestRecord.phone}", Token="${latestRecord.verification_token}"`);
  
  testPhoneVariants.forEach(variant => {
    const normalized = normalizePhone(variant);
    
    // –ü–æ–∏—Å–∫ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    let result = db.prepare(`
      SELECT * FROM pending_registrations 
      WHERE phone = ? AND verification_token = ?
    `).get(normalized, latestRecord.verification_token);
    
    console.log(`\n   –í–∞—Ä–∏–∞–Ω—Ç: "${variant}" (${normalized})`);
    console.log(`   –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${result ? '–ù–ê–ô–î–ï–ù–û' : '–ù–ï –ù–ê–ô–î–ï–ù–û'}`);
    
    // –ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ —Ç–æ–∫–µ–Ω—É
    if (!result) {
      result = db.prepare(`
        SELECT * FROM pending_registrations 
        WHERE verification_token = ?
      `).get(latestRecord.verification_token);
      
      if (result) {
        console.log(`   –ü–æ–∏—Å–∫ –ø–æ —Ç–æ–∫–µ–Ω—É: –ù–ê–ô–î–ï–ù–û (phone="${result.phone}")`);
        console.log(`   –°—Ä–∞–≤–Ω–µ–Ω–∏–µ: "${normalized}" === "${result.phone}" -> ${normalized === result.phone}`);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        const phoneVariants = [
          variant,
          normalized,
          variant.replace(/[^\d]/g, ''),
          '+7' + variant.replace(/[^\d]/g, '').slice(-10),
          '8' + variant.replace(/[^\d]/g, '').slice(-10),
        ];
        
        console.log(`   –í–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:`, phoneVariants);
        console.log(`   –û–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: ${phoneVariants.includes(result.phone)}`);
      }
    }
  });
}

// 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');

if (allPending.length === 0) {
  console.log('1. ‚ùå –ù–µ—Ç pending registrations - –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ —Å–∞–π—Ç–µ');
  console.log('2. üîó –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç: https://helens-jungle.ru/auth');
  console.log('3. üìù –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
  console.log('4. üì± –ü–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Telegram –±–æ—Ç–∞');
} else {
  const latest = allPending[0];
  console.log('1. ‚úÖ –ï—Å—Ç—å pending registration');
  console.log(`2. üîó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É: https://t.me/InvittingToTGbotk_bot?start=${latest.verification_token}`);
  console.log(`3. üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä: ${latest.phone}`);
  console.log('4. üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞: pm2 logs russkii-portal --lines 30');
} 