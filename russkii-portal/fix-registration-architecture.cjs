const fs = require('fs');
const path = require('path');

console.log('üîß –ü–û–õ–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ê–†–•–ò–¢–ï–ö–¢–£–†–´ –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò');

// 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—É—é –ª–æ–≥–∏–∫—É
const routesPath = 'server/routes-sqlite.ts';

console.log('1Ô∏è‚É£ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ endpoints...');

// –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
let routesContent = fs.readFileSync(routesPath, 'utf8');

// –ó–∞–º–µ–Ω—è–µ–º endpoint register
const oldRegister = /\/\/ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è[\s\S]*?\/\/ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è[\s\S]*?res\.json\(\{[\s\S]*?\}\);[\s\S]*?\}\);[\s\S]*?\} catch \(error\) \{[\s\S]*?\}\);[\s\S]*?\}\);/;

const newRegister = `// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Ç–æ–ª—å–∫–æ –≤ pending_registrations
  app.post("/api/auth/register", async (req, res) => {
    try {
      const { email, password, firstName, lastName, username, phone, address } = req.body;
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      if (!email || !password || !firstName || !lastName || !phone) {
        return res.status(400).json({ 
          message: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è",
          errors: { 
            email: !email ? "Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" : null,
            password: !password ? "–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" : null,
            firstName: !firstName ? "–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ" : null,
            lastName: !lastName ? "–§–∞–º–∏–ª–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞" : null,
            phone: !phone ? "–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" : null
          }
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
      if (password.length < 8) {
        return res.status(400).json({ 
          message: "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤",
          errors: { password: "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤" }
        });
      }

      if (!/[A-Z]/.test(password)) {
        return res.status(400).json({ 
          message: "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É",
          errors: { password: "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É" }
        });
      }
      
      if (!/[0-9]/.test(password)) {
        return res.status(400).json({ 
          message: "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—É",
          errors: { password: "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É" }
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ users
      const existingUser = db.queryOne("SELECT * FROM users WHERE email = ?", [email.toLowerCase()]);
      if (existingUser) {
        return res.status(400).json({
          message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
          errors: { email: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" }
        });
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const verificationToken = crypto.randomBytes(16).toString('hex');

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userData = {
        email: email.toLowerCase(),
        password: hashPassword(password), // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å —Å—Ä–∞–∑—É
        firstName,
        lastName,
        username: username || email.split('@')[0],
        phone,
        address: address || ''
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¢–û–õ–¨–ö–û –≤ pending_registrations (–ù–ï –≤ users!)
      const success = savePendingRegistration(phone, userData, verificationToken);
      
      if (!success) {
        return res.status(500).json({
          message: "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
        });
      }

      console.log(\`üìù –ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê):\`);
      console.log(\`   Email: \${email}\`);
      console.log(\`   –¢–µ–ª–µ—Ñ–æ–Ω: \${phone}\`);
      console.log(\`   –¢–æ–∫–µ–Ω: \${verificationToken}\`);

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      res.json({
        message: "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
        verificationToken,
        phone,
        needsPhoneVerification: true
      });

    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
      res.status(500).json({ 
        message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
        error: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
      });
    }
  });`;

// –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—É
if (routesContent.includes('app.post("/api/auth/register"')) {
  routesContent = routesContent.replace(
    /app\.post\("\/api\/auth\/register"[\s\S]*?\}\);/,
    newRegister
  );
  console.log('‚úÖ Endpoint /api/auth/register –∏—Å–ø—Ä–∞–≤–ª–µ–Ω');
} else {
  console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω endpoint /api/auth/register');
}

// 2. –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ phone-verification.ts
const phoneVerificationPath = 'server/phone-verification.ts';
let phoneContent = fs.readFileSync(phoneVerificationPath, 'utf8');

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
if (!phoneContent.includes('getPendingRegistrationData')) {
  const newFunctions = `
// –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ pending_registrations
export function getPendingRegistrationData(phoneNumber: string, verificationToken: string): any | null {
  try {
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    let normalizedPhone = phoneNumber.replace(/[^\\d+]/g, '');
    if (normalizedPhone.startsWith('8')) {
      normalizedPhone = '+7' + normalizedPhone.slice(1);
    }
    if (normalizedPhone.startsWith('7') && !normalizedPhone.startsWith('+7')) {
      normalizedPhone = '+' + normalizedPhone;
    }
    if (!normalizedPhone.startsWith('+') && normalizedPhone.length === 11 && normalizedPhone.startsWith('7')) {
      normalizedPhone = '+' + normalizedPhone;
    }
    if (!normalizedPhone.startsWith('+') && normalizedPhone.length === 10) {
      normalizedPhone = '+7' + normalizedPhone;
    }

    const pending = db.queryOne(
      'SELECT * FROM pending_registrations WHERE phone = ? AND verification_token = ? AND verified = 1',
      [normalizedPhone, verificationToken]
    );

    if (pending && pending.user_data) {
      try {
        return JSON.parse(pending.user_data);
      } catch (parseError) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ user_data:', parseError);
        return null;
      }
    }

    return null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö pending registration:', error);
    return null;
  }
}

// –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∏–∑ pending_registrations
export function removePendingRegistration(phoneNumber: string, verificationToken: string): boolean {
  try {
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    let normalizedPhone = phoneNumber.replace(/[^\\d+]/g, '');
    if (normalizedPhone.startsWith('8')) {
      normalizedPhone = '+7' + normalizedPhone.slice(1);
    }
    if (normalizedPhone.startsWith('7') && !normalizedPhone.startsWith('+7')) {
      normalizedPhone = '+' + normalizedPhone;
    }
    if (!normalizedPhone.startsWith('+') && normalizedPhone.length === 11 && normalizedPhone.startsWith('7')) {
      normalizedPhone = '+' + normalizedPhone;
    }
    if (!normalizedPhone.startsWith('+') && normalizedPhone.length === 10) {
      normalizedPhone = '+7' + normalizedPhone;
    }

    const result = db.run(
      'DELETE FROM pending_registrations WHERE phone = ? AND verification_token = ?',
      [normalizedPhone, verificationToken]
    );

    console.log(\`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –∏–∑ pending_registrations: \${result.changes}\`);
    return result.changes > 0;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è pending registration:', error);
    return false;
  }
}`;

  phoneContent += newFunctions;
  console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ phone-verification.ts');
}

// 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º check-phone-verification endpoint
if (routesContent.includes('app.post("/api/auth/check-phone-verification"')) {
  const newCheckEndpoint = `app.post("/api/auth/check-phone-verification", async (req, res) => {
    try {
      const { phone, verificationToken } = req.body;
      
      console.log(\`üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê): \${phone} —Å —Ç–æ–∫–µ–Ω–æ–º: \${verificationToken}\`);
      
      if (!phone || !verificationToken) {
        return res.status(400).json({ 
          error: "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: phone, verificationToken" 
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ pending_registrations
      const isVerified = checkPhoneVerification(phone, verificationToken);
      
      if (isVerified) {
        // –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω - —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!
        const userData = getPendingRegistrationData(phone, verificationToken);
        
        if (!userData) {
          return res.status(500).json({ 
            error: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" 
          });
        }

        console.log(\`üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \${userData.email}\`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const existingUser = db.queryOne("SELECT * FROM users WHERE email = ?", [userData.email]);
        if (existingUser) {
          console.log(\`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: \${userData.email}\`);
          
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ª–æ–≥–∏–Ω–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const user = userRecordToSessionUser(existingUser);
          req.login(user, (loginErr) => {
            if (loginErr) {
              return res.json({
                verified: true,
                message: "–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É",
                user
              });
            }
            
            // –£–¥–∞–ª—è–µ–º –∏–∑ pending_registrations
            removePendingRegistration(phone, verificationToken);
            
            res.json({
              verified: true,
              message: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
              user,
              autoLogin: true
            });
          });
          return;
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userId = crypto.randomUUID();

        try {
          db.run(
            \`INSERT INTO users (
              id, email, password, username, first_name, last_name, phone, address, 
              phone_verified, balance, is_admin, created_at, updated_at
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\`,
            [
              userId,
              userData.email,
              userData.password, // –£–∂–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
              userData.username,
              userData.firstName,
              userData.lastName,
              phone,
              userData.address,
              1, // phone_verified = true
              '0.00',
              0,
              new Date().toISOString(),
              new Date().toISOString()
            ]
          );

          console.log(\`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: \${userData.email} (ID: \${userId})\`);

          // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const newUser = db.queryOne("SELECT * FROM users WHERE id = ?", [userId]);
          if (!newUser) {
            return res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
          }

          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ª–æ–≥–∏–Ω–∏–º
          const user = userRecordToSessionUser(newUser);
          req.login(user, (loginErr) => {
            if (loginErr) {
              return res.json({
                verified: true,
                message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É",
                user
              });
            }
            
            // –£–¥–∞–ª—è–µ–º –∏–∑ pending_registrations
            removePendingRegistration(phone, verificationToken);
            
            console.log(\`üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: \${userData.email}\`);
            
            res.json({
              verified: true,
              message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!",
              user,
              autoLogin: true
            });
          });

        } catch (dbError) {
          console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î:", dbError);
          res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
        }
      } else {
        res.json({ 
          verified: false,
          message: "–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
        });
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  });`;

  routesContent = routesContent.replace(
    /app\.post\("\/api\/auth\/check-phone-verification"[\s\S]*?\}\);/,
    newCheckEndpoint
  );
  console.log('‚úÖ Endpoint /api/auth/check-phone-verification –∏—Å–ø—Ä–∞–≤–ª–µ–Ω');
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã
fs.writeFileSync(routesPath, routesContent);
fs.writeFileSync(phoneVerificationPath, phoneContent);

console.log('üéâ –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –ò–°–ü–†–ê–í–õ–ï–ù–ê!');
console.log('');
console.log('üìã –ß—Ç–æ –±—ã–ª–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:');
console.log('   ‚úÖ Endpoint /api/auth/register - —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ pending_registrations');
console.log('   ‚úÖ Endpoint /api/auth/check-phone-verification - —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ü–û–°–õ–ï –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
console.log('   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ getPendingRegistrationData –∏ removePendingRegistration');
console.log('   ‚úÖ Telegram –±–æ—Ç —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω');
console.log('');
console.log('üöÄ –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ: npm run build && pm2 restart all'); 