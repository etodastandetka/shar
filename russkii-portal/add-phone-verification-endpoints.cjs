const fs = require('fs');
const path = require('path');

const routesFile = path.join(__dirname, 'server', 'routes-sqlite.ts');

// –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
let content = fs.readFileSync(routesFile, 'utf8');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
if (content.includes('/api/auth/request-phone-verification')) {
  console.log('‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
  process.exit(0);
}

// –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (–ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤)
const importMatch = content.match(/import[\s\S]*?from ['"]\.[^'"]*['"];?\n/g);
if (!importMatch) {
  console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–µ–∫—Ü–∏—é –∏–º–ø–æ—Ä—Ç–æ–≤');
  process.exit(1);
}

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∏–º–ø–æ—Ä—Ç—ã
const phoneVerificationImport = `import { 
  savePendingRegistration, 
  checkPhoneVerification, 
  markPhoneAsVerified,
  getPendingRegistrationData,
  removePendingRegistration 
} from "./phone-verification";
import { handleTelegramUpdate } from "./telegram-bot";`;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–º–ø–æ—Ä—Ç—ã
if (!content.includes('from "./phone-verification"')) {
  const lastImportIndex = content.lastIndexOf('import ');
  const nextLineIndex = content.indexOf('\n', lastImportIndex) + 1;
  content = content.slice(0, nextLineIndex) + phoneVerificationImport + '\n' + content.slice(nextLineIndex);
}

// –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
const endpoints = `
// Phone verification endpoints
app.post("/api/auth/request-phone-verification", async (req, res) => {
  try {
    const { phone, userData, verificationToken } = req.body;
    
    if (!phone || !userData || !verificationToken) {
      return res.status(400).json({ 
        error: "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: phone, userData, verificationToken" 
      });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const saved = await savePendingRegistration(phone, userData, verificationToken);
    
    if (saved) {
      res.json({ 
        success: true, 
        message: "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
        verificationToken 
      });
    } else {
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö" });
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:", error);
    res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

app.post("/api/auth/check-phone-verification", async (req, res) => {
  try {
    const { phone, verificationToken } = req.body;
    
    if (!phone || !verificationToken) {
      return res.status(400).json({ 
        error: "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: phone, verificationToken" 
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const isVerified = await checkPhoneVerification(phone, verificationToken);
    
    if (isVerified) {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userData = await getPendingRegistrationData(phone, verificationToken);
      
      if (userData) {
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await removePendingRegistration(phone, verificationToken);
        
        res.json({ 
          verified: true,
          userData: userData,
          message: "–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω" 
        });
      } else {
        res.json({ 
          verified: false, 
          message: "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" 
        });
      }
    } else {
      res.json({ 
        verified: false,
        message: "–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
      });
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:", error);
    res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// Telegram webhook endpoint
app.post("/api/telegram/webhook", async (req, res) => {
  try {
    const update = req.body;
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
    await handleTelegramUpdate(update);
    
    res.json({ success: true });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Telegram webhook:", error);
    res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// Endpoint –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ Telegram
app.post("/api/telegram/verify-phone", async (req, res) => {
  try {
    const { phone, verificationToken } = req.body;
    
    if (!phone || !verificationToken) {
      return res.status(400).json({ 
        error: "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: phone, verificationToken" 
      });
    }

    // –ü–æ–º–µ—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π
    const verified = await markPhoneAsVerified(phone, verificationToken);
    
    if (verified) {
      res.json({ 
        success: true, 
        message: "–¢–µ–ª–µ—Ñ–æ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω" 
      });
    } else {
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞" });
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", error);
    res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});
`;

// –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ (–ø–µ—Ä–µ–¥ —ç–∫—Å–ø–æ—Ä—Ç–æ–º –∏–ª–∏ –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞)
const insertPosition = content.lastIndexOf('export default app;') || content.length;

// –í—Å—Ç–∞–≤–ª—è–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
content = content.slice(0, insertPosition) + endpoints + '\n' + content.slice(insertPosition);

// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
fs.writeFileSync(routesFile, content, 'utf8');

console.log('‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!');
console.log('üì± –¢–µ–ø–µ—Ä—å —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:');
console.log('   - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å —Ç–æ–∫–µ–Ω–æ–º');
console.log('   - –ü—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
console.log('   - Telegram webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π');
console.log('   - API –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞');
console.log('');
console.log('üîß –ù–µ –∑–∞–±—É–¥—å—Ç–µ:');
console.log('   1. –°–æ–∑–¥–∞—Ç—å Telegram –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather');
console.log('   2. –î–æ–±–∞–≤–∏—Ç—å TELEGRAM_BOT_TOKEN –≤ .env —Ñ–∞–π–ª');
console.log('   3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å webhook –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞'); 