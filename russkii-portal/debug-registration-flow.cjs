const sqlite3 = require('sqlite3').verbose();
const path = require('path');

// –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const DB_PATH = path.join(__dirname, 'db', 'database.sqlite');

console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–¶–ï–°–°–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò');
console.log('üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:', DB_PATH);

const db = new sqlite3.Database(DB_PATH, (err) => {
  if (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', err.message);
    return;
  }
  
  console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ\n');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É pending_registrations
  db.all('SELECT * FROM pending_registrations ORDER BY created_at DESC', (err, pendingRegs) => {
    if (err) {
      if (err.message.includes('no such table')) {
        console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ pending_registrations –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
        console.log('üí° –≠—Ç–æ –æ–±—ä—è—Å–Ω—è–µ—Ç, –ø–æ—á–µ–º—É —Ç–æ–∫–µ–Ω—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è');
        
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        console.log('\nüîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã pending_registrations...');
        
        db.exec(`
          CREATE TABLE IF NOT EXISTS pending_registrations (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            phone TEXT NOT NULL,
            user_data TEXT NOT NULL,
            verification_token TEXT NOT NULL,
            verified INTEGER DEFAULT 0,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
          )
        `, (createErr) => {
          if (createErr) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã:', createErr);
          } else {
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ pending_registrations —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
          }
          
          continueWithUsersCheck();
        });
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è pending_registrations:', err);
        continueWithUsersCheck();
      }
      return;
    }
    
    console.log(`üìã –í–†–ï–ú–ï–ù–ù–´–ï –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò: ${pendingRegs.length}`);
    
    if (pendingRegs.length > 0) {
      console.log('='.repeat(80));
      pendingRegs.forEach((reg, index) => {
        console.log(`\n${index + 1}. üìû ${reg.phone}`);
        console.log(`   üîë –¢–æ–∫–µ–Ω: ${reg.verification_token}`);
        console.log(`   ‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: ${reg.verified ? '–î–∞' : '–ù–µ—Ç'}`);
        console.log(`   üìÖ –°–æ–∑–¥–∞–Ω: ${reg.created_at}`);
        
        try {
          const userData = JSON.parse(reg.user_data);
          console.log(`   üìß Email: ${userData.email || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
          console.log(`   üë§ –ò–º—è: ${userData.name || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`);
        } catch (e) {
          console.log(`   üìã –î–∞–Ω–Ω—ã–µ: ${reg.user_data}`);
        }
        
        if (reg.verification_token) {
          console.log(`   üîó –°—Å—ã–ª–∫–∞: https://t.me/jungle_plants_bot?start=${reg.verification_token}`);
        }
      });
    } else {
      console.log('‚ùå –ù–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π');
    }
    
    continueWithUsersCheck();
  });
  
  function continueWithUsersCheck() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É users
    db.all('SELECT * FROM users ORDER BY created_at DESC', (err, users) => {
      if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err);
        db.close();
        return;
      }
      
      console.log(`\nüë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –í –û–°–ù–û–í–ù–û–ô –¢–ê–ë–õ–ò–¶–ï: ${users.length}`);
      
      if (users.length > 0) {
        console.log('='.repeat(80));
        users.forEach((user, index) => {
          console.log(`\n${index + 1}. üë§ ${user.email}`);
          console.log(`   üÜî ID: ${user.id}`);
          console.log(`   üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
          console.log(`   ‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: ${user.phone_verified ? '–î–∞' : '–ù–µ—Ç'}`);
          console.log(`   üì± Telegram ID: ${user.telegram_chat_id || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
          console.log(`   üîë –¢–æ–∫–µ–Ω –≤ users: ${user.phone_verification_token || '–ù–ï–¢'}`);
          console.log(`   üìÖ –°–æ–∑–¥–∞–Ω: ${user.created_at}`);
        });
      }
      
      // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º
      console.log('\n' + '='.repeat(80));
      console.log('üîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú:');
      
             const activeTokens = pendingRegs.filter(r => !r.verified);
       const verifiedTokens = pendingRegs.filter(r => r.verified);
      const usersWithTokens = users.filter(u => u.phone_verification_token);
      
      console.log(`üìù –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –≤ pending_registrations: ${activeTokens.length}`);
      console.log(`‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –≤ pending_registrations: ${verifiedTokens.length}`);
      console.log(`üîë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –≤ users: ${usersWithTokens.length}`);
      
      if (activeTokens.length > 0) {
        console.log('\n‚úÖ –ï–°–¢–¨ –ê–ö–¢–ò–í–ù–´–ï –¢–û–ö–ï–ù–´! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —ç—Ç–∏ —Å—Å—ã–ª–∫–∏:');
        activeTokens.forEach((token, index) => {
          console.log(`${index + 1}. ${token.phone}: https://t.me/jungle_plants_bot?start=${token.verification_token}`);
        });
      } else {
        console.log('\n‚ùå –ù–ï–¢ –ê–ö–¢–ò–í–ù–´–• –¢–û–ö–ï–ù–û–í');
        console.log('üí° –ü—Ä–∏—á–∏–Ω—ã:');
        console.log('   1. –¢–∞–±–ª–∏—Ü–∞ pending_registrations –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∞');
        console.log('   2. –¢–æ–∫–µ–Ω—ã –Ω–µ —Å–æ–∑–¥–∞—é—Ç—Å—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
        console.log('   3. –¢–æ–∫–µ–Ω—ã —É–¥–∞–ª—è—é—Ç—Å—è –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–æ');
      }
      
      console.log('\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
      if (activeTokens.length > 0) {
        console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –≤—ã—à–µ');
      } else {
        console.log('1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ –Ω–∞ —Å–∞–π—Ç–µ');
        console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ pending_registrations —Å–æ–∑–¥–∞–Ω–∞');
        console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
      }
      
      console.log('\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï:');
      console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: node server/telegram-bot-final.cjs');
      console.log('2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞: https://helens-jungle.ru');
      console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —ç—Ç–∏–º —Å–∫—Ä–∏–ø—Ç–æ–º: node debug-registration-flow.cjs');
      console.log('4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ—è–≤–∏–≤—à—É—é—Å—è —Å—Å—ã–ª–∫—É –≤ Telegram');
      
      db.close();
    });
  }
}); 