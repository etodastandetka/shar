const Database = require('better-sqlite3');
const path = require('path');

try {
    console.log('üîç –ü–†–û–°–¢–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)\n');
    
    const dbPath = path.join(__dirname, 'db', 'database.sqlite');
    const db = new Database(dbPath, { readonly: true }); // –¢–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ!
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
    console.log('üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã:');
    const tables = db.prepare("SELECT name FROM sqlite_master WHERE type='table';").all();
    tables.forEach(table => console.log(`   - ${table.name}`));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:');
    try {
        const users = db.prepare('SELECT COUNT(*) as count FROM users').get();
        console.log(`   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.count}`);
        
        if (users.count > 0) {
            const sampleUsers = db.prepare('SELECT username, email, is_admin FROM users LIMIT 3').all();
            sampleUsers.forEach(user => {
                console.log(`   - ${user.username} (${user.email || '–±–µ–∑ email'}) ${user.is_admin ? '[–ê–î–ú–ò–ù]' : ''}`);
            });
        }
    } catch (e) {
        console.log('   ‚ùå –¢–∞–±–ª–∏—Ü–∞ users –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞:', e.message);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã
    console.log('\nüì¶ –¢–æ–≤–∞—Ä—ã:');
    try {
        const products = db.prepare('SELECT COUNT(*) as count FROM products').get();
        console.log(`   –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.count}`);
        
        if (products.count > 0) {
            const sampleProducts = db.prepare('SELECT name, price FROM products LIMIT 3').all();
            sampleProducts.forEach(product => {
                const priceRub = product.price > 1000 ? (product.price / 100).toFixed(2) : product.price;
                console.log(`   - ${product.name} (${priceRub} —Ä—É–±)`);
            });
        }
    } catch (e) {
        console.log('   ‚ùå –¢–∞–±–ª–∏—Ü–∞ products –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞:', e.message);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞—é—â–∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    console.log('\n‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:');
    try {
        const pending = db.prepare('SELECT COUNT(*) as count FROM pending_registrations').get();
        console.log(`   –û–∂–∏–¥–∞—é—â–∏—Ö: ${pending.count}`);
    } catch (e) {
        console.log('   ‚ùå –¢–∞–±–ª–∏—Ü–∞ pending_registrations –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞:', e.message);
    }
    
    db.close();
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∏–∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –≤–Ω–µ—Å–µ–Ω–æ.');
    
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
} 