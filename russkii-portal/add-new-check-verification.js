const fs = require('fs');
const path = require('path');

const ROUTES_FILE = path.join(__dirname, 'server', 'routes-sqlite.ts');

console.log('üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ endpoint');

// –ù–æ–≤—ã–π endpoint - –≤—Å—Ç–∞–≤–∏–º –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
const newEndpoint = `
  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô ENDPOINT - —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  app.post("/api/auth/check-phone-verification-new", async (req, res) => {
    try {
      const { phone, verificationToken } = req.body;
      
      console.log(\`üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê): \${phone} —Å —Ç–æ–∫–µ–Ω–æ–º: \${verificationToken}\`);
      
      if (!phone || !verificationToken) {
        return res.status(400).json({ 
          error: "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: phone, verificationToken" 
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ pending_registrations
      const isVerified = checkPhoneVerification(phone, verificationToken);
      
      if (isVerified) {
        // –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω - —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!
        const userData = getPendingRegistrationData(phone, verificationToken);
        
        if (!userData) {
          return res.status(500).json({ 
            error: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" 
          });
        }

        console.log(\`üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \${userData.email}\`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const existingUser = db.queryOne("SELECT * FROM users WHERE email = ?", [userData.email]);
        if (existingUser) {
          console.log(\`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: \${userData.email}\`);
          
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ª–æ–≥–∏–Ω–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const user = userRecordToSessionUser(existingUser);
          req.login(user, (loginErr) => {
            if (loginErr) {
              return res.json({
                verified: true,
                message: "–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É",
                user
              });
            }
            
            // –£–¥–∞–ª—è–µ–º –∏–∑ pending_registrations
            removePendingRegistration(phone, verificationToken);
            
            res.json({
              verified: true,
              message: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
              user,
              autoLogin: true
            });
          });
          return;
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userId = crypto.randomUUID();

        try {
          db.run(
            \`INSERT INTO users (
              id, email, password, username, first_name, last_name, phone, address, 
              phone_verified, balance, is_admin, created_at, updated_at
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\`,
            [
              userId,
              userData.email,
              userData.password, // –£–∂–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
              userData.username,
              userData.firstName,
              userData.lastName,
              phone,
              userData.address,
              1, // phone_verified = true
              '0.00',
              0,
              new Date().toISOString(),
              new Date().toISOString()
            ]
          );

          console.log(\`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: \${userData.email} (ID: \${userId})\`);

          // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const newUser = db.queryOne("SELECT * FROM users WHERE id = ?", [userId]);
          if (!newUser) {
            return res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
          }

          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ª–æ–≥–∏–Ω–∏–º
          const user = userRecordToSessionUser(newUser);
          req.login(user, (loginErr) => {
            if (loginErr) {
              return res.json({
                verified: true,
                message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É",
                user
              });
            }
            
            // –£–¥–∞–ª—è–µ–º –∏–∑ pending_registrations
            removePendingRegistration(phone, verificationToken);
            
            console.log(\`üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: \${userData.email}\`);
            
            res.json({
              verified: true,
              message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!",
              user,
              autoLogin: true
            });
          });

        } catch (dbError) {
          console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î:", dbError);
          res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
        }
      } else {
        res.json({ 
          verified: false,
          message: "–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
        });
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  });

`;

// –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
let content = fs.readFileSync(ROUTES_FILE, 'utf8');

// –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (–ø–µ—Ä–µ–¥ "return createServer(app);")
const insertPosition = content.lastIndexOf('  // Create HTTP server');

if (insertPosition === -1) {
  console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏');
  process.exit(1);
}

// –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π endpoint
const newContent = content.slice(0, insertPosition) + newEndpoint + '\n  ' + content.slice(insertPosition);

// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
fs.writeFileSync(ROUTES_FILE, newContent);

console.log('‚úÖ –ù–æ–≤—ã–π endpoint –¥–æ–±–∞–≤–ª–µ–Ω!');
console.log('üìù Endpoint: /api/auth/check-phone-verification-new');
console.log('üéØ –õ–æ–≥–∏–∫–∞: —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
console.log('\nüí° –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ:');
console.log('   1. –û–±–Ω–æ–≤–∏—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ endpoint');
console.log('   2. –ò–ª–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–π endpoint –∏ –Ω–æ–≤—ã–π —Å–¥–µ–ª–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–º'); 