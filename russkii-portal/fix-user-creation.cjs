const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const { v4: uuidv4 } = require('crypto');

// –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const DB_PATH = path.join(__dirname, 'db', 'database.sqlite');

console.log('üîß –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –°–û–ó–î–ê–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô');
console.log('üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:', DB_PATH);

const db = new sqlite3.Database(DB_PATH, (err) => {
  if (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', err.message);
    return;
  }
  
  console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ\n');
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ pending_registrations
  db.all('SELECT * FROM pending_registrations ORDER BY created_at DESC', (err, pendingRegs) => {
    if (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è pending_registrations:', err);
      db.close();
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    db.all('SELECT * FROM users', (err2, users) => {
      if (err2) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err2);
        db.close();
        return;
      }
      
      console.log(`üìã –ù–∞–π–¥–µ–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: ${pendingRegs.length}`);
      console.log(`üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}\n`);
      
      // –ò—â–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const missingUsers = [];
      
      pendingRegs.forEach(pending => {
        try {
          const userData = JSON.parse(pending.user_data);
          const email = userData.email;
          const phone = pending.phone;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
          const existingUser = users.find(u => 
            u.email === email || u.phone === phone
          );
          
          if (!existingUser) {
            missingUsers.push({
              pending,
              userData
            });
          }
        } catch (e) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${pending.phone}:`, e);
        }
      });
      
      if (missingUsers.length === 0) {
        console.log('‚úÖ –í—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–º–µ—é—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        db.close();
        return;
      }
      
      console.log(`üîß –ù–∞–π–¥–µ–Ω–æ ${missingUsers.length} —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`);
      
      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      let created = 0;
      let errors = 0;
      
      const createUser = (index) => {
        if (index >= missingUsers.length) {
          console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:`);
          console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${created}`);
          console.log(`‚ùå –û—à–∏–±–æ–∫: ${errors}`);
          db.close();
          return;
        }
        
        const { pending, userData } = missingUsers[index];
        const userId = uuidv4();
        const hashedPassword = '$2b$10$defaulthashedpassword'; // –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
        
        console.log(`\n${index + 1}. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userData.email}`);
        console.log(`   üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${pending.phone}`);
        console.log(`   üîë –¢–æ–∫–µ–Ω: ${pending.verification_token}`);
        
        const insertUserSql = `
          INSERT INTO users (
            id, email, password, phone, phone_verified, 
            phone_verification_token, telegram_chat_id, 
            created_at, updated_at
          ) VALUES (?, ?, ?, ?, ?, ?, ?, datetime('now'), datetime('now'))
        `;
        
        db.run(
          insertUserSql,
          [
            userId,
            userData.email,
            hashedPassword,
            pending.phone,
            0, // –ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ø–æ–∫–∞
            pending.verification_token, // –¢–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            null // Telegram ID —É—Å—Ç–∞–Ω–æ–≤–∏–º –ø–æ—Å–ª–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
          ],
          function(insertErr) {
            if (insertErr) {
              console.error(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${insertErr.message}`);
              errors++;
            } else {
              console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω —Å ID: ${userId}`);
              console.log(`   üîó –°—Å—ã–ª–∫–∞: https://t.me/jungle_plants_bot?start=${pending.verification_token}`);
              created++;
            }
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
            createUser(index + 1);
          }
        );
      };
      
      // –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
      createUser(0);
    });
  });
}); 