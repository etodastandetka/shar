const Database = require('better-sqlite3');
const path = require('path');

const dbPath = path.join(__dirname, 'db', 'database.sqlite');
const db = new Database(dbPath);

console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê PHONE VERIFICATION');
console.log('=================================');

// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ pending registrations
console.log('\nüìã –í—Å–µ pending registrations:');
const pendingRegs = db.prepare('SELECT * FROM pending_registrations ORDER BY created_at DESC').all();
pendingRegs.forEach((reg, index) => {
  console.log(`${index + 1}. ID: ${reg.id}`);
  console.log(`   Phone: ${reg.phone}`);
  console.log(`   Token: ${reg.verification_token}`);
  console.log(`   Verified: ${reg.verified ? 'YES' : 'NO'}`);
  console.log(`   Created: ${reg.created_at}`);
  
  try {
    const userData = JSON.parse(reg.user_data);
    console.log(`   Email: ${userData.email}`);
    console.log(`   Name: ${userData.fullName}`);
  } catch (e) {
    console.log(`   User Data: ${reg.user_data.substring(0, 50)}...`);
  }
  console.log('');
});

// 2. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
function cleanOldPendingRegistrations() {
  console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö pending registrations...');
  
  // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞
  const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000).toISOString();
  const result = db.prepare('DELETE FROM pending_registrations WHERE created_at < ?').run(oneHourAgo);
  
  console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${result.changes} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π`);
}

// 3. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
function cleanUnverifiedForPhone(phone) {
  console.log(`üßπ –û—á–∏—Å—Ç–∫–∞ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${phone}`);
  
  const result = db.prepare('DELETE FROM pending_registrations WHERE phone = ? AND verified = 0').run(phone);
  
  console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${result.changes} –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π`);
}

// 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
function checkExistingUser(phone) {
  console.log(`üë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º: ${phone}`);
  
  const user = db.prepare('SELECT id, email, full_name, phone_verified FROM users WHERE phone = ?').get(phone);
  
  if (user) {
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:`);
    console.log(`   ID: ${user.id}`);
    console.log(`   Email: ${user.email}`);
    console.log(`   Name: ${user.full_name}`);
    console.log(`   Phone verified: ${user.phone_verified ? 'YES' : 'NO'}`);
    return user;
  } else {
    console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º ${phone} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    return null;
  }
}

// –í—ã–ø–æ–ª–Ω—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
if (pendingRegs.length > 0) {
  console.log('\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å
  pendingRegs.forEach((reg) => {
    console.log(`\nüì± –î–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ${reg.phone}:`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingUser = checkExistingUser(reg.phone);
    
    if (existingUser) {
      console.log('   üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –£–¥–∞–ª–∏—Ç—å pending registration, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      console.log(`   üîó –î–ª—è –≤—Ö–æ–¥–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ email ${existingUser.email}`);
    } else {
      console.log('   üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é');
      console.log(`   üîó Telegram —Å—Å—ã–ª–∫–∞: https://t.me/InvittingToTGbotik_bot?start=${reg.verification_token}`);
    }
  });
  
  console.log('\nüõ†Ô∏è –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
  console.log('1. –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞): node -e "require(\'./debug-phone-verification.cjs\').cleanOld()"');
  console.log('2. –û—á–∏—Å—Ç–∏—Ç—å –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞: node -e "require(\'./debug-phone-verification.cjs\').cleanPhone(\'+79920793424\')"');
} else {
  console.log('‚úÖ –ù–µ—Ç pending registrations');
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
module.exports = {
  cleanOld: cleanOldPendingRegistrations,
  cleanPhone: cleanUnverifiedForPhone,
  checkUser: checkExistingUser
}; 