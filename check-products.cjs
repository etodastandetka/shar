const Database = require('better-sqlite3');
const path = require('path');

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const dbPath = path.join(__dirname, 'db', 'database.sqlite');
const db = new Database(dbPath);

console.log('=== –ü–†–û–í–ï–†–ö–ê –ö–ê–¢–ï–ì–û–†–ò–ô –í –ë–ê–ó–ï –î–ê–ù–ù–´–• ===\n');

try {
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  console.log('üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –ë–î:');
  const categories = db.prepare('SELECT DISTINCT category FROM products WHERE category IS NOT NULL ORDER BY category').all();
  categories.forEach(row => {
    console.log(`  - ${row.category}`);
  });

  console.log('\nüìä –¢–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:');
  const categoryCounts = db.prepare('SELECT category, COUNT(*) as count FROM products WHERE category IS NOT NULL GROUP BY category ORDER BY category').all();
  categoryCounts.forEach(row => {
    console.log(`  ${row.category}: ${row.count} —Ç–æ–≤–∞—Ä–æ–≤`);
  });

  console.log('\nüîç –ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:');
  categories.forEach(categoryRow => {
    const products = db.prepare('SELECT id, name, category FROM products WHERE category = ? LIMIT 3').all(categoryRow.category);
    console.log(`\n  ${categoryRow.category}:`);
    products.forEach(product => {
      console.log(`    - [${product.id}] ${product.name}`);
    });
  });

  console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
} finally {
  db.close();
} 