const Database = require('better-sqlite3');
const path = require('path');

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const dbPath = path.join(__dirname, 'db', 'database.sqlite');
const db = new Database(dbPath);

console.log('=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –§–ò–õ–¨–¢–†–ê–¶–ò–ò –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú ===\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∫–∞–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
function formatProductForClient(product) {
  if (!product) return null;
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É JSON –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è images –∏ labels
  let images = [];
  if (product.images) {
    try {
      images = typeof product.images === 'string' ? JSON.parse(product.images) : product.images;
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON images:", e);
    }
  }
  
  let labels = [];
  if (product.labels) {
    try {
      labels = typeof product.labels === 'string' ? JSON.parse(product.labels) : product.labels;
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON labels:", e);
    }
  }
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª–µ–π
  return {
    id: product.id,
    name: product.name,
    description: product.description,
    price: product.price,
    originalPrice: product.original_price,
    images: images,
    quantity: product.quantity,
    category: product.category,
    isAvailable: Boolean(product.is_available),
    isPreorder: Boolean(product.is_preorder),
    isRare: Boolean(product.is_rare),
    isEasyToCare: Boolean(product.is_easy_to_care),
    labels: labels,
    deliveryCost: product.delivery_cost,
    plantSize: product.plant_size || 'medium',
    lightLevel: product.light_level || 'moderate',
    humidityLevel: product.humidity_level || 'medium',
    plantType: product.plant_type || 'decorative',
    origin: product.origin || 'tropical',
    isPetSafe: Boolean(product.is_pet_safe),
    isAirPurifying: Boolean(product.is_air_purifying),
    isFlowering: Boolean(product.is_flowering),
    isHotDeal: Boolean(product.is_hot_deal),
    isBestseller: Boolean(product.is_bestseller),
    isNewArrival: Boolean(product.is_new_arrival),
    isLimitedEdition: Boolean(product.is_limited_edition),
    isDiscounted: Boolean(product.is_discounted),
    createdAt: product.created_at,
    updatedAt: product.updated_at
  };
}

try {
  // 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º API /api/categories
  console.log('üìÇ –¢–µ—Å—Ç API /api/categories:');
  const products = db.prepare("SELECT DISTINCT category FROM products WHERE category IS NOT NULL AND category != ''").all();
  const categories = products.map(product => product.category).filter(Boolean);
  console.log('  –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', categories.length);
  categories.forEach(cat => {
    console.log(`  - ${cat}`);
  });

  // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  console.log('\nüîç –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:');
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  const rawProducts = db.prepare("SELECT * FROM products").all();
  const allProducts = rawProducts.map(product => formatProductForClient(product));
  console.log(`  –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î: ${allProducts.length}`);

  categories.forEach(category => {
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    const filteredProducts = allProducts.filter(product => 
      product && product.category === category
    );
    
    console.log(`\n  –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${category}": ${filteredProducts.length} —Ç–æ–≤–∞—Ä–æ–≤`);
    
    if (filteredProducts.length > 0) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–æ–≤–∞—Ä–∞
      filteredProducts.slice(0, 3).forEach(product => {
        console.log(`    - [${product.id}] ${product.name} (${product.price}‚ÇΩ)`);
      });
      
      if (filteredProducts.length > 3) {
        console.log(`    ... –∏ –µ—â–µ ${filteredProducts.length - 3} —Ç–æ–≤–∞—Ä–æ–≤`);
      }
    } else {
      console.log('    ‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
    }
  });

  // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–¥–∫–∏–µ —Ç–æ–≤–∞—Ä—ã
  console.log('\nüåü –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–¥–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤:');
  const rareProducts = allProducts.filter(product => 
    product && product.isRare
  );
  console.log(`  –†–µ–¥–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤: ${rareProducts.length}`);
  
  rareProducts.slice(0, 5).forEach(product => {
    console.log(`    - [${product.id}] ${product.name} (${product.category})`);
  });

  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
} finally {
  db.close();
} 