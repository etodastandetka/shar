const Database = require('better-sqlite3');
const crypto = require('crypto');
const path = require('path');

// –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –ø–æ–º–æ—á—å —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
const problemUsers = [
  { phone: '89055752187', email: 'user1@example.com', firstName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', lastName: '1' },
  { phone: '89177985719', email: 'user2@example.com', firstName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', lastName: '2' },
  { phone: '+7 (906) 177-52-95', email: 'Irina_Tsvyetkova@mail.ru', firstName: '–ò—Ä–∏–Ω–∞', lastName: '–¶–≤–µ—Ç–∫–æ–≤–∞' },
  { phone: '89514601973', email: 'user3@example.com', firstName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', lastName: '3' },
  { phone: '79061520938', email: 'user4@example.com', firstName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', lastName: '4' },
  { phone: '89872530078', email: 'user5@example.com', firstName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', lastName: '5' },
  { phone: '89528582942', email: 'kazoku.boido@gmail.com', firstName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', lastName: '6' },
  { phone: '+79026573070', email: 'fantazer-igr@yandex.ru', firstName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', lastName: '7' },
  { phone: '+79296701161', email: 'user8@example.com', firstName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', lastName: '8' },
  { phone: '+79179276626', email: 'user9@example.com', firstName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', lastName: '9' },
];

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∫–∞–∫ –≤ –±–æ—Ç–µ)
function normalizePhone(phone) {
  let normalized = phone.replace(/[^\d+]/g, '');
  
  if (normalized.startsWith('8')) {
    normalized = '+7' + normalized.slice(1);
  }
  if (normalized.startsWith('7') && !normalized.startsWith('+7')) {
    normalized = '+' + normalized;
  }
  if (!normalized.startsWith('+') && normalized.length === 11 && normalized.startsWith('7')) {
    normalized = '+' + normalized;
  }
  if (!normalized.startsWith('+') && normalized.length === 10) {
    normalized = '+7' + normalized;
  }
  
  return normalized;
}

// –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è (–ø—Ä–æ—Å—Ç–æ–µ –¥–ª—è –¥–µ–º–æ)
function hashPassword(password) {
  return crypto.createHash('sha256').update(password).digest('hex');
}

async function fixRegistrations() {
  console.log('üöÄ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π...');
  
  const dbPath = path.join(__dirname, 'db', 'database.sqlite');
  const db = new Database(dbPath);
  
  console.log(`üìÅ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ: ${dbPath}`);
  
  let fixed = 0;
  let created = 0;
  let fromPending = 0;
  
  // –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ pending registrations
  console.log('\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö pending registrations...');
  
  const verifiedPending = db.prepare(`
    SELECT * FROM pending_registrations 
    WHERE verified = 1
  `).all();
  
  for (const pending of verifiedPending) {
    try {
      const userData = JSON.parse(pending.user_data);
      const normalizedPhone = normalizePhone(pending.phone);
      
      console.log(`\nüìû –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ: ${userData.email}`);
      console.log(`   –¢–µ–ª–µ—Ñ–æ–Ω: ${pending.phone}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const existingUser = db.prepare('SELECT * FROM users WHERE email = ?')
        .get(userData.email);
      
      if (!existingUser) {
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ pending_registration
        const insertResult = db.prepare(`
          INSERT INTO users (
            email, password, full_name, username, 
            phone, phone_verified, is_admin, balance, created_at
          ) VALUES (?, ?, ?, ?, ?, 1, 0, '0.00', datetime('now'))
        `).run(
          userData.email.toLowerCase(),
          userData.password, // –ü–∞—Ä–æ–ª—å —É–∂–µ –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω
          userData.firstName + ' ' + userData.lastName,
          userData.username,
          normalizedPhone
        );
        
        console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ pending (ID: ${insertResult.lastInsertRowid})`);
        fromPending++;
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ pending_registrations
        db.prepare('DELETE FROM pending_registrations WHERE id = ?').run(pending.id);
        console.log(`   üßπ –£–¥–∞–ª–µ–Ω–æ –∏–∑ pending_registrations`);
      } else {
        console.log(`   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        // –£–¥–∞–ª—è–µ–º –∏–∑ pending_registrations —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å
        db.prepare('DELETE FROM pending_registrations WHERE id = ?').run(pending.id);
        console.log(`   üßπ –£–¥–∞–ª–µ–Ω–æ –∏–∑ pending_registrations (–¥—É–±–ª–∏–∫–∞—Ç)`);
      }
    } catch (error) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ pending ID ${pending.id}: ${error.message}`);
    }
  }
  
  // –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  console.log('\nüë• –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
  
  for (const user of problemUsers) {
    const normalizedPhone = normalizePhone(user.phone);
    const defaultPassword = 'TempPass123!'; // –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
    
    console.log(`\nüë§ –û–±—Ä–∞–±–æ—Ç–∫–∞: ${user.firstName} ${user.lastName}`);
    console.log(`   üìß Email: ${user.email}`);
    console.log(`   üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone} -> ${normalizedPhone}`);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const existingUser = db.prepare('SELECT * FROM users WHERE email = ? OR phone = ?')
        .get(user.email, normalizedPhone);
      
      if (existingUser) {
        console.log(`   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: ${existingUser.id})`);
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
        const updateResult = db.prepare(`
          UPDATE users 
          SET phone_verified = 1, phone = ?
          WHERE id = ?
        `).run(normalizedPhone, existingUser.id);
        
        console.log(`   üì± –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: ${updateResult.changes > 0 ? '–î–ê' : '–£–ñ–ï –ë–´–õ'}`);
        fixed++;
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const insertResult = db.prepare(`
          INSERT INTO users (
            email, password, full_name, username, 
            phone, phone_verified, is_admin, balance, created_at
          ) VALUES (?, ?, ?, ?, ?, 1, 0, '0.00', datetime('now'))
        `).run(
          user.email.toLowerCase(),
          hashPassword(defaultPassword),
          `${user.firstName} ${user.lastName}`,
          user.email.split('@')[0],
          normalizedPhone
        );
        
        console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: ${insertResult.lastInsertRowid})`);
        console.log(`   üîë –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: ${defaultPassword}`);
        created++;
      }
      
      // –û—á–∏—â–∞–µ–º pending_registrations –¥–ª—è —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞
      const cleanupResult = db.prepare('DELETE FROM pending_registrations WHERE phone = ?')
        .run(normalizedPhone);
      
      if (cleanupResult.changes > 0) {
        console.log(`   üßπ –û—á–∏—â–µ–Ω–æ pending_registrations: ${cleanupResult.changes}`);
      }
      
    } catch (error) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  }
  
  db.close();
  
  console.log(`\nüìä –ò–¢–û–ì–ò:`);
  console.log(`   üîÑ –°–æ–∑–¥–∞–Ω–æ –∏–∑ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö pending: ${fromPending}`);
  console.log(`   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${fixed}`);
  console.log(`   üÜï –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${created}`);
  console.log(`   üì± –í—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ç–µ–ø–µ—Ä—å –º–æ–≥—É—Ç –≤—Ö–æ–¥–∏—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É`);
  console.log(`   üîë –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: TempPass123!`);
  console.log(`\nüí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
fixRegistrations().catch(console.error); 