const Database = require('better-sqlite3');
const path = require('path');
const fs = require('fs');

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const dbPath = path.join(__dirname, 'db', 'database.sqlite');
const db = new Database(dbPath);

console.log('=== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –§–ò–õ–¨–¢–†–ê–¶–ò–ò –¢–û–í–ê–†–û–í –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú ===\n');

try {
  // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–æ–≤–∞—Ä—ã
  console.log('üìÇ –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤...');
  
  const categories = db.prepare('SELECT DISTINCT category FROM products WHERE category IS NOT NULL ORDER BY category').all();
  const allProducts = db.prepare('SELECT * FROM products ORDER BY category, name').all();
  
  console.log(`\n‚úÖ –ù–∞–π–¥–µ–Ω–æ:`);
  console.log(`   - –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${categories.length}`);
  console.log(`   - –¢–æ–≤–∞—Ä–æ–≤: ${allProducts.length}`);
  
  // 2. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  const productsByCategory = {};
  
  categories.forEach(cat => {
    const categoryName = cat.category;
    productsByCategory[categoryName] = allProducts.filter(p => p.category === categoryName);
  });
  
  console.log('\nüìä –¢–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:');
  Object.entries(productsByCategory).forEach(([category, products]) => {
    console.log(`   ${category}: ${products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
  });
  
  // 3. –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
  const categoryData = {
    categories: categories.map(c => c.category),
    productsByCategory: productsByCategory,
    allProducts: allProducts,
    lastUpdated: new Date().toISOString()
  };
  
  // 4. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª
  const dataPath = path.join(__dirname, 'client', 'public', 'category-data.json');
  fs.writeFileSync(dataPath, JSON.stringify(categoryData, null, 2));
  console.log(`\nüíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${dataPath}`);
  
  console.log('\nüéâ –î–ê–ù–ù–´–ï –ü–û–î–ì–û–¢–û–í–õ–ï–ù–´!');
  console.log('\nüìã –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª category-data.json —Å:');
  console.log(`   - ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏`);
  console.log(`   - ${allProducts.length} —Ç–æ–≤–∞—Ä–∞–º–∏`);
  console.log('   - –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º');
  
  // 5. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ
  console.log('\nüîß –°–æ–∑–¥–∞—é —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é...');
  
  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É
  const simpleFilter = `import { useState, useEffect } from "react";
import { useLocation } from "wouter";
import { useQuery } from "@tanstack/react-query";
import { Button } from "@/components/ui/button";
import { Filter, X } from "lucide-react";

function CategoryFilterSimple() {
  const [location, setLocation] = useLocation();
  const [showMobileFilters, setShowMobileFilters] = useState(false);
  
  // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ API
  const { data: categories = [], isLoading } = useQuery({
    queryKey: ['/api/categories'],
    queryFn: async () => {
      const res = await fetch('/api/categories');
      if (!res.ok) throw new Error('Failed to fetch categories');
      return res.json();
    },
    staleTime: 0,
    gcTime: 0
  });
  
  // –ü–∞—Ä—Å–∏–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ URL
  const searchParams = new URLSearchParams(location.split("?")[1] || "");
  const currentCategory = searchParams.get("category") || "";
  const isRareFilter = searchParams.get("rare") === "true";
  
  const applyFilter = (category, rare) => {
    const params = new URLSearchParams();
    
    if (category) params.set("category", category);
    if (rare) params.set("rare", "true");
    
    const currentSearch = searchParams.get("search");
    if (currentSearch) params.set("search", currentSearch);
    
    const minPrice = searchParams.get("minPrice");
    const maxPrice = searchParams.get("maxPrice");
    if (minPrice) params.set("minPrice", minPrice);
    if (maxPrice) params.set("maxPrice", maxPrice);
    
    const newUrl = \`/catalog\${params.toString() ? \`?\${params.toString()}\` : ""}\`;
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã - —ç—Ç–æ —Ä–µ—à–∏—Ç –ø—Ä–æ–±–ª–µ–º—É –∫—ç—à–∞
    window.location.href = newUrl;
  };
  
  const clearAllFilters = () => {
    window.location.href = "/catalog";
  };
  
  const hasActiveFilters = currentCategory || isRareFilter;
  
  return (
    <section className="bg-gray-50 py-4 border-b">
      <div className="container mx-auto px-4">
        <div className="hidden lg:block">
          <div className="flex items-center space-x-2 overflow-x-auto scrollbar-hide pb-2">
            <Button
              variant={!currentCategory && !isRareFilter ? "default" : "outline"}
              onClick={() => applyFilter()}
            >
              –í—Å–µ —Ä–∞—Å—Ç–µ–Ω–∏—è
            </Button>
            
            {!isLoading && categories.map((category) => (
              <Button
                key={category}
                variant={currentCategory === category ? "default" : "outline"}
                onClick={() => applyFilter(category)}
              >
                {category}
              </Button>
            ))}
            
            <Button
              variant={isRareFilter ? "default" : "outline"}
              onClick={() => applyFilter(undefined, true)}
            >
              –†–µ–¥–∫–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è
            </Button>
            
            {hasActiveFilters && (
              <Button variant="ghost" onClick={clearAllFilters}>
                <X className="h-4 w-4 mr-1" />
                –°–±—Ä–æ—Å–∏—Ç—å
              </Button>
            )}
          </div>
        </div>
        
        {isLoading && (
          <div className="text-center py-4">
            <span className="text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...</span>
          </div>
        )}
      </div>
    </section>
  );
}

export default CategoryFilterSimple;`;

  const simpleFilterPath = path.join(__dirname, 'client', 'src', 'components', 'CategoryFilterSimple.tsx');
  fs.writeFileSync(simpleFilterPath, simpleFilter);
  console.log(`üìù –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Å—Ç–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç: CategoryFilterSimple.tsx`);
  
  console.log('\nüí° –†–ï–®–ï–ù–ò–ï:');
  console.log('1. –ó–∞–º–µ–Ω–∏—Ç–µ –≤ catalog-page.tsx —Å—Ç—Ä–æ–∫—É:');
  console.log('   import CategoryFilter from "@/components/CategoryFilter";');
  console.log('   –ù–ê:');
  console.log('   import CategoryFilterSimple from "@/components/CategoryFilterSimple";');
  console.log('');
  console.log('2. –ó–∞–º–µ–Ω–∏—Ç–µ –≤ JSX:');
  console.log('   <CategoryFilter />');
  console.log('   –ù–ê:');
  console.log('   <CategoryFilterSimple />');
  console.log('');
  console.log('3. –°–æ–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç: npm run build');
  console.log('');
  console.log('üîß –ß—Ç–æ –¥–µ–ª–∞–µ—Ç –Ω–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ:');
  console.log('   - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç window.location.href –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏');
  console.log('   - –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ö–æ–¥–∏—Ç React Query –∫—ç—à');
  console.log('   - –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π');

} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏:', error);
} finally {
  db.close();
} 